
rfm12b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f4  00800100  0000358a  0000361e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000358a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008e  008001f4  008001f4  00003712  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00003712  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000415  00000000  00000000  00003772  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002dc0  00000000  00000000  00003b87  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a59  00000000  00000000  00006947  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001f93  00000000  00000000  000073a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000400  00000000  00000000  00009334  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000af0  00000000  00000000  00009734  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001bf5  00000000  00000000  0000a224  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000178  00000000  00000000  0000be19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c4 02 	jmp	0x588	; 0x588 <__ctors_end>
       4:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__bad_interrupt>
       8:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__bad_interrupt>
       c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__vector_3>
      10:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__bad_interrupt>
      14:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__bad_interrupt>
      18:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__bad_interrupt>
      1c:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__bad_interrupt>
      20:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__bad_interrupt>
      24:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__bad_interrupt>
      28:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__bad_interrupt>
      2c:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__bad_interrupt>
      30:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__bad_interrupt>
      34:	0c 94 4b 08 	jmp	0x1096	; 0x1096 <__vector_13>
      38:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__bad_interrupt>
      3c:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__bad_interrupt>
      40:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__bad_interrupt>
      44:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__bad_interrupt>
      48:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__bad_interrupt>
      4c:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__bad_interrupt>
      50:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__bad_interrupt>
      54:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__bad_interrupt>
      58:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__bad_interrupt>
      5c:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__bad_interrupt>
      60:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__bad_interrupt>
      64:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__bad_interrupt>
      68:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__bad_interrupt>
      6c:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__bad_interrupt>
      70:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__bad_interrupt>
      74:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__bad_interrupt>
      78:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__bad_interrupt>

0000007c <font5x7>:
      7c:	00 00 00 00 00 00 00 5f 00 00 00 03 00 03 00 14     ......._........
      8c:	3e 14 3e 14 24 2a 7f 2a 12 43 33 08 66 61 36 49     >.>.$*.*.C3.fa6I
      9c:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      ac:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      bc:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      cc:	3e 51 49 45 3e 00 04 02 7f 00 42 61 51 49 46 22     >QIE>.....BaQIF"
      dc:	41 49 49 36 18 14 12 7f 10 27 45 45 45 39 3e 49     AII6.....'EEE9>I
      ec:	49 49 32 01 01 71 09 07 36 49 49 49 36 26 49 49     II2..q..6III6&II
      fc:	49 3e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     I>.66...V6...."A
     10c:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     11c:	3e 41 59 55 5e 7e 09 09 09 7e 7f 49 49 49 36 3e     >AYU^~...~.III6>
     12c:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     13c:	09 09 01 3e 41 41 49 3a 7f 08 08 08 7f 00 41 7f     ...>AAI:......A.
     14c:	41 00 30 40 40 40 3f 7f 08 14 22 41 7f 40 40 40     A.0@@@?..."A.@@@
     15c:	40 7f 02 0c 02 7f 7f 02 04 08 7f 3e 41 41 41 3e     @..........>AAA>
     16c:	7f 09 09 09 06 1e 21 21 21 5e 7f 09 09 09 76 26     ......!!!^....v&
     17c:	49 49 49 32 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     18c:	40 20 1f 7f 20 10 20 7f 41 22 1c 22 41 07 08 70     @ .. . .A"."A..p
     19c:	08 07 61 51 49 45 43 00 7f 41 00 00 02 04 08 10     ..aQIEC..A......
     1ac:	20 00 00 41 7f 00 04 02 01 02 04 40 40 40 40 40      ..A.......@@@@@
     1bc:	00 01 02 04 00 20 54 54 54 78 7f 44 44 44 38 38     ..... TTTx.DDD88
     1cc:	44 44 44 44 38 44 44 44 7f 38 54 54 54 18 04 04     DDDD8DDD.8TTT...
     1dc:	7e 05 05 08 54 54 54 3c 7f 08 04 04 78 00 44 7d     ~...TTT<....x.D}
     1ec:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     1fc:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     20c:	7c 14 14 14 08 08 14 14 14 7c 00 7c 08 04 04 48     |........|.|...H
     21c:	54 54 54 20 04 04 3f 44 44 3c 40 40 20 7c 1c 20     TTT ..?DD<@@ |. 
     22c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     23c:	50 3c 44 64 54 4c 44 00 08 36 41 41 00 00 7f 00     P<DdTLD..6AA....
     24c:	00 41 41 36 08 00 02 01 02 04 02                    .AA6.......

00000257 <_ZL9init_cmds>:
     257:	d6 80 01 82 f4 a4 02 c6 2d 94 ab c2 81 ca f7 c4     ........-.......
     267:	70 98 00 c8 00 e0 81 82                             p.......

0000026f <ascii_6x8>:
     26f:	02 00 00 00 00 00 00 01 22 20 20 20 00 00 20 01     ........"   .. .
     27f:	52 50 50 00 00 00 00 01 52 50 f8 50 f8 50 50 01     RPP.....RP.P.PP.
     28f:	22 78 a0 70 28 f0 20 01 c2 c8 10 20 40 98 18 01     "x.p(. .... @...
     29f:	62 90 a0 40 a8 90 68 01 62 20 40 00 00 00 00 01     b..@..h.b @.....
     2af:	12 20 40 40 40 20 10 01 42 20 10 10 10 20 40 01     . @@@ ..B ... @.
     2bf:	02 20 a8 70 a8 20 00 01 02 20 20 f8 20 20 00 01     . .p. ...  .  ..
     2cf:	02 00 00 00 00 60 20 41 02 00 00 f8 00 00 00 01     .....` A........
     2df:	02 00 00 00 00 60 60 01 02 08 10 20 40 80 00 01     .....``.... @...
     2ef:	72 88 98 a8 c8 88 70 01 22 60 20 20 20 20 70 01     r.....p."`    p.
     2ff:	72 88 08 10 20 40 f8 01 fa 10 20 10 08 88 70 01     r... @.... ...p.
     30f:	12 30 50 90 f8 10 10 01 fa 80 f0 08 08 88 70 01     .0P...........p.
     31f:	32 40 80 f0 88 88 70 01 fa 08 10 20 40 40 40 01     2@....p.... @@@.
     32f:	72 88 88 70 88 88 70 01 72 88 88 78 08 10 60 01     r..p..p.r..x..`.
     33f:	02 60 60 00 60 60 00 01 02 60 60 00 60 20 40 01     .``.``...``.` @.
     34f:	12 20 40 80 40 20 10 01 02 00 f8 00 f8 00 00 01     . @.@ ..........
     35f:	42 20 10 08 10 20 40 01 72 88 08 10 20 00 20 01     B ... @.r... . .
     36f:	72 88 08 68 a8 a8 70 01 72 88 88 88 f8 88 88 01     r..h..p.r.......
     37f:	f2 88 88 f0 88 88 f0 01 72 88 80 80 80 88 70 01     ........r.....p.
     38f:	e2 90 88 88 88 90 e0 01 fa 80 80 f0 80 80 f8 01     ................
     39f:	fa 80 80 f0 80 80 80 01 72 88 80 b8 88 88 78 01     ........r.....x.
     3af:	8a 88 88 f8 88 88 88 01 72 20 20 20 20 20 70 01     ........r     p.
     3bf:	3a 10 10 10 10 90 60 01 8a 90 a0 c0 a0 90 88 01     :.....`.........
     3cf:	82 80 80 80 80 80 f8 01 8a d8 a8 a8 88 88 88 01     ................
     3df:	8a 88 c8 a8 98 88 88 01 72 88 88 88 88 88 70 01     ........r.....p.
     3ef:	f2 88 88 f0 80 80 80 01 72 88 88 88 a8 90 68 01     ........r.....h.
     3ff:	f2 88 88 f0 a0 90 88 01 7a 80 80 70 08 08 f0 01     ........z..p....
     40f:	fa 20 20 20 20 20 20 01 8a 88 88 88 88 88 70 01     .      .......p.
     41f:	8a 88 88 88 88 50 20 01 8a 88 88 a8 a8 a8 50 01     .....P .......P.
     42f:	8a 88 50 20 50 88 88 01 8a 88 88 50 20 20 20 01     ..P P......P   .
     43f:	fa 08 10 20 40 80 f8 01 72 40 40 40 40 40 70 01     ... @...r@@@@@p.
     44f:	02 80 40 20 10 08 00 01 72 10 10 10 10 10 70 01     ..@ ....r.....p.
     45f:	22 50 88 00 00 00 00 01 02 00 00 00 00 00 f8 01     "P..............
     46f:	42 20 10 00 00 00 00 01 02 00 70 08 78 88 78 01     B ........p.x.x.
     47f:	82 80 b0 c8 88 88 f0 01 02 00 70 80 80 88 70 01     ..........p...p.
     48f:	0a 08 68 98 88 88 78 01 02 00 70 88 f8 80 70 01     ..h...x...p...p.
     49f:	32 48 40 e0 40 40 40 01 02 78 88 88 78 08 70 01     2H@.@@@..x..x.p.
     4af:	82 80 b0 c8 88 88 88 01 22 00 60 20 20 20 70 01     ........".`   p.
     4bf:	12 00 30 10 10 90 60 01 82 80 90 a0 c0 a0 90 01     ..0...`.........
     4cf:	62 20 20 20 20 20 70 01 02 00 d0 a8 a8 a8 a8 01     b     p.........
     4df:	02 00 b0 c8 88 88 88 01 02 00 70 88 88 88 70 01     ..........p...p.
     4ef:	02 00 f0 88 f0 80 80 01 02 00 68 98 78 08 08 01     ..........h.x...
     4ff:	02 00 b0 c8 80 80 80 01 02 00 70 80 70 08 f0 01     ..........p.p...
     50f:	42 40 e0 40 40 48 30 01 02 00 88 88 88 98 68 01     B@.@@H0.......h.
     51f:	02 00 88 88 88 50 20 01 02 00 88 88 a8 a8 50 01     .....P .......P.
     52f:	02 00 88 50 20 50 88 01 02 00 88 88 78 08 70 01     ...P P......x.p.
     53f:	02 00 f8 10 20 40 f8 01 12 20 20 40 20 20 10 01     .... @...  @  ..
     54f:	22 20 20 20 20 20 20 01 42 20 20 10 20 20 40 01     "      .B  .  @.
     55f:	02 00 68 90 00 00 00 01 02 00 00 00 00 00 00 01     ..h.............
     56f:	00 50 50 00 00 88 70 00 00 50 50 00 00 70 88 00     .PP...p..PP..p..
     57f:	00 50 50 00 88 a8 50 00 00                          .PP...P..

00000588 <__ctors_end>:
     588:	11 24       	eor	r1, r1
     58a:	1f be       	out	0x3f, r1	; 63
     58c:	cf ef       	ldi	r28, 0xFF	; 255
     58e:	d0 e1       	ldi	r29, 0x10	; 16
     590:	de bf       	out	0x3e, r29	; 62
     592:	cd bf       	out	0x3d, r28	; 61

00000594 <__do_copy_data>:
     594:	11 e0       	ldi	r17, 0x01	; 1
     596:	a0 e0       	ldi	r26, 0x00	; 0
     598:	b1 e0       	ldi	r27, 0x01	; 1
     59a:	ea e8       	ldi	r30, 0x8A	; 138
     59c:	f5 e3       	ldi	r31, 0x35	; 53
     59e:	02 c0       	rjmp	.+4      	; 0x5a4 <.do_copy_data_start>

000005a0 <.do_copy_data_loop>:
     5a0:	05 90       	lpm	r0, Z+
     5a2:	0d 92       	st	X+, r0

000005a4 <.do_copy_data_start>:
     5a4:	a4 3f       	cpi	r26, 0xF4	; 244
     5a6:	b1 07       	cpc	r27, r17
     5a8:	d9 f7       	brne	.-10     	; 0x5a0 <.do_copy_data_loop>

000005aa <__do_clear_bss>:
     5aa:	12 e0       	ldi	r17, 0x02	; 2
     5ac:	a4 ef       	ldi	r26, 0xF4	; 244
     5ae:	b1 e0       	ldi	r27, 0x01	; 1
     5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <.do_clear_bss_start>

000005b2 <.do_clear_bss_loop>:
     5b2:	1d 92       	st	X+, r1

000005b4 <.do_clear_bss_start>:
     5b4:	a2 38       	cpi	r26, 0x82	; 130
     5b6:	b1 07       	cpc	r27, r17
     5b8:	e1 f7       	brne	.-8      	; 0x5b2 <.do_clear_bss_loop>
     5ba:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <main>
     5be:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <_exit>

000005c2 <__bad_interrupt>:
     5c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005c6 <_Z23init_display_controllerv>:
#include "ili934x.h"

void init_display_controller()
{
	uint16_t x, y;
	RESET_lo();
     5c6:	12 98       	cbi	0x02, 2	; 2
     5c8:	88 ee       	ldi	r24, 0xE8	; 232
     5ca:	93 e0       	ldi	r25, 0x03	; 3
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     5cc:	2c e2       	ldi	r18, 0x2C	; 44
     5ce:	31 e0       	ldi	r19, 0x01	; 1
     5d0:	f9 01       	movw	r30, r18
     5d2:	31 97       	sbiw	r30, 0x01	; 1
     5d4:	f1 f7       	brne	.-4      	; 0x5d2 <_Z23init_display_controllerv+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5d8:	d9 f7       	brne	.-10     	; 0x5d0 <_Z23init_display_controllerv+0xa>
	_delay_ms(100);
	RESET_hi();
     5da:	12 9a       	sbi	0x02, 2	; 2
     5dc:	88 ee       	ldi	r24, 0xE8	; 232
     5de:	93 e0       	ldi	r25, 0x03	; 3
     5e0:	2c e2       	ldi	r18, 0x2C	; 44
     5e2:	31 e0       	ldi	r19, 0x01	; 1
     5e4:	f9 01       	movw	r30, r18
     5e6:	31 97       	sbiw	r30, 0x01	; 1
     5e8:	f1 f7       	brne	.-4      	; 0x5e6 <_Z23init_display_controllerv+0x20>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5ec:	d9 f7       	brne	.-10     	; 0x5e4 <_Z23init_display_controllerv+0x1e>
	_delay_ms(100);
	RS_hi();
     5ee:	14 9a       	sbi	0x02, 4	; 2
	WR_hi();
     5f0:	13 9a       	sbi	0x02, 3	; 2
	RD_hi(); 
     5f2:	15 9a       	sbi	0x02, 5	; 2
	CS_lo();
     5f4:	10 98       	cbi	0x02, 0	; 2
	BLC_lo();
     5f6:	11 98       	cbi	0x02, 1	; 2
	VSYNC_hi();
     5f8:	16 9a       	sbi	0x02, 6	; 2
	write_cmd(DISPLAY_OFF);
     5fa:	14 98       	cbi	0x02, 4	; 2
     5fc:	88 e2       	ldi	r24, 0x28	; 40
     5fe:	88 b9       	out	0x08, r24	; 8
     600:	13 98       	cbi	0x02, 3	; 2
     602:	13 9a       	sbi	0x02, 3	; 2
     604:	14 9a       	sbi	0x02, 4	; 2
	write_cmd(SLEEP_OUT);
     606:	14 98       	cbi	0x02, 4	; 2
     608:	81 e1       	ldi	r24, 0x11	; 17
     60a:	88 b9       	out	0x08, r24	; 8
     60c:	13 98       	cbi	0x02, 3	; 2
     60e:	13 9a       	sbi	0x02, 3	; 2
     610:	14 9a       	sbi	0x02, 4	; 2
     612:	88 e5       	ldi	r24, 0x58	; 88
     614:	92 e0       	ldi	r25, 0x02	; 2
     616:	2c e2       	ldi	r18, 0x2C	; 44
     618:	31 e0       	ldi	r19, 0x01	; 1
     61a:	f9 01       	movw	r30, r18
     61c:	31 97       	sbiw	r30, 0x01	; 1
     61e:	f1 f7       	brne	.-4      	; 0x61c <_Z23init_display_controllerv+0x56>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     620:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     622:	d9 f7       	brne	.-10     	; 0x61a <_Z23init_display_controllerv+0x54>
	_delay_ms(60);
	write_cmd_data(INTERNAL_IC_SETTING,			 1, "\x01");
     624:	14 98       	cbi	0x02, 4	; 2
     626:	8b ec       	ldi	r24, 0xCB	; 203
     628:	88 b9       	out	0x08, r24	; 8
     62a:	13 98       	cbi	0x02, 3	; 2
     62c:	13 9a       	sbi	0x02, 3	; 2
     62e:	14 9a       	sbi	0x02, 4	; 2
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	98 b9       	out	0x08, r25	; 8
     634:	13 98       	cbi	0x02, 3	; 2
     636:	13 9a       	sbi	0x02, 3	; 2
	write_cmd_data(POWER_CONTROL_1,				 2, "\x26\x08");
     638:	14 98       	cbi	0x02, 4	; 2
     63a:	80 ec       	ldi	r24, 0xC0	; 192
     63c:	88 b9       	out	0x08, r24	; 8
     63e:	13 98       	cbi	0x02, 3	; 2
     640:	13 9a       	sbi	0x02, 3	; 2
     642:	14 9a       	sbi	0x02, 4	; 2
     644:	80 91 33 01 	lds	r24, 0x0133
     648:	88 b9       	out	0x08, r24	; 8
     64a:	13 98       	cbi	0x02, 3	; 2
     64c:	13 9a       	sbi	0x02, 3	; 2
     64e:	80 91 34 01 	lds	r24, 0x0134
     652:	88 b9       	out	0x08, r24	; 8
     654:	13 98       	cbi	0x02, 3	; 2
     656:	13 9a       	sbi	0x02, 3	; 2
    write_cmd_data(POWER_CONTROL_2,				 1, "\x10");
     658:	14 98       	cbi	0x02, 4	; 2
     65a:	81 ec       	ldi	r24, 0xC1	; 193
     65c:	88 b9       	out	0x08, r24	; 8
     65e:	13 98       	cbi	0x02, 3	; 2
     660:	13 9a       	sbi	0x02, 3	; 2
     662:	14 9a       	sbi	0x02, 4	; 2
     664:	80 e1       	ldi	r24, 0x10	; 16
     666:	88 b9       	out	0x08, r24	; 8
     668:	13 98       	cbi	0x02, 3	; 2
     66a:	13 9a       	sbi	0x02, 3	; 2
    write_cmd_data(VCOM_CONTROL_1,				 2, "\x35\x3E");
     66c:	14 98       	cbi	0x02, 4	; 2
     66e:	85 ec       	ldi	r24, 0xC5	; 197
     670:	88 b9       	out	0x08, r24	; 8
     672:	13 98       	cbi	0x02, 3	; 2
     674:	13 9a       	sbi	0x02, 3	; 2
     676:	14 9a       	sbi	0x02, 4	; 2
     678:	80 91 36 01 	lds	r24, 0x0136
     67c:	88 b9       	out	0x08, r24	; 8
     67e:	13 98       	cbi	0x02, 3	; 2
     680:	13 9a       	sbi	0x02, 3	; 2
     682:	80 91 37 01 	lds	r24, 0x0137
     686:	88 b9       	out	0x08, r24	; 8
     688:	13 98       	cbi	0x02, 3	; 2
     68a:	13 9a       	sbi	0x02, 3	; 2
    write_cmd_data(MEMORY_ACCESS_CONTROL,		 1, "\x48");
     68c:	14 98       	cbi	0x02, 4	; 2
     68e:	86 e3       	ldi	r24, 0x36	; 54
     690:	88 b9       	out	0x08, r24	; 8
     692:	13 98       	cbi	0x02, 3	; 2
     694:	13 9a       	sbi	0x02, 3	; 2
     696:	14 9a       	sbi	0x02, 4	; 2
     698:	88 e4       	ldi	r24, 0x48	; 72
     69a:	88 b9       	out	0x08, r24	; 8
     69c:	13 98       	cbi	0x02, 3	; 2
     69e:	13 9a       	sbi	0x02, 3	; 2
    write_cmd_data(RGB_INTERFACE_SIGNAL_CONTROL, 1, "\x4A");  // Set the DE/Hsync/Vsync/Dotclk polarity
     6a0:	14 98       	cbi	0x02, 4	; 2
     6a2:	80 eb       	ldi	r24, 0xB0	; 176
     6a4:	88 b9       	out	0x08, r24	; 8
     6a6:	13 98       	cbi	0x02, 3	; 2
     6a8:	13 9a       	sbi	0x02, 3	; 2
     6aa:	14 9a       	sbi	0x02, 4	; 2
     6ac:	8a e4       	ldi	r24, 0x4A	; 74
     6ae:	88 b9       	out	0x08, r24	; 8
     6b0:	13 98       	cbi	0x02, 3	; 2
     6b2:	13 9a       	sbi	0x02, 3	; 2
    write_cmd_data(FRAME_CONTROL_IN_NORMAL_MODE, 2, "\x00\x1B"); // 70Hz
     6b4:	14 98       	cbi	0x02, 4	; 2
     6b6:	81 eb       	ldi	r24, 0xB1	; 177
     6b8:	88 b9       	out	0x08, r24	; 8
     6ba:	13 98       	cbi	0x02, 3	; 2
     6bc:	13 9a       	sbi	0x02, 3	; 2
     6be:	14 9a       	sbi	0x02, 4	; 2
     6c0:	80 91 39 01 	lds	r24, 0x0139
     6c4:	88 b9       	out	0x08, r24	; 8
     6c6:	13 98       	cbi	0x02, 3	; 2
     6c8:	13 9a       	sbi	0x02, 3	; 2
     6ca:	80 91 3a 01 	lds	r24, 0x013A
     6ce:	88 b9       	out	0x08, r24	; 8
     6d0:	13 98       	cbi	0x02, 3	; 2
     6d2:	13 9a       	sbi	0x02, 3	; 2
    write_cmd_data(DISPLAY_FUNCTION_CONTROL,	 4, "\x0A\x82\x27\x00");
     6d4:	ee e2       	ldi	r30, 0x2E	; 46
     6d6:	f1 e0       	ldi	r31, 0x01	; 1
     6d8:	14 98       	cbi	0x02, 4	; 2
     6da:	86 eb       	ldi	r24, 0xB6	; 182
     6dc:	88 b9       	out	0x08, r24	; 8
     6de:	13 98       	cbi	0x02, 3	; 2
     6e0:	13 9a       	sbi	0x02, 3	; 2
     6e2:	14 9a       	sbi	0x02, 4	; 2
     6e4:	81 91       	ld	r24, Z+
     6e6:	88 b9       	out	0x08, r24	; 8
     6e8:	13 98       	cbi	0x02, 3	; 2
     6ea:	13 9a       	sbi	0x02, 3	; 2
     6ec:	41 e0       	ldi	r20, 0x01	; 1
     6ee:	e2 33       	cpi	r30, 0x32	; 50
     6f0:	f4 07       	cpc	r31, r20
     6f2:	c1 f7       	brne	.-16     	; 0x6e4 <_Z23init_display_controllerv+0x11e>
    write_cmd_data(VCOM_CONTROL_2,			     1, "\xB5");
     6f4:	14 98       	cbi	0x02, 4	; 2
     6f6:	87 ec       	ldi	r24, 0xC7	; 199
     6f8:	88 b9       	out	0x08, r24	; 8
     6fa:	13 98       	cbi	0x02, 3	; 2
     6fc:	13 9a       	sbi	0x02, 3	; 2
     6fe:	14 9a       	sbi	0x02, 4	; 2
     700:	85 eb       	ldi	r24, 0xB5	; 181
     702:	88 b9       	out	0x08, r24	; 8
     704:	13 98       	cbi	0x02, 3	; 2
     706:	13 9a       	sbi	0x02, 3	; 2
    write_cmd_data(INTERFACE_CONTROL,			 3, "\x01\x00\x00"); // System interface
     708:	ea e2       	ldi	r30, 0x2A	; 42
     70a:	f1 e0       	ldi	r31, 0x01	; 1
     70c:	14 98       	cbi	0x02, 4	; 2
     70e:	86 ef       	ldi	r24, 0xF6	; 246
     710:	88 b9       	out	0x08, r24	; 8
     712:	13 98       	cbi	0x02, 3	; 2
     714:	13 9a       	sbi	0x02, 3	; 2
     716:	14 9a       	sbi	0x02, 4	; 2
     718:	81 91       	ld	r24, Z+
     71a:	88 b9       	out	0x08, r24	; 8
     71c:	13 98       	cbi	0x02, 3	; 2
     71e:	13 9a       	sbi	0x02, 3	; 2
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	ed 32       	cpi	r30, 0x2D	; 45
     724:	f8 07       	cpc	r31, r24
     726:	c1 f7       	brne	.-16     	; 0x718 <_Z23init_display_controllerv+0x152>
    write_cmd_data(GAMMA_DISABLE,				 1, "\x00"); 
     728:	14 98       	cbi	0x02, 4	; 2
     72a:	82 ef       	ldi	r24, 0xF2	; 242
     72c:	88 b9       	out	0x08, r24	; 8
     72e:	13 98       	cbi	0x02, 3	; 2
     730:	13 9a       	sbi	0x02, 3	; 2
     732:	14 9a       	sbi	0x02, 4	; 2
     734:	18 b8       	out	0x08, r1	; 8
     736:	13 98       	cbi	0x02, 3	; 2
     738:	13 9a       	sbi	0x02, 3	; 2
    write_cmd_data(GAMMA_SET,					 1, "\x01"); // Select Gamma curve 1
     73a:	14 98       	cbi	0x02, 4	; 2
     73c:	86 e2       	ldi	r24, 0x26	; 38
     73e:	88 b9       	out	0x08, r24	; 8
     740:	13 98       	cbi	0x02, 3	; 2
     742:	13 9a       	sbi	0x02, 3	; 2
     744:	14 9a       	sbi	0x02, 4	; 2
     746:	98 b9       	out	0x08, r25	; 8
     748:	13 98       	cbi	0x02, 3	; 2
     74a:	13 9a       	sbi	0x02, 3	; 2
    write_cmd_data(PIXEL_FORMAT_SET,			 1, "\x55"); // 0x66 - 18bit /pixel,  0x55 - 16bit/pixel
     74c:	14 98       	cbi	0x02, 4	; 2
     74e:	8a e3       	ldi	r24, 0x3A	; 58
     750:	88 b9       	out	0x08, r24	; 8
     752:	13 98       	cbi	0x02, 3	; 2
     754:	13 9a       	sbi	0x02, 3	; 2
     756:	14 9a       	sbi	0x02, 4	; 2
     758:	85 e5       	ldi	r24, 0x55	; 85
     75a:	88 b9       	out	0x08, r24	; 8
     75c:	13 98       	cbi	0x02, 3	; 2
     75e:	13 9a       	sbi	0x02, 3	; 2
    write_cmd_data(POSITIVE_GAMMA_CORRECTION,	15, "\x1F\x1A\x18\x0A\x0F\x06\x45\x87\x32\x0A\x07\x02\x07\x05\x00");
     760:	ea e1       	ldi	r30, 0x1A	; 26
     762:	f1 e0       	ldi	r31, 0x01	; 1
     764:	14 98       	cbi	0x02, 4	; 2
     766:	80 ee       	ldi	r24, 0xE0	; 224
     768:	88 b9       	out	0x08, r24	; 8
     76a:	13 98       	cbi	0x02, 3	; 2
     76c:	13 9a       	sbi	0x02, 3	; 2
     76e:	14 9a       	sbi	0x02, 4	; 2
     770:	81 91       	ld	r24, Z+
     772:	88 b9       	out	0x08, r24	; 8
     774:	13 98       	cbi	0x02, 3	; 2
     776:	13 9a       	sbi	0x02, 3	; 2
     778:	41 e0       	ldi	r20, 0x01	; 1
     77a:	e9 32       	cpi	r30, 0x29	; 41
     77c:	f4 07       	cpc	r31, r20
     77e:	c1 f7       	brne	.-16     	; 0x770 <_Z23init_display_controllerv+0x1aa>
    write_cmd_data(NEGATIVE_GAMMA_CORRECTION,	15, "\x00\x25\x27\x05\x10\x09\x3A\x78\x4D\x05\x18\x0D\x38\x3A\x1F");
     780:	ea e0       	ldi	r30, 0x0A	; 10
     782:	f1 e0       	ldi	r31, 0x01	; 1
     784:	14 98       	cbi	0x02, 4	; 2
     786:	81 ee       	ldi	r24, 0xE1	; 225
     788:	88 b9       	out	0x08, r24	; 8
     78a:	13 98       	cbi	0x02, 3	; 2
     78c:	13 9a       	sbi	0x02, 3	; 2
     78e:	14 9a       	sbi	0x02, 4	; 2
     790:	81 91       	ld	r24, Z+
     792:	88 b9       	out	0x08, r24	; 8
     794:	13 98       	cbi	0x02, 3	; 2
     796:	13 9a       	sbi	0x02, 3	; 2
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	e9 31       	cpi	r30, 0x19	; 25
     79c:	f8 07       	cpc	r31, r24
     79e:	c1 f7       	brne	.-16     	; 0x790 <_Z23init_display_controllerv+0x1ca>
    write_cmd_data(COLUMN_ADDRESS_SET,			 4, "\x00\x00\x00\xEF");
     7a0:	e5 e0       	ldi	r30, 0x05	; 5
     7a2:	f1 e0       	ldi	r31, 0x01	; 1
     7a4:	14 98       	cbi	0x02, 4	; 2
     7a6:	8a e2       	ldi	r24, 0x2A	; 42
     7a8:	88 b9       	out	0x08, r24	; 8
     7aa:	13 98       	cbi	0x02, 3	; 2
     7ac:	13 9a       	sbi	0x02, 3	; 2
     7ae:	14 9a       	sbi	0x02, 4	; 2
     7b0:	81 91       	ld	r24, Z+
     7b2:	88 b9       	out	0x08, r24	; 8
     7b4:	13 98       	cbi	0x02, 3	; 2
     7b6:	13 9a       	sbi	0x02, 3	; 2
     7b8:	41 e0       	ldi	r20, 0x01	; 1
     7ba:	e9 30       	cpi	r30, 0x09	; 9
     7bc:	f4 07       	cpc	r31, r20
     7be:	c1 f7       	brne	.-16     	; 0x7b0 <_Z23init_display_controllerv+0x1ea>
    write_cmd_data(PAGE_ADDRESS_SET,			 4, "\x00\x00\x01\x3F");
     7c0:	e0 e0       	ldi	r30, 0x00	; 0
     7c2:	f1 e0       	ldi	r31, 0x01	; 1
     7c4:	14 98       	cbi	0x02, 4	; 2
     7c6:	8b e2       	ldi	r24, 0x2B	; 43
     7c8:	88 b9       	out	0x08, r24	; 8
     7ca:	13 98       	cbi	0x02, 3	; 2
     7cc:	13 9a       	sbi	0x02, 3	; 2
     7ce:	14 9a       	sbi	0x02, 4	; 2
     7d0:	81 91       	ld	r24, Z+
     7d2:	88 b9       	out	0x08, r24	; 8
     7d4:	13 98       	cbi	0x02, 3	; 2
     7d6:	13 9a       	sbi	0x02, 3	; 2
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	e4 30       	cpi	r30, 0x04	; 4
     7dc:	f8 07       	cpc	r31, r24
     7de:	c1 f7       	brne	.-16     	; 0x7d0 <_Z23init_display_controllerv+0x20a>
    write_cmd(TEARING_EFFECT_LINE_OFF);
     7e0:	14 98       	cbi	0x02, 4	; 2
     7e2:	84 e3       	ldi	r24, 0x34	; 52
     7e4:	88 b9       	out	0x08, r24	; 8
     7e6:	13 98       	cbi	0x02, 3	; 2
     7e8:	13 9a       	sbi	0x02, 3	; 2
     7ea:	14 9a       	sbi	0x02, 4	; 2
    write_cmd_data(DISPLAY_INVERSION_CONTROL,	 1, "\x00");
     7ec:	14 98       	cbi	0x02, 4	; 2
     7ee:	84 eb       	ldi	r24, 0xB4	; 180
     7f0:	88 b9       	out	0x08, r24	; 8
     7f2:	13 98       	cbi	0x02, 3	; 2
     7f4:	13 9a       	sbi	0x02, 3	; 2
     7f6:	14 9a       	sbi	0x02, 4	; 2
     7f8:	18 b8       	out	0x08, r1	; 8
     7fa:	13 98       	cbi	0x02, 3	; 2
     7fc:	13 9a       	sbi	0x02, 3	; 2
    write_cmd_data(ENTRY_MODE_SET,				 1, "\x07");
     7fe:	14 98       	cbi	0x02, 4	; 2
     800:	87 eb       	ldi	r24, 0xB7	; 183
     802:	88 b9       	out	0x08, r24	; 8
     804:	13 98       	cbi	0x02, 3	; 2
     806:	13 9a       	sbi	0x02, 3	; 2
     808:	14 9a       	sbi	0x02, 4	; 2
     80a:	87 e0       	ldi	r24, 0x07	; 7
     80c:	88 b9       	out	0x08, r24	; 8
     80e:	13 98       	cbi	0x02, 3	; 2
     810:	13 9a       	sbi	0x02, 3	; 2
    /* Clear display */
	write_cmd(MEMORY_WRITE);
     812:	14 98       	cbi	0x02, 4	; 2
     814:	8c e2       	ldi	r24, 0x2C	; 44
     816:	88 b9       	out	0x08, r24	; 8
     818:	13 98       	cbi	0x02, 3	; 2
     81a:	13 9a       	sbi	0x02, 3	; 2
     81c:	14 9a       	sbi	0x02, 4	; 2
     81e:	20 e0       	ldi	r18, 0x00	; 0
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	10 c0       	rjmp	.+32     	; 0x844 <_Z23init_display_controllerv+0x27e>
	for(x=0; x<240; x++)
		for(y=0; y<320; y++)
			write_data16(0x0000);
     824:	18 b8       	out	0x08, r1	; 8
     826:	13 98       	cbi	0x02, 3	; 2
     828:	13 9a       	sbi	0x02, 3	; 2
     82a:	18 b8       	out	0x08, r1	; 8
     82c:	13 98       	cbi	0x02, 3	; 2
     82e:	13 9a       	sbi	0x02, 3	; 2
    write_cmd_data(DISPLAY_INVERSION_CONTROL,	 1, "\x00");
    write_cmd_data(ENTRY_MODE_SET,				 1, "\x07");
    /* Clear display */
	write_cmd(MEMORY_WRITE);
	for(x=0; x<240; x++)
		for(y=0; y<320; y++)
     830:	01 96       	adiw	r24, 0x01	; 1
     832:	41 e0       	ldi	r20, 0x01	; 1
     834:	80 34       	cpi	r24, 0x40	; 64
     836:	94 07       	cpc	r25, r20
     838:	a9 f7       	brne	.-22     	; 0x824 <_Z23init_display_controllerv+0x25e>
    write_cmd(TEARING_EFFECT_LINE_OFF);
    write_cmd_data(DISPLAY_INVERSION_CONTROL,	 1, "\x00");
    write_cmd_data(ENTRY_MODE_SET,				 1, "\x07");
    /* Clear display */
	write_cmd(MEMORY_WRITE);
	for(x=0; x<240; x++)
     83a:	2f 5f       	subi	r18, 0xFF	; 255
     83c:	3f 4f       	sbci	r19, 0xFF	; 255
     83e:	20 3f       	cpi	r18, 0xF0	; 240
     840:	31 05       	cpc	r19, r1
     842:	19 f0       	breq	.+6      	; 0x84a <_Z23init_display_controllerv+0x284>
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	ed cf       	rjmp	.-38     	; 0x824 <_Z23init_display_controllerv+0x25e>
		for(y=0; y<320; y++)
			write_data16(0x0000);
	write_cmd(DISPLAY_ON);
     84a:	14 98       	cbi	0x02, 4	; 2
     84c:	89 e2       	ldi	r24, 0x29	; 41
     84e:	88 b9       	out	0x08, r24	; 8
     850:	13 98       	cbi	0x02, 3	; 2
     852:	13 9a       	sbi	0x02, 3	; 2
     854:	14 9a       	sbi	0x02, 4	; 2
     856:	84 ef       	ldi	r24, 0xF4	; 244
     858:	91 e0       	ldi	r25, 0x01	; 1
     85a:	2c e2       	ldi	r18, 0x2C	; 44
     85c:	31 e0       	ldi	r19, 0x01	; 1
     85e:	f9 01       	movw	r30, r18
     860:	31 97       	sbiw	r30, 0x01	; 1
     862:	f1 f7       	brne	.-4      	; 0x860 <_Z23init_display_controllerv+0x29a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     864:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     866:	d9 f7       	brne	.-10     	; 0x85e <_Z23init_display_controllerv+0x298>
	_delay_ms(50);
	BLC_hi();
     868:	11 9a       	sbi	0x02, 1	; 2
};
     86a:	08 95       	ret

0000086c <_Z8init_lcdv>:

void init_lcd()
{
	/* Disable JTAG in software, so that it does not interfere with Port C  */
	/* It will be re-enabled after a power cycle if the JTAGEN fuse is set. */
	MCUCR |= (1<<JTD);
     86c:	85 b7       	in	r24, 0x35	; 53
     86e:	80 68       	ori	r24, 0x80	; 128
     870:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<JTD);
     872:	85 b7       	in	r24, 0x35	; 53
     874:	80 68       	ori	r24, 0x80	; 128
     876:	85 bf       	out	0x35, r24	; 53
	
	/* Configure ports */
	CTRL_DDR = 0x7F;
     878:	8f e7       	ldi	r24, 0x7F	; 127
     87a:	81 b9       	out	0x01, r24	; 1
	DATA_DDR = 0xFF;
     87c:	8f ef       	ldi	r24, 0xFF	; 255
     87e:	87 b9       	out	0x07, r24	; 7
	
	init_display_controller();
     880:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z23init_display_controllerv>
}
     884:	08 95       	ret

00000886 <_Z15set_orientation11orientation>:

void set_orientation(orientation o)
     886:	9c 01       	movw	r18, r24
{
	display.orient = o;
     888:	90 93 d9 01 	sts	0x01D9, r25
     88c:	80 93 d8 01 	sts	0x01D8, r24
	write_cmd(MEMORY_ACCESS_CONTROL);
     890:	14 98       	cbi	0x02, 4	; 2
     892:	86 e3       	ldi	r24, 0x36	; 54
     894:	88 b9       	out	0x08, r24	; 8
     896:	13 98       	cbi	0x02, 3	; 2
     898:	13 9a       	sbi	0x02, 3	; 2
     89a:	14 9a       	sbi	0x02, 4	; 2
	if (o==North) { 
     89c:	21 15       	cp	r18, r1
     89e:	31 05       	cpc	r19, r1
     8a0:	71 f4       	brne	.+28     	; 0x8be <_Z15set_orientation11orientation+0x38>
		display.width = LCDWIDTH;
     8a2:	80 ef       	ldi	r24, 0xF0	; 240
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	90 93 d5 01 	sts	0x01D5, r25
     8aa:	80 93 d4 01 	sts	0x01D4, r24
		display.height = LCDHEIGHT;
     8ae:	80 e4       	ldi	r24, 0x40	; 64
     8b0:	91 e0       	ldi	r25, 0x01	; 1
     8b2:	90 93 d7 01 	sts	0x01D7, r25
     8b6:	80 93 d6 01 	sts	0x01D6, r24
		write_data(0x48);
     8ba:	88 e4       	ldi	r24, 0x48	; 72
     8bc:	32 c0       	rjmp	.+100    	; 0x922 <_Z15set_orientation11orientation+0x9c>
	}
	else if (o==West) {
     8be:	21 30       	cpi	r18, 0x01	; 1
     8c0:	31 05       	cpc	r19, r1
     8c2:	71 f4       	brne	.+28     	; 0x8e0 <_Z15set_orientation11orientation+0x5a>
		display.width = LCDHEIGHT;
     8c4:	80 e4       	ldi	r24, 0x40	; 64
     8c6:	91 e0       	ldi	r25, 0x01	; 1
     8c8:	90 93 d5 01 	sts	0x01D5, r25
     8cc:	80 93 d4 01 	sts	0x01D4, r24
		display.height = LCDWIDTH;
     8d0:	80 ef       	ldi	r24, 0xF0	; 240
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	90 93 d7 01 	sts	0x01D7, r25
     8d8:	80 93 d6 01 	sts	0x01D6, r24
		write_data(0xE8);
     8dc:	88 ee       	ldi	r24, 0xE8	; 232
     8de:	21 c0       	rjmp	.+66     	; 0x922 <_Z15set_orientation11orientation+0x9c>
	}
	else if (o==South) {
     8e0:	22 30       	cpi	r18, 0x02	; 2
     8e2:	31 05       	cpc	r19, r1
     8e4:	71 f4       	brne	.+28     	; 0x902 <_Z15set_orientation11orientation+0x7c>
		display.width = LCDWIDTH;
     8e6:	80 ef       	ldi	r24, 0xF0	; 240
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	90 93 d5 01 	sts	0x01D5, r25
     8ee:	80 93 d4 01 	sts	0x01D4, r24
		display.height = LCDHEIGHT;
     8f2:	80 e4       	ldi	r24, 0x40	; 64
     8f4:	91 e0       	ldi	r25, 0x01	; 1
     8f6:	90 93 d7 01 	sts	0x01D7, r25
     8fa:	80 93 d6 01 	sts	0x01D6, r24
		write_data(0x88);
     8fe:	88 e8       	ldi	r24, 0x88	; 136
     900:	10 c0       	rjmp	.+32     	; 0x922 <_Z15set_orientation11orientation+0x9c>
	}
	else if (o==East) {
     902:	23 30       	cpi	r18, 0x03	; 3
     904:	31 05       	cpc	r19, r1
     906:	81 f4       	brne	.+32     	; 0x928 <_Z15set_orientation11orientation+0xa2>
		display.width = LCDHEIGHT;
     908:	80 e4       	ldi	r24, 0x40	; 64
     90a:	91 e0       	ldi	r25, 0x01	; 1
     90c:	90 93 d5 01 	sts	0x01D5, r25
     910:	80 93 d4 01 	sts	0x01D4, r24
		display.height = LCDWIDTH;
     914:	80 ef       	ldi	r24, 0xF0	; 240
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	90 93 d7 01 	sts	0x01D7, r25
     91c:	80 93 d6 01 	sts	0x01D6, r24
		write_data(0x28);
     920:	88 e2       	ldi	r24, 0x28	; 40
     922:	88 b9       	out	0x08, r24	; 8
     924:	13 98       	cbi	0x02, 3	; 2
     926:	13 9a       	sbi	0x02, 3	; 2
	}
	write_cmd(COLUMN_ADDRESS_SET);
     928:	14 98       	cbi	0x02, 4	; 2
     92a:	8a e2       	ldi	r24, 0x2A	; 42
     92c:	88 b9       	out	0x08, r24	; 8
     92e:	13 98       	cbi	0x02, 3	; 2
     930:	13 9a       	sbi	0x02, 3	; 2
     932:	14 9a       	sbi	0x02, 4	; 2
	write_data16(0);
     934:	18 b8       	out	0x08, r1	; 8
     936:	13 98       	cbi	0x02, 3	; 2
     938:	13 9a       	sbi	0x02, 3	; 2
     93a:	18 b8       	out	0x08, r1	; 8
     93c:	13 98       	cbi	0x02, 3	; 2
     93e:	13 9a       	sbi	0x02, 3	; 2
	write_data16(display.width-1);
     940:	80 91 d4 01 	lds	r24, 0x01D4
     944:	90 91 d5 01 	lds	r25, 0x01D5
     948:	01 97       	sbiw	r24, 0x01	; 1
     94a:	98 b9       	out	0x08, r25	; 8
     94c:	01 96       	adiw	r24, 0x01	; 1
     94e:	13 98       	cbi	0x02, 3	; 2
     950:	13 9a       	sbi	0x02, 3	; 2
     952:	81 50       	subi	r24, 0x01	; 1
     954:	88 b9       	out	0x08, r24	; 8
     956:	13 98       	cbi	0x02, 3	; 2
     958:	13 9a       	sbi	0x02, 3	; 2
	write_cmd(PAGE_ADDRESS_SET);
     95a:	14 98       	cbi	0x02, 4	; 2
     95c:	8b e2       	ldi	r24, 0x2B	; 43
     95e:	88 b9       	out	0x08, r24	; 8
     960:	13 98       	cbi	0x02, 3	; 2
     962:	13 9a       	sbi	0x02, 3	; 2
     964:	14 9a       	sbi	0x02, 4	; 2
	write_data16(0);
     966:	18 b8       	out	0x08, r1	; 8
     968:	13 98       	cbi	0x02, 3	; 2
     96a:	13 9a       	sbi	0x02, 3	; 2
     96c:	18 b8       	out	0x08, r1	; 8
     96e:	13 98       	cbi	0x02, 3	; 2
     970:	13 9a       	sbi	0x02, 3	; 2
	write_data16(display.height-1);
     972:	80 91 d6 01 	lds	r24, 0x01D6
     976:	90 91 d7 01 	lds	r25, 0x01D7
     97a:	01 97       	sbiw	r24, 0x01	; 1
     97c:	98 b9       	out	0x08, r25	; 8
     97e:	01 96       	adiw	r24, 0x01	; 1
     980:	13 98       	cbi	0x02, 3	; 2
     982:	13 9a       	sbi	0x02, 3	; 2
     984:	81 50       	subi	r24, 0x01	; 1
     986:	88 b9       	out	0x08, r24	; 8
     988:	13 98       	cbi	0x02, 3	; 2
     98a:	13 9a       	sbi	0x02, 3	; 2
}
     98c:	08 95       	ret

0000098e <_Z14fill_rectangle9rectanglej>:

void fill_rectangle(rectangle r, uint16_t col)
     98e:	ef 92       	push	r14
     990:	ff 92       	push	r15
     992:	0f 93       	push	r16
     994:	1f 93       	push	r17
     996:	df 93       	push	r29
     998:	cf 93       	push	r28
     99a:	cd b7       	in	r28, 0x3d	; 61
     99c:	de b7       	in	r29, 0x3e	; 62
     99e:	28 97       	sbiw	r28, 0x08	; 8
     9a0:	0f b6       	in	r0, 0x3f	; 63
     9a2:	f8 94       	cli
     9a4:	de bf       	out	0x3e, r29	; 62
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	cd bf       	out	0x3d, r28	; 61
     9aa:	f2 2f       	mov	r31, r18
     9ac:	29 83       	std	Y+1, r18	; 0x01
     9ae:	e3 2f       	mov	r30, r19
     9b0:	3a 83       	std	Y+2, r19	; 0x02
     9b2:	4b 83       	std	Y+3, r20	; 0x03
     9b4:	5c 83       	std	Y+4, r21	; 0x04
     9b6:	36 2f       	mov	r19, r22
     9b8:	6d 83       	std	Y+5, r22	; 0x05
     9ba:	27 2f       	mov	r18, r23
     9bc:	7e 83       	std	Y+6, r23	; 0x06
     9be:	8f 83       	std	Y+7, r24	; 0x07
     9c0:	98 87       	std	Y+8, r25	; 0x08
     9c2:	78 01       	movw	r14, r16
     9c4:	ab 81       	ldd	r26, Y+3	; 0x03
     9c6:	bc 81       	ldd	r27, Y+4	; 0x04
     9c8:	06 2f       	mov	r16, r22
     9ca:	17 2f       	mov	r17, r23
     9cc:	6f 81       	ldd	r22, Y+7	; 0x07
     9ce:	78 85       	ldd	r23, Y+8	; 0x08
{
	uint16_t x, y;
	write_cmd(COLUMN_ADDRESS_SET);
     9d0:	14 98       	cbi	0x02, 4	; 2
     9d2:	8a e2       	ldi	r24, 0x2A	; 42
     9d4:	88 b9       	out	0x08, r24	; 8
     9d6:	13 98       	cbi	0x02, 3	; 2
     9d8:	13 9a       	sbi	0x02, 3	; 2
     9da:	14 9a       	sbi	0x02, 4	; 2
	write_data16(r.left);
     9dc:	e8 b9       	out	0x08, r30	; 8
     9de:	13 98       	cbi	0x02, 3	; 2
     9e0:	13 9a       	sbi	0x02, 3	; 2
     9e2:	f8 b9       	out	0x08, r31	; 8
     9e4:	13 98       	cbi	0x02, 3	; 2
     9e6:	13 9a       	sbi	0x02, 3	; 2
	write_data16(r.right);
     9e8:	b8 b9       	out	0x08, r27	; 8
     9ea:	13 98       	cbi	0x02, 3	; 2
     9ec:	13 9a       	sbi	0x02, 3	; 2
     9ee:	a8 b9       	out	0x08, r26	; 8
     9f0:	13 98       	cbi	0x02, 3	; 2
     9f2:	13 9a       	sbi	0x02, 3	; 2
	write_cmd(PAGE_ADDRESS_SET);
     9f4:	14 98       	cbi	0x02, 4	; 2
     9f6:	8b e2       	ldi	r24, 0x2B	; 43
     9f8:	88 b9       	out	0x08, r24	; 8
     9fa:	13 98       	cbi	0x02, 3	; 2
     9fc:	13 9a       	sbi	0x02, 3	; 2
     9fe:	14 9a       	sbi	0x02, 4	; 2
	write_data16(r.top);
     a00:	28 b9       	out	0x08, r18	; 8
     a02:	13 98       	cbi	0x02, 3	; 2
     a04:	13 9a       	sbi	0x02, 3	; 2
     a06:	38 b9       	out	0x08, r19	; 8
     a08:	13 98       	cbi	0x02, 3	; 2
     a0a:	13 9a       	sbi	0x02, 3	; 2
	write_data16(r.bottom);
     a0c:	78 b9       	out	0x08, r23	; 8
     a0e:	13 98       	cbi	0x02, 3	; 2
     a10:	13 9a       	sbi	0x02, 3	; 2
     a12:	68 b9       	out	0x08, r22	; 8
     a14:	13 98       	cbi	0x02, 3	; 2
     a16:	13 9a       	sbi	0x02, 3	; 2
	write_cmd(MEMORY_WRITE);
     a18:	14 98       	cbi	0x02, 4	; 2
     a1a:	8c e2       	ldi	r24, 0x2C	; 44
     a1c:	88 b9       	out	0x08, r24	; 8
     a1e:	13 98       	cbi	0x02, 3	; 2
     a20:	13 9a       	sbi	0x02, 3	; 2
     a22:	14 9a       	sbi	0x02, 4	; 2
	for(x=r.left; x<=r.right; x++)
		for(y=r.top; y<=r.bottom; y++)
			write_data16(col);
     a24:	2f 2f       	mov	r18, r31
     a26:	3e 2f       	mov	r19, r30
     a28:	c9 01       	movw	r24, r18
     a2a:	ac 01       	movw	r20, r24
     a2c:	0d c0       	rjmp	.+26     	; 0xa48 <_Z14fill_rectangle9rectanglej+0xba>
	write_data16(r.right);
	write_cmd(PAGE_ADDRESS_SET);
	write_data16(r.top);
	write_data16(r.bottom);
	write_cmd(MEMORY_WRITE);
	for(x=r.left; x<=r.right; x++)
     a2e:	f8 b8       	out	0x08, r15	; 8
		for(y=r.top; y<=r.bottom; y++)
			write_data16(col);
     a30:	13 98       	cbi	0x02, 3	; 2
     a32:	13 9a       	sbi	0x02, 3	; 2
     a34:	e8 b8       	out	0x08, r14	; 8
     a36:	13 98       	cbi	0x02, 3	; 2
     a38:	13 9a       	sbi	0x02, 3	; 2
	write_cmd(PAGE_ADDRESS_SET);
	write_data16(r.top);
	write_data16(r.bottom);
	write_cmd(MEMORY_WRITE);
	for(x=r.left; x<=r.right; x++)
		for(y=r.top; y<=r.bottom; y++)
     a3a:	2f 5f       	subi	r18, 0xFF	; 255
     a3c:	3f 4f       	sbci	r19, 0xFF	; 255
     a3e:	62 17       	cp	r22, r18
     a40:	73 07       	cpc	r23, r19
     a42:	a8 f7       	brcc	.-22     	; 0xa2e <_Z14fill_rectangle9rectanglej+0xa0>
	write_data16(r.right);
	write_cmd(PAGE_ADDRESS_SET);
	write_data16(r.top);
	write_data16(r.bottom);
	write_cmd(MEMORY_WRITE);
	for(x=r.left; x<=r.right; x++)
     a44:	4f 5f       	subi	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	a4 17       	cp	r26, r20
     a4a:	b5 07       	cpc	r27, r21
     a4c:	10 f0       	brcs	.+4      	; 0xa52 <_Z14fill_rectangle9rectanglej+0xc4>
     a4e:	98 01       	movw	r18, r16
     a50:	f6 cf       	rjmp	.-20     	; 0xa3e <_Z14fill_rectangle9rectanglej+0xb0>
		for(y=r.top; y<=r.bottom; y++)
			write_data16(col);
}
     a52:	28 96       	adiw	r28, 0x08	; 8
     a54:	0f b6       	in	r0, 0x3f	; 63
     a56:	f8 94       	cli
     a58:	de bf       	out	0x3e, r29	; 62
     a5a:	0f be       	out	0x3f, r0	; 63
     a5c:	cd bf       	out	0x3d, r28	; 61
     a5e:	cf 91       	pop	r28
     a60:	df 91       	pop	r29
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	ff 90       	pop	r15
     a68:	ef 90       	pop	r14
     a6a:	08 95       	ret

00000a6c <_Z22fill_rectangle_indexed9rectanglePj>:

void fill_rectangle_indexed(rectangle r, uint16_t* col)
     a6c:	ef 92       	push	r14
     a6e:	ff 92       	push	r15
     a70:	0f 93       	push	r16
     a72:	1f 93       	push	r17
     a74:	df 93       	push	r29
     a76:	cf 93       	push	r28
     a78:	cd b7       	in	r28, 0x3d	; 61
     a7a:	de b7       	in	r29, 0x3e	; 62
     a7c:	28 97       	sbiw	r28, 0x08	; 8
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	f8 94       	cli
     a82:	de bf       	out	0x3e, r29	; 62
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	cd bf       	out	0x3d, r28	; 61
     a88:	f2 2f       	mov	r31, r18
     a8a:	29 83       	std	Y+1, r18	; 0x01
     a8c:	e3 2f       	mov	r30, r19
     a8e:	3a 83       	std	Y+2, r19	; 0x02
     a90:	4b 83       	std	Y+3, r20	; 0x03
     a92:	5c 83       	std	Y+4, r21	; 0x04
     a94:	36 2f       	mov	r19, r22
     a96:	6d 83       	std	Y+5, r22	; 0x05
     a98:	27 2f       	mov	r18, r23
     a9a:	7e 83       	std	Y+6, r23	; 0x06
     a9c:	8f 83       	std	Y+7, r24	; 0x07
     a9e:	98 87       	std	Y+8, r25	; 0x08
     aa0:	d8 01       	movw	r26, r16
     aa2:	0b 81       	ldd	r16, Y+3	; 0x03
     aa4:	1c 81       	ldd	r17, Y+4	; 0x04
     aa6:	e6 2e       	mov	r14, r22
     aa8:	f7 2e       	mov	r15, r23
     aaa:	6f 81       	ldd	r22, Y+7	; 0x07
     aac:	78 85       	ldd	r23, Y+8	; 0x08
{
	uint16_t x, y;
	write_cmd(COLUMN_ADDRESS_SET);
     aae:	14 98       	cbi	0x02, 4	; 2
     ab0:	8a e2       	ldi	r24, 0x2A	; 42
     ab2:	88 b9       	out	0x08, r24	; 8
     ab4:	13 98       	cbi	0x02, 3	; 2
     ab6:	13 9a       	sbi	0x02, 3	; 2
     ab8:	14 9a       	sbi	0x02, 4	; 2
	write_data16(r.left);
     aba:	e8 b9       	out	0x08, r30	; 8
     abc:	13 98       	cbi	0x02, 3	; 2
     abe:	13 9a       	sbi	0x02, 3	; 2
     ac0:	f8 b9       	out	0x08, r31	; 8
     ac2:	13 98       	cbi	0x02, 3	; 2
     ac4:	13 9a       	sbi	0x02, 3	; 2
	write_data16(r.right);
     ac6:	18 b9       	out	0x08, r17	; 8
     ac8:	13 98       	cbi	0x02, 3	; 2
     aca:	13 9a       	sbi	0x02, 3	; 2
     acc:	08 b9       	out	0x08, r16	; 8
     ace:	13 98       	cbi	0x02, 3	; 2
     ad0:	13 9a       	sbi	0x02, 3	; 2
	write_cmd(PAGE_ADDRESS_SET);
     ad2:	14 98       	cbi	0x02, 4	; 2
     ad4:	8b e2       	ldi	r24, 0x2B	; 43
     ad6:	88 b9       	out	0x08, r24	; 8
     ad8:	13 98       	cbi	0x02, 3	; 2
     ada:	13 9a       	sbi	0x02, 3	; 2
     adc:	14 9a       	sbi	0x02, 4	; 2
	write_data16(r.top);
     ade:	28 b9       	out	0x08, r18	; 8
     ae0:	13 98       	cbi	0x02, 3	; 2
     ae2:	13 9a       	sbi	0x02, 3	; 2
     ae4:	38 b9       	out	0x08, r19	; 8
     ae6:	13 98       	cbi	0x02, 3	; 2
     ae8:	13 9a       	sbi	0x02, 3	; 2
	write_data16(r.bottom);
     aea:	78 b9       	out	0x08, r23	; 8
     aec:	13 98       	cbi	0x02, 3	; 2
     aee:	13 9a       	sbi	0x02, 3	; 2
     af0:	68 b9       	out	0x08, r22	; 8
     af2:	13 98       	cbi	0x02, 3	; 2
     af4:	13 9a       	sbi	0x02, 3	; 2
	write_cmd(MEMORY_WRITE);
     af6:	14 98       	cbi	0x02, 4	; 2
     af8:	8c e2       	ldi	r24, 0x2C	; 44
     afa:	88 b9       	out	0x08, r24	; 8
     afc:	13 98       	cbi	0x02, 3	; 2
     afe:	13 9a       	sbi	0x02, 3	; 2
     b00:	14 9a       	sbi	0x02, 4	; 2
     b02:	2f 2f       	mov	r18, r31
     b04:	3e 2f       	mov	r19, r30
     b06:	c9 01       	movw	r24, r18
     b08:	ac 01       	movw	r20, r24
     b0a:	14 c0       	rjmp	.+40     	; 0xb34 <_Z22fill_rectangle_indexed9rectanglePj+0xc8>
	for(x=r.left; x<=r.right; x++)
		for(y=r.top; y<=r.bottom; y++)
			write_data16(*col++);
     b0c:	11 96       	adiw	r26, 0x01	; 1
     b0e:	8c 91       	ld	r24, X
     b10:	11 97       	sbiw	r26, 0x01	; 1
     b12:	88 b9       	out	0x08, r24	; 8
     b14:	13 98       	cbi	0x02, 3	; 2
     b16:	13 9a       	sbi	0x02, 3	; 2
     b18:	12 96       	adiw	r26, 0x02	; 2
     b1a:	8c 91       	ld	r24, X
     b1c:	12 97       	sbiw	r26, 0x02	; 2
     b1e:	88 b9       	out	0x08, r24	; 8
	for(x=r.left; x<=r.right; x++)
		for(y=r.top; y<=r.bottom; y++)
			write_data16(col);
}

void fill_rectangle_indexed(rectangle r, uint16_t* col)
     b20:	14 96       	adiw	r26, 0x04	; 4
	write_data16(r.top);
	write_data16(r.bottom);
	write_cmd(MEMORY_WRITE);
	for(x=r.left; x<=r.right; x++)
		for(y=r.top; y<=r.bottom; y++)
			write_data16(*col++);
     b22:	13 98       	cbi	0x02, 3	; 2
     b24:	13 9a       	sbi	0x02, 3	; 2
	write_cmd(PAGE_ADDRESS_SET);
	write_data16(r.top);
	write_data16(r.bottom);
	write_cmd(MEMORY_WRITE);
	for(x=r.left; x<=r.right; x++)
		for(y=r.top; y<=r.bottom; y++)
     b26:	2f 5f       	subi	r18, 0xFF	; 255
     b28:	3f 4f       	sbci	r19, 0xFF	; 255
     b2a:	62 17       	cp	r22, r18
     b2c:	73 07       	cpc	r23, r19
     b2e:	70 f7       	brcc	.-36     	; 0xb0c <_Z22fill_rectangle_indexed9rectanglePj+0xa0>
	write_data16(r.right);
	write_cmd(PAGE_ADDRESS_SET);
	write_data16(r.top);
	write_data16(r.bottom);
	write_cmd(MEMORY_WRITE);
	for(x=r.left; x<=r.right; x++)
     b30:	4f 5f       	subi	r20, 0xFF	; 255
     b32:	5f 4f       	sbci	r21, 0xFF	; 255
     b34:	04 17       	cp	r16, r20
     b36:	15 07       	cpc	r17, r21
     b38:	10 f0       	brcs	.+4      	; 0xb3e <_Z22fill_rectangle_indexed9rectanglePj+0xd2>
     b3a:	97 01       	movw	r18, r14
     b3c:	f6 cf       	rjmp	.-20     	; 0xb2a <_Z22fill_rectangle_indexed9rectanglePj+0xbe>
		for(y=r.top; y<=r.bottom; y++)
			write_data16(*col++);
}
     b3e:	28 96       	adiw	r28, 0x08	; 8
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	cf 91       	pop	r28
     b4c:	df 91       	pop	r29
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	ff 90       	pop	r15
     b54:	ef 90       	pop	r14
     b56:	08 95       	ret

00000b58 <_Z12clear_screenv>:

void clear_screen()
     b58:	0f 93       	push	r16
     b5a:	1f 93       	push	r17
     b5c:	df 93       	push	r29
     b5e:	cf 93       	push	r28
     b60:	cd b7       	in	r28, 0x3d	; 61
     b62:	de b7       	in	r29, 0x3e	; 62
     b64:	28 97       	sbiw	r28, 0x08	; 8
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	f8 94       	cli
     b6a:	de bf       	out	0x3e, r29	; 62
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	cd bf       	out	0x3d, r28	; 61
{
	display.x = 0;
     b70:	10 92 db 01 	sts	0x01DB, r1
     b74:	10 92 da 01 	sts	0x01DA, r1
	display.y = 0;
     b78:	10 92 dd 01 	sts	0x01DD, r1
     b7c:	10 92 dc 01 	sts	0x01DC, r1
	rectangle r = {0, display.width-1, 0, display.height-1};
     b80:	fe 01       	movw	r30, r28
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	88 e0       	ldi	r24, 0x08	; 8
     b86:	df 01       	movw	r26, r30
     b88:	1d 92       	st	X+, r1
     b8a:	8a 95       	dec	r24
     b8c:	e9 f7       	brne	.-6      	; 0xb88 <_Z12clear_screenv+0x30>
     b8e:	80 91 d6 01 	lds	r24, 0x01D6
     b92:	90 91 d7 01 	lds	r25, 0x01D7
     b96:	01 97       	sbiw	r24, 0x01	; 1
	fill_rectangle(r, display.background);
     b98:	00 91 e0 01 	lds	r16, 0x01E0
     b9c:	10 91 e1 01 	lds	r17, 0x01E1
     ba0:	20 91 d4 01 	lds	r18, 0x01D4
     ba4:	30 91 d5 01 	lds	r19, 0x01D5
     ba8:	21 50       	subi	r18, 0x01	; 1
     baa:	30 40       	sbci	r19, 0x00	; 0
     bac:	42 2f       	mov	r20, r18
     bae:	3c 83       	std	Y+4, r19	; 0x04
     bb0:	2b 83       	std	Y+3, r18	; 0x03
     bb2:	98 87       	std	Y+8, r25	; 0x08
     bb4:	8f 83       	std	Y+7, r24	; 0x07
     bb6:	29 81       	ldd	r18, Y+1	; 0x01
     bb8:	3a 81       	ldd	r19, Y+2	; 0x02
     bba:	5c 81       	ldd	r21, Y+4	; 0x04
     bbc:	6d 81       	ldd	r22, Y+5	; 0x05
     bbe:	7e 81       	ldd	r23, Y+6	; 0x06
     bc0:	98 85       	ldd	r25, Y+8	; 0x08
     bc2:	0e 94 c7 04 	call	0x98e	; 0x98e <_Z14fill_rectangle9rectanglej>
}
     bc6:	28 96       	adiw	r28, 0x08	; 8
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	f8 94       	cli
     bcc:	de bf       	out	0x3e, r29	; 62
     bce:	0f be       	out	0x3f, r0	; 63
     bd0:	cd bf       	out	0x3d, r28	; 61
     bd2:	cf 91       	pop	r28
     bd4:	df 91       	pop	r29
     bd6:	1f 91       	pop	r17
     bd8:	0f 91       	pop	r16
     bda:	08 95       	ret

00000bdc <_Z12display_charc>:

void display_char(char c)
     bdc:	4f 92       	push	r4
     bde:	5f 92       	push	r5
     be0:	7f 92       	push	r7
     be2:	8f 92       	push	r8
     be4:	9f 92       	push	r9
     be6:	af 92       	push	r10
     be8:	bf 92       	push	r11
     bea:	cf 92       	push	r12
     bec:	df 92       	push	r13
     bee:	ef 92       	push	r14
     bf0:	ff 92       	push	r15
     bf2:	0f 93       	push	r16
     bf4:	1f 93       	push	r17
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	98 2f       	mov	r25, r24
{
	uint16_t x, y;
	PGM_P fdata; 
	uint8_t bits, mask;
	uint16_t sc=display.x, ec=display.x + 4, sp=display.y, ep=display.y + 7;
     bfc:	20 91 da 01 	lds	r18, 0x01DA
     c00:	30 91 db 01 	lds	r19, 0x01DB
     c04:	44 e0       	ldi	r20, 0x04	; 4
     c06:	c4 2e       	mov	r12, r20
     c08:	d1 2c       	mov	r13, r1
     c0a:	c2 0e       	add	r12, r18
     c0c:	d3 1e       	adc	r13, r19
     c0e:	40 90 dc 01 	lds	r4, 0x01DC
     c12:	50 90 dd 01 	lds	r5, 0x01DD
	if (c == 10)
     c16:	8a 30       	cpi	r24, 0x0A	; 10
     c18:	81 f4       	brne	.+32     	; 0xc3a <_Z12display_charc+0x5e>
	{
		display.x=0;
     c1a:	10 92 db 01 	sts	0x01DB, r1
     c1e:	10 92 da 01 	sts	0x01DA, r1
		display.y+=8; //Added /n to characters
     c22:	48 e0       	ldi	r20, 0x08	; 8
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	44 0e       	add	r4, r20
     c28:	55 1e       	adc	r5, r21
     c2a:	50 92 dd 01 	sts	0x01DD, r5
     c2e:	40 92 dc 01 	sts	0x01DC, r4
     c32:	e8 ef       	ldi	r30, 0xF8	; 248
     c34:	ff ef       	ldi	r31, 0xFF	; 255
     c36:	4e 0e       	add	r4, r30
     c38:	5f 1e       	adc	r5, r31
	}
	if (c < 32 || c > 126) return;
     c3a:	89 2f       	mov	r24, r25
     c3c:	80 52       	subi	r24, 0x20	; 32
     c3e:	8f 35       	cpi	r24, 0x5F	; 95
     c40:	08 f0       	brcs	.+2      	; 0xc44 <_Z12display_charc+0x68>
     c42:	ab c0       	rjmp	.+342    	; 0xd9a <_Z12display_charc+0x1be>
void display_char(char c)
{
	uint16_t x, y;
	PGM_P fdata; 
	uint8_t bits, mask;
	uint16_t sc=display.x, ec=display.x + 4, sp=display.y, ep=display.y + 7;
     c44:	82 01       	movw	r16, r4
     c46:	09 5f       	subi	r16, 0xF9	; 249
     c48:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		display.x=0;
		display.y+=8; //Added /n to characters
	}
	if (c < 32 || c > 126) return;
	fdata = (PGM_P)((c - ' ')*5 + font5x7);
     c4a:	85 e0       	ldi	r24, 0x05	; 5
     c4c:	98 02       	muls	r25, r24
     c4e:	e0 01       	movw	r28, r0
     c50:	11 24       	eor	r1, r1
     c52:	c4 52       	subi	r28, 0x24	; 36
     c54:	d0 40       	sbci	r29, 0x00	; 0
	write_cmd(PAGE_ADDRESS_SET);
     c56:	14 98       	cbi	0x02, 4	; 2
     c58:	8b e2       	ldi	r24, 0x2B	; 43
     c5a:	88 b9       	out	0x08, r24	; 8
     c5c:	13 98       	cbi	0x02, 3	; 2
     c5e:	13 9a       	sbi	0x02, 3	; 2
     c60:	14 9a       	sbi	0x02, 4	; 2
	write_data16(sp);
     c62:	58 b8       	out	0x08, r5	; 8
     c64:	13 98       	cbi	0x02, 3	; 2
     c66:	13 9a       	sbi	0x02, 3	; 2
     c68:	48 b8       	out	0x08, r4	; 8
     c6a:	13 98       	cbi	0x02, 3	; 2
     c6c:	13 9a       	sbi	0x02, 3	; 2
	write_data16(ep);
     c6e:	18 b9       	out	0x08, r17	; 8
     c70:	13 98       	cbi	0x02, 3	; 2
     c72:	13 9a       	sbi	0x02, 3	; 2
     c74:	08 b9       	out	0x08, r16	; 8
     c76:	13 98       	cbi	0x02, 3	; 2
     c78:	13 9a       	sbi	0x02, 3	; 2
		write_data16(x);
		write_data16(x);
		write_cmd(MEMORY_WRITE);
		bits = pgm_read_byte(fdata++);
		for(y=sp, mask=0x01; y<=ep; y++, mask<<=1)
			write_data16((bits & mask) ? display.foreground : display.background);
     c7a:	b0 90 de 01 	lds	r11, 0x01DE
     c7e:	b0 91 df 01 	lds	r27, 0x01DF
     c82:	90 90 e0 01 	lds	r9, 0x01E0
     c86:	a0 90 e1 01 	lds	r10, 0x01E1
     c8a:	a9 01       	movw	r20, r18
	fdata = (PGM_P)((c - ' ')*5 + font5x7);
	write_cmd(PAGE_ADDRESS_SET);
	write_data16(sp);
	write_data16(ep);
	for(x=sc; x<=ec; x++) {
		write_cmd(COLUMN_ADDRESS_SET);
     c8c:	9a e2       	ldi	r25, 0x2A	; 42
     c8e:	79 2e       	mov	r7, r25
		write_data16(x);
		write_data16(x);
		write_cmd(MEMORY_WRITE);
     c90:	8c e2       	ldi	r24, 0x2C	; 44
     c92:	88 2e       	mov	r8, r24
     c94:	3b c0       	rjmp	.+118    	; 0xd0c <_Z12display_charc+0x130>
	fdata = (PGM_P)((c - ' ')*5 + font5x7);
	write_cmd(PAGE_ADDRESS_SET);
	write_data16(sp);
	write_data16(ep);
	for(x=sc; x<=ec; x++) {
		write_cmd(COLUMN_ADDRESS_SET);
     c96:	14 98       	cbi	0x02, 4	; 2
     c98:	78 b8       	out	0x08, r7	; 8
     c9a:	13 98       	cbi	0x02, 3	; 2
     c9c:	13 9a       	sbi	0x02, 3	; 2
     c9e:	14 9a       	sbi	0x02, 4	; 2
		write_data16(x);
     ca0:	58 b9       	out	0x08, r21	; 8
     ca2:	13 98       	cbi	0x02, 3	; 2
     ca4:	13 9a       	sbi	0x02, 3	; 2
     ca6:	48 b9       	out	0x08, r20	; 8
     ca8:	13 98       	cbi	0x02, 3	; 2
     caa:	13 9a       	sbi	0x02, 3	; 2
		write_data16(x);
     cac:	58 b9       	out	0x08, r21	; 8
     cae:	13 98       	cbi	0x02, 3	; 2
     cb0:	13 9a       	sbi	0x02, 3	; 2
     cb2:	48 b9       	out	0x08, r20	; 8
     cb4:	13 98       	cbi	0x02, 3	; 2
     cb6:	13 9a       	sbi	0x02, 3	; 2
		write_cmd(MEMORY_WRITE);
     cb8:	14 98       	cbi	0x02, 4	; 2
     cba:	88 b8       	out	0x08, r8	; 8
     cbc:	13 98       	cbi	0x02, 3	; 2
     cbe:	13 9a       	sbi	0x02, 3	; 2
     cc0:	14 9a       	sbi	0x02, 4	; 2
		bits = pgm_read_byte(fdata++);
     cc2:	fe 01       	movw	r30, r28
     cc4:	84 91       	lpm	r24, Z+
     cc6:	b2 01       	movw	r22, r4
     cc8:	a1 e0       	ldi	r26, 0x01	; 1
		for(y=sp, mask=0x01; y<=ep; y++, mask<<=1)
			write_data16((bits & mask) ? display.foreground : display.background);
     cca:	e8 2e       	mov	r14, r24
     ccc:	ff 24       	eor	r15, r15
     cce:	18 c0       	rjmp	.+48     	; 0xd00 <_Z12display_charc+0x124>
     cd0:	2a 2f       	mov	r18, r26
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	2e 21       	and	r18, r14
     cd6:	3f 21       	and	r19, r15
     cd8:	21 15       	cp	r18, r1
     cda:	31 05       	cpc	r19, r1
     cdc:	11 f4       	brne	.+4      	; 0xce2 <_Z12display_charc+0x106>
     cde:	9a 2d       	mov	r25, r10
     ce0:	01 c0       	rjmp	.+2      	; 0xce4 <_Z12display_charc+0x108>
     ce2:	9b 2f       	mov	r25, r27
     ce4:	98 b9       	out	0x08, r25	; 8
     ce6:	13 98       	cbi	0x02, 3	; 2
     ce8:	13 9a       	sbi	0x02, 3	; 2
     cea:	23 2b       	or	r18, r19
     cec:	11 f4       	brne	.+4      	; 0xcf2 <_Z12display_charc+0x116>
     cee:	99 2d       	mov	r25, r9
     cf0:	01 c0       	rjmp	.+2      	; 0xcf4 <_Z12display_charc+0x118>
     cf2:	9b 2d       	mov	r25, r11
     cf4:	98 b9       	out	0x08, r25	; 8
     cf6:	13 98       	cbi	0x02, 3	; 2
     cf8:	13 9a       	sbi	0x02, 3	; 2
		write_cmd(COLUMN_ADDRESS_SET);
		write_data16(x);
		write_data16(x);
		write_cmd(MEMORY_WRITE);
		bits = pgm_read_byte(fdata++);
		for(y=sp, mask=0x01; y<=ep; y++, mask<<=1)
     cfa:	6f 5f       	subi	r22, 0xFF	; 255
     cfc:	7f 4f       	sbci	r23, 0xFF	; 255
     cfe:	aa 0f       	add	r26, r26
     d00:	06 17       	cp	r16, r22
     d02:	17 07       	cpc	r17, r23
     d04:	28 f7       	brcc	.-54     	; 0xcd0 <_Z12display_charc+0xf4>
	for(x=sc; x<=ec; x++) {
		write_cmd(COLUMN_ADDRESS_SET);
		write_data16(x);
		write_data16(x);
		write_cmd(MEMORY_WRITE);
		bits = pgm_read_byte(fdata++);
     d06:	21 96       	adiw	r28, 0x01	; 1
	if (c < 32 || c > 126) return;
	fdata = (PGM_P)((c - ' ')*5 + font5x7);
	write_cmd(PAGE_ADDRESS_SET);
	write_data16(sp);
	write_data16(ep);
	for(x=sc; x<=ec; x++) {
     d08:	4f 5f       	subi	r20, 0xFF	; 255
     d0a:	5f 4f       	sbci	r21, 0xFF	; 255
     d0c:	c4 16       	cp	r12, r20
     d0e:	d5 06       	cpc	r13, r21
     d10:	08 f0       	brcs	.+2      	; 0xd14 <_Z12display_charc+0x138>
     d12:	c1 cf       	rjmp	.-126    	; 0xc96 <_Z12display_charc+0xba>
		write_cmd(MEMORY_WRITE);
		bits = pgm_read_byte(fdata++);
		for(y=sp, mask=0x01; y<=ep; y++, mask<<=1)
			write_data16((bits & mask) ? display.foreground : display.background);
	}
	write_cmd(COLUMN_ADDRESS_SET);
     d14:	14 98       	cbi	0x02, 4	; 2
     d16:	8a e2       	ldi	r24, 0x2A	; 42
     d18:	88 b9       	out	0x08, r24	; 8
     d1a:	13 98       	cbi	0x02, 3	; 2
     d1c:	13 9a       	sbi	0x02, 3	; 2
     d1e:	14 9a       	sbi	0x02, 4	; 2
	write_data16(x);
     d20:	58 b9       	out	0x08, r21	; 8
     d22:	13 98       	cbi	0x02, 3	; 2
     d24:	13 9a       	sbi	0x02, 3	; 2
     d26:	48 b9       	out	0x08, r20	; 8
     d28:	13 98       	cbi	0x02, 3	; 2
     d2a:	13 9a       	sbi	0x02, 3	; 2
	write_data16(x);
     d2c:	58 b9       	out	0x08, r21	; 8
     d2e:	13 98       	cbi	0x02, 3	; 2
     d30:	13 9a       	sbi	0x02, 3	; 2
     d32:	48 b9       	out	0x08, r20	; 8
     d34:	13 98       	cbi	0x02, 3	; 2
     d36:	13 9a       	sbi	0x02, 3	; 2
	write_cmd(MEMORY_WRITE);
     d38:	14 98       	cbi	0x02, 4	; 2
     d3a:	8c e2       	ldi	r24, 0x2C	; 44
     d3c:	88 b9       	out	0x08, r24	; 8
     d3e:	13 98       	cbi	0x02, 3	; 2
     d40:	13 9a       	sbi	0x02, 3	; 2
     d42:	14 9a       	sbi	0x02, 4	; 2
     d44:	c2 01       	movw	r24, r4
     d46:	07 c0       	rjmp	.+14     	; 0xd56 <_Z12display_charc+0x17a>
	for(y=sp; y<=ep; y++)
		write_data16(display.background);
     d48:	a8 b8       	out	0x08, r10	; 8
     d4a:	13 98       	cbi	0x02, 3	; 2
     d4c:	13 9a       	sbi	0x02, 3	; 2
     d4e:	98 b8       	out	0x08, r9	; 8
     d50:	13 98       	cbi	0x02, 3	; 2
     d52:	13 9a       	sbi	0x02, 3	; 2
	}
	write_cmd(COLUMN_ADDRESS_SET);
	write_data16(x);
	write_data16(x);
	write_cmd(MEMORY_WRITE);
	for(y=sp; y<=ep; y++)
     d54:	01 96       	adiw	r24, 0x01	; 1
     d56:	08 17       	cp	r16, r24
     d58:	19 07       	cpc	r17, r25
     d5a:	b0 f7       	brcc	.-20     	; 0xd48 <_Z12display_charc+0x16c>
		write_data16(display.background);

	display.x += 6;
     d5c:	20 91 da 01 	lds	r18, 0x01DA
     d60:	30 91 db 01 	lds	r19, 0x01DB
     d64:	2a 5f       	subi	r18, 0xFA	; 250
     d66:	3f 4f       	sbci	r19, 0xFF	; 255
     d68:	30 93 db 01 	sts	0x01DB, r19
     d6c:	20 93 da 01 	sts	0x01DA, r18
	if (display.x > display.width-6) { display.x=0; display.y+=8; }
     d70:	80 91 d4 01 	lds	r24, 0x01D4
     d74:	90 91 d5 01 	lds	r25, 0x01D5
     d78:	06 97       	sbiw	r24, 0x06	; 6
     d7a:	82 17       	cp	r24, r18
     d7c:	93 07       	cpc	r25, r19
     d7e:	68 f4       	brcc	.+26     	; 0xd9a <_Z12display_charc+0x1be>
     d80:	10 92 db 01 	sts	0x01DB, r1
     d84:	10 92 da 01 	sts	0x01DA, r1
     d88:	80 91 dc 01 	lds	r24, 0x01DC
     d8c:	90 91 dd 01 	lds	r25, 0x01DD
     d90:	08 96       	adiw	r24, 0x08	; 8
     d92:	90 93 dd 01 	sts	0x01DD, r25
     d96:	80 93 dc 01 	sts	0x01DC, r24
}
     d9a:	df 91       	pop	r29
     d9c:	cf 91       	pop	r28
     d9e:	1f 91       	pop	r17
     da0:	0f 91       	pop	r16
     da2:	ff 90       	pop	r15
     da4:	ef 90       	pop	r14
     da6:	df 90       	pop	r13
     da8:	cf 90       	pop	r12
     daa:	bf 90       	pop	r11
     dac:	af 90       	pop	r10
     dae:	9f 90       	pop	r9
     db0:	8f 90       	pop	r8
     db2:	7f 90       	pop	r7
     db4:	5f 90       	pop	r5
     db6:	4f 90       	pop	r4
     db8:	08 95       	ret

00000dba <_Z14display_stringPc>:

void display_string(char *str)
     dba:	1f 93       	push	r17
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	ec 01       	movw	r28, r24
     dc2:	10 e0       	ldi	r17, 0x00	; 0
     dc4:	03 c0       	rjmp	.+6      	; 0xdcc <_Z14display_stringPc+0x12>
{
	uint8_t i;
	for(i=0; str[i]; i++) 
		display_char(str[i]);
     dc6:	0e 94 ee 05 	call	0xbdc	; 0xbdc <_Z12display_charc>
}

void display_string(char *str)
{
	uint8_t i;
	for(i=0; str[i]; i++) 
     dca:	1f 5f       	subi	r17, 0xFF	; 255
     dcc:	fe 01       	movw	r30, r28
     dce:	e1 0f       	add	r30, r17
     dd0:	f1 1d       	adc	r31, r1
     dd2:	80 81       	ld	r24, Z
     dd4:	88 23       	and	r24, r24
     dd6:	b9 f7       	brne	.-18     	; 0xdc6 <_Z14display_stringPc+0xc>
		display_char(str[i]);
}
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	08 95       	ret

00000de0 <_Z15display_nstringPchh>:

void display_nstring(char *str, uint8_t start, uint8_t n) //Displays n characters in the string from start point called 'start'
     de0:	ef 92       	push	r14
     de2:	ff 92       	push	r15
     de4:	1f 93       	push	r17
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	7c 01       	movw	r14, r24
     dec:	16 2f       	mov	r17, r22
{
	uint8_t i;
	for(i=start; i<(start+n); i++) 
     dee:	c6 2f       	mov	r28, r22
     df0:	d0 e0       	ldi	r29, 0x00	; 0
     df2:	c4 0f       	add	r28, r20
     df4:	d1 1d       	adc	r29, r1
     df6:	06 c0       	rjmp	.+12     	; 0xe04 <_Z15display_nstringPchh+0x24>
		display_char(str[i]);
     df8:	ee 0d       	add	r30, r14
     dfa:	ff 1d       	adc	r31, r15
     dfc:	80 81       	ld	r24, Z
     dfe:	0e 94 ee 05 	call	0xbdc	; 0xbdc <_Z12display_charc>
}

void display_nstring(char *str, uint8_t start, uint8_t n) //Displays n characters in the string from start point called 'start'
{
	uint8_t i;
	for(i=start; i<(start+n); i++) 
     e02:	1f 5f       	subi	r17, 0xFF	; 255
     e04:	e1 2f       	mov	r30, r17
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	ec 17       	cp	r30, r28
     e0a:	fd 07       	cpc	r31, r29
     e0c:	ac f3       	brlt	.-22     	; 0xdf8 <_Z15display_nstringPchh+0x18>
		display_char(str[i]);
}
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	1f 91       	pop	r17
     e14:	ff 90       	pop	r15
     e16:	ef 90       	pop	r14
     e18:	08 95       	ret

00000e1a <_Z14display_binaryh>:
	}
	display_string("0x");
	display_nstring(hexchars, 0, bytes*2);
}

void display_binary(uint8_t byte) //Displys a byte in binary
     e1a:	df 93       	push	r29
     e1c:	cf 93       	push	r28
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
     e22:	28 97       	sbiw	r28, 0x08	; 8
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	f8 94       	cli
     e28:	de bf       	out	0x3e, r29	; 62
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	cd bf       	out	0x3d, r28	; 61
     e2e:	fe 01       	movw	r30, r28
     e30:	31 96       	adiw	r30, 0x01	; 1
     e32:	27 e0       	ldi	r18, 0x07	; 7
     e34:	30 e0       	ldi	r19, 0x00	; 0
{
	char binchars[8];
	for (int i = 7; i >= 0; i--)
	{
		if (byte & (1 << i))
     e36:	48 2f       	mov	r20, r24
     e38:	50 e0       	ldi	r21, 0x00	; 0
			binchars[7-i]='1';
		else
			binchars[7-i]='0'; 
     e3a:	70 e3       	ldi	r23, 0x30	; 48
{
	char binchars[8];
	for (int i = 7; i >= 0; i--)
	{
		if (byte & (1 << i))
			binchars[7-i]='1';
     e3c:	61 e3       	ldi	r22, 0x31	; 49
void display_binary(uint8_t byte) //Displys a byte in binary
{
	char binchars[8];
	for (int i = 7; i >= 0; i--)
	{
		if (byte & (1 << i))
     e3e:	ca 01       	movw	r24, r20
     e40:	02 2e       	mov	r0, r18
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <_Z14display_binaryh+0x2e>
     e44:	95 95       	asr	r25
     e46:	87 95       	ror	r24
     e48:	0a 94       	dec	r0
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <_Z14display_binaryh+0x2a>
     e4c:	80 ff       	sbrs	r24, 0
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <_Z14display_binaryh+0x3a>
			binchars[7-i]='1';
     e50:	60 83       	st	Z, r22
     e52:	01 c0       	rjmp	.+2      	; 0xe56 <_Z14display_binaryh+0x3c>
		else
			binchars[7-i]='0'; 
     e54:	70 83       	st	Z, r23
}

void display_binary(uint8_t byte) //Displys a byte in binary
{
	char binchars[8];
	for (int i = 7; i >= 0; i--)
     e56:	21 50       	subi	r18, 0x01	; 1
     e58:	30 40       	sbci	r19, 0x00	; 0
     e5a:	31 96       	adiw	r30, 0x01	; 1
     e5c:	8f ef       	ldi	r24, 0xFF	; 255
     e5e:	2f 3f       	cpi	r18, 0xFF	; 255
     e60:	38 07       	cpc	r19, r24
     e62:	69 f7       	brne	.-38     	; 0xe3e <_Z14display_binaryh+0x24>
		if (byte & (1 << i))
			binchars[7-i]='1';
		else
			binchars[7-i]='0'; 
	}
    display_string("0b");
     e64:	8c e3       	ldi	r24, 0x3C	; 60
     e66:	91 e0       	ldi	r25, 0x01	; 1
     e68:	0e 94 dd 06 	call	0xdba	; 0xdba <_Z14display_stringPc>
    display_nstring(binchars, 0, 8);
     e6c:	ce 01       	movw	r24, r28
     e6e:	01 96       	adiw	r24, 0x01	; 1
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	48 e0       	ldi	r20, 0x08	; 8
     e74:	0e 94 f0 06 	call	0xde0	; 0xde0 <_Z15display_nstringPchh>
     e78:	28 96       	adiw	r28, 0x08	; 8
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	f8 94       	cli
     e7e:	de bf       	out	0x3e, r29	; 62
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	cd bf       	out	0x3d, r28	; 61
     e84:	cf 91       	pop	r28
     e86:	df 91       	pop	r29
     e88:	08 95       	ret

00000e8a <_Z7setdataPA13_5framePc>:
            // display_string(temp);
        }
    }
}

void setdata(struct frame (*vals)[FRAMECOUNT], char* Spacket) {
     e8a:	af 92       	push	r10
     e8c:	bf 92       	push	r11
     e8e:	cf 92       	push	r12
     e90:	df 92       	push	r13
     e92:	ef 92       	push	r14
     e94:	ff 92       	push	r15
     e96:	0f 93       	push	r16
     e98:	1f 93       	push	r17
     e9a:	cf 93       	push	r28
     e9c:	df 93       	push	r29
     e9e:	ec 01       	movw	r28, r24
     ea0:	5b 01       	movw	r10, r22
     ea2:	7c 01       	movw	r14, r24
     ea4:	00 e0       	ldi	r16, 0x00	; 0
     ea6:	10 e0       	ldi	r17, 0x00	; 0
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	90 e0       	ldi	r25, 0x00	; 0
    for(i = 0; i < FRAMECOUNT-1; i++) {
        // int loop = DATALEN;
        //
        for(j = 0; j < DATALEN; j++) {
            if(i ==0 && j == 0) {
                (*vals)[i].data[j++] = START;
     eac:	75 e3       	ldi	r23, 0x35	; 53
                //display_char((*vals)[i].data[j]);
                end = 1;
                j++;
                break;
            }
            (*vals)[i].data[j] = Spacket[cnt++];
     eae:	58 e3       	ldi	r21, 0x38	; 56
     eb0:	c5 2e       	mov	r12, r21
     eb2:	d1 2c       	mov	r13, r1
     eb4:	41 c0       	rjmp	.+130    	; 0xf38 <_Z7setdataPA13_5framePc+0xae>
    //char temp[DATALEN];
    for(i = 0; i < FRAMECOUNT-1; i++) {
        // int loop = DATALEN;
        //
        for(j = 0; j < DATALEN; j++) {
            if(i ==0 && j == 0) {
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	29 f4       	brne	.+10     	; 0xec4 <_Z7setdataPA13_5framePc+0x3a>
     eba:	10 97       	sbiw	r26, 0x00	; 0
     ebc:	19 f4       	brne	.+6      	; 0xec4 <_Z7setdataPA13_5framePc+0x3a>
                (*vals)[i].data[j++] = START;
     ebe:	7a 87       	std	Y+10, r23	; 0x0a
     ec0:	a1 e0       	ldi	r26, 0x01	; 1
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
                //loop--;
            }
            if(Spacket[cnt] == '\0') {
     ec4:	60 81       	ld	r22, Z
     ec6:	9d 01       	movw	r18, r26
     ec8:	2f 5f       	subi	r18, 0xFF	; 255
     eca:	3f 4f       	sbci	r19, 0xFF	; 255
     ecc:	66 23       	and	r22, r22
     ece:	79 f4       	brne	.+30     	; 0xeee <_Z7setdataPA13_5framePc+0x64>
                (*vals)[i].data[j] = END;
     ed0:	8c 9d       	mul	r24, r12
     ed2:	f0 01       	movw	r30, r0
     ed4:	8d 9d       	mul	r24, r13
     ed6:	f0 0d       	add	r31, r0
     ed8:	9c 9d       	mul	r25, r12
     eda:	f0 0d       	add	r31, r0
     edc:	11 24       	eor	r1, r1
     ede:	ec 0f       	add	r30, r28
     ee0:	fd 1f       	adc	r31, r29
     ee2:	ea 0f       	add	r30, r26
     ee4:	fb 1f       	adc	r31, r27
     ee6:	72 87       	std	Z+10, r23	; 0x0a
                //display_char((*vals)[i].data[j]);
                end = 1;
                j++;
     ee8:	41 e0       	ldi	r20, 0x01	; 1
     eea:	50 e0       	ldi	r21, 0x00	; 0
     eec:	0d c0       	rjmp	.+26     	; 0xf08 <_Z7setdataPA13_5framePc+0x7e>
                break;
            }
            (*vals)[i].data[j] = Spacket[cnt++];
     eee:	a4 0f       	add	r26, r20
     ef0:	b5 1f       	adc	r27, r21
     ef2:	1a 96       	adiw	r26, 0x0a	; 10
     ef4:	6c 93       	st	X, r22
     ef6:	0f 5f       	subi	r16, 0xFF	; 255
     ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    end = 0;
    //char temp[DATALEN];
    for(i = 0; i < FRAMECOUNT-1; i++) {
        // int loop = DATALEN;
        //
        for(j = 0; j < DATALEN; j++) {
     efa:	d9 01       	movw	r26, r18
     efc:	31 96       	adiw	r30, 0x01	; 1
     efe:	2a 30       	cpi	r18, 0x0A	; 10
     f00:	31 05       	cpc	r19, r1
     f02:	cc f2       	brlt	.-78     	; 0xeb6 <_Z7setdataPA13_5framePc+0x2c>
     f04:	40 e0       	ldi	r20, 0x00	; 0
     f06:	50 e0       	ldi	r21, 0x00	; 0
            }
            (*vals)[i].data[j] = Spacket[cnt++];
            //display_char((*vals)[i].data[j]);
        }
        // display_number(j);
        (*vals)[i].length[0] = j;
     f08:	f7 01       	movw	r30, r14
     f0a:	20 87       	std	Z+8, r18	; 0x08
        (*vals)[i].data[j] = '\0';
     f0c:	8c 9d       	mul	r24, r12
     f0e:	f0 01       	movw	r30, r0
     f10:	8d 9d       	mul	r24, r13
     f12:	f0 0d       	add	r31, r0
     f14:	9c 9d       	mul	r25, r12
     f16:	f0 0d       	add	r31, r0
     f18:	11 24       	eor	r1, r1
     f1a:	ec 0f       	add	r30, r28
     f1c:	fd 1f       	adc	r31, r29
     f1e:	e2 0f       	add	r30, r18
     f20:	f3 1f       	adc	r31, r19
     f22:	12 86       	std	Z+10, r1	; 0x0a
        if(end) {
     f24:	45 2b       	or	r20, r21
     f26:	b9 f4       	brne	.+46     	; 0xf56 <_Z7setdataPA13_5framePc+0xcc>
    //display_number(strlen(Spacket));
    int cnt = 0;
    int i, j, end;
    end = 0;
    //char temp[DATALEN];
    for(i = 0; i < FRAMECOUNT-1; i++) {
     f28:	01 96       	adiw	r24, 0x01	; 1
     f2a:	28 e3       	ldi	r18, 0x38	; 56
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	e2 0e       	add	r14, r18
     f30:	f3 1e       	adc	r15, r19
     f32:	8c 30       	cpi	r24, 0x0C	; 12
     f34:	91 05       	cpc	r25, r1
     f36:	79 f0       	breq	.+30     	; 0xf56 <_Z7setdataPA13_5framePc+0xcc>
     f38:	f5 01       	movw	r30, r10
     f3a:	e0 0f       	add	r30, r16
     f3c:	f1 1f       	adc	r31, r17
     f3e:	a0 e0       	ldi	r26, 0x00	; 0
     f40:	b0 e0       	ldi	r27, 0x00	; 0
                //display_char((*vals)[i].data[j]);
                end = 1;
                j++;
                break;
            }
            (*vals)[i].data[j] = Spacket[cnt++];
     f42:	8c 9d       	mul	r24, r12
     f44:	a0 01       	movw	r20, r0
     f46:	8d 9d       	mul	r24, r13
     f48:	50 0d       	add	r21, r0
     f4a:	9c 9d       	mul	r25, r12
     f4c:	50 0d       	add	r21, r0
     f4e:	11 24       	eor	r1, r1
     f50:	4c 0f       	add	r20, r28
     f52:	5d 1f       	adc	r21, r29
     f54:	b0 cf       	rjmp	.-160    	; 0xeb6 <_Z7setdataPA13_5framePc+0x2c>
            break;
        }
        //display_string((*vals)[i].data);
        //display_char('\n');
    }
}
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	1f 91       	pop	r17
     f5c:	0f 91       	pop	r16
     f5e:	ff 90       	pop	r15
     f60:	ef 90       	pop	r14
     f62:	df 90       	pop	r13
     f64:	cf 90       	pop	r12
     f66:	bf 90       	pop	r11
     f68:	af 90       	pop	r10
     f6a:	08 95       	ret

00000f6c <_Z9setheaderPA13_5frame>:

void setheader(struct frame (*vals)[FRAMECOUNT]) {
     f6c:	fc 01       	movw	r30, r24
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	90 e0       	ldi	r25, 0x00	; 0
    int i;
    for(i = 0; i < FRAMECOUNT; i++) {
        (*vals)[i].header[0] = HEADER;
     f72:	23 e7       	ldi	r18, 0x73	; 115
     f74:	20 83       	st	Z, r18
        (*vals)[i].header[1] = '\0';
     f76:	11 82       	std	Z+1, r1	; 0x01
    }
}

void setheader(struct frame (*vals)[FRAMECOUNT]) {
    int i;
    for(i = 0; i < FRAMECOUNT; i++) {
     f78:	01 96       	adiw	r24, 0x01	; 1
     f7a:	f8 96       	adiw	r30, 0x38	; 56
     f7c:	8d 30       	cpi	r24, 0x0D	; 13
     f7e:	91 05       	cpc	r25, r1
     f80:	c9 f7       	brne	.-14     	; 0xf74 <_Z9setheaderPA13_5frame+0x8>
        (*vals)[i].header[0] = HEADER;
        (*vals)[i].header[1] = '\0';
        //display_char((*vals)[i].header[0]);
    }
}
     f82:	08 95       	ret

00000f84 <_Z9setfooterPA13_5frame>:

void setfooter(struct frame (*vals)[FRAMECOUNT]) {
     f84:	fc 01       	movw	r30, r24
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	90 e0       	ldi	r25, 0x00	; 0
    int i;
    for(i = 0; i < FRAMECOUNT; i++) {
        (*vals)[i].footer[0] = FOOTER;
     f8a:	22 e7       	ldi	r18, 0x72	; 114
     f8c:	20 8f       	std	Z+24, r18	; 0x18
        (*vals)[i].footer[1] = '\0';        
     f8e:	11 8e       	std	Z+25, r1	; 0x19
    }
}

void setfooter(struct frame (*vals)[FRAMECOUNT]) {
    int i;
    for(i = 0; i < FRAMECOUNT; i++) {
     f90:	01 96       	adiw	r24, 0x01	; 1
     f92:	f8 96       	adiw	r30, 0x38	; 56
     f94:	8d 30       	cpi	r24, 0x0D	; 13
     f96:	91 05       	cpc	r25, r1
     f98:	c9 f7       	brne	.-14     	; 0xf8c <_Z9setfooterPA13_5frame+0x8>
        (*vals)[i].footer[0] = FOOTER;
        (*vals)[i].footer[1] = '\0';        
        //display_char((*vals)[i].footer[0]);
    }
}
     f9a:	08 95       	ret

00000f9c <_Z8dataInitPA13_5frame>:

void dataInit(struct frame (*vals)[FRAMECOUNT]) {
     f9c:	fc 01       	movw	r30, r24
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	90 e0       	ldi	r25, 0x00	; 0
    int i;
    for(i = 0; i < FRAMECOUNT; i++) {
        (*vals)[i].length[0] = 0;
     fa2:	10 86       	std	Z+8, r1	; 0x08
        (*vals)[i].length[1] = '\0';
     fa4:	11 86       	std	Z+9, r1	; 0x09
        (*vals)[i].header[1] = '\0';
     fa6:	11 82       	std	Z+1, r1	; 0x01
        (*vals)[i].footer[1] = '\0';
     fa8:	11 8e       	std	Z+25, r1	; 0x19
    }
}

void dataInit(struct frame (*vals)[FRAMECOUNT]) {
    int i;
    for(i = 0; i < FRAMECOUNT; i++) {
     faa:	01 96       	adiw	r24, 0x01	; 1
     fac:	f8 96       	adiw	r30, 0x38	; 56
     fae:	8d 30       	cpi	r24, 0x0D	; 13
     fb0:	91 05       	cpc	r25, r1
     fb2:	b9 f7       	brne	.-18     	; 0xfa2 <_Z8dataInitPA13_5frame+0x6>
        (*vals)[i].length[0] = 0;
        (*vals)[i].length[1] = '\0';
        (*vals)[i].header[1] = '\0';
        (*vals)[i].footer[1] = '\0';
    }    
}
     fb4:	08 95       	ret

00000fb6 <_Z10setaddressPA13_5framec>:

void setaddress(struct frame (*vals)[FRAMECOUNT], char address) {
     fb6:	fc 01       	movw	r30, r24
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
    int i;
    int j;
    for(i = 0; i < FRAMECOUNT; i++) {
        if((*vals)[i].length[0]) {
            (*vals)[i].address[0] = THISDEVICE;
     fbc:	94 e7       	ldi	r25, 0x74	; 116

void setaddress(struct frame (*vals)[FRAMECOUNT], char address) {
    int i;
    int j;
    for(i = 0; i < FRAMECOUNT; i++) {
        if((*vals)[i].length[0]) {
     fbe:	80 85       	ldd	r24, Z+8	; 0x08
     fc0:	88 23       	and	r24, r24
     fc2:	19 f0       	breq	.+6      	; 0xfca <_Z10setaddressPA13_5framec+0x14>
            (*vals)[i].address[0] = THISDEVICE;
     fc4:	95 83       	std	Z+5, r25	; 0x05
            (*vals)[i].address[1] = address;
     fc6:	66 83       	std	Z+6, r22	; 0x06
            (*vals)[i].address[ADDRESSLEN] = '\0';
     fc8:	17 82       	std	Z+7, r1	; 0x07
}

void setaddress(struct frame (*vals)[FRAMECOUNT], char address) {
    int i;
    int j;
    for(i = 0; i < FRAMECOUNT; i++) {
     fca:	2f 5f       	subi	r18, 0xFF	; 255
     fcc:	3f 4f       	sbci	r19, 0xFF	; 255
     fce:	f8 96       	adiw	r30, 0x38	; 56
     fd0:	2d 30       	cpi	r18, 0x0D	; 13
     fd2:	31 05       	cpc	r19, r1
     fd4:	a1 f7       	brne	.-24     	; 0xfbe <_Z10setaddressPA13_5framec+0x8>
            (*vals)[i].address[0] = THISDEVICE;
            (*vals)[i].address[1] = address;
            (*vals)[i].address[ADDRESSLEN] = '\0';
        }
    }    
}
     fd6:	08 95       	ret

00000fd8 <_Z10setcontrolPA13_5framei>:

void setcontrol(struct frame (*vals)[FRAMECOUNT], int ack) {
     fd8:	0f 93       	push	r16
     fda:	1f 93       	push	r17
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	ac 01       	movw	r20, r24
     fe2:	dc 01       	movw	r26, r24
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
    int j;
    for(i = 0; i < FRAMECOUNT; i++) {
        if((*vals)[i].length[0]) {
            for(j = 0; j < CONTROLLEN; j++) {
                if(!ack) {
                    (*vals)[i].control[j] = INFOFRAME[j];
     fe8:	96 e4       	ldi	r25, 0x46	; 70
     fea:	cc e1       	ldi	r28, 0x1C	; 28
     fec:	d0 e0       	ldi	r29, 0x00	; 0
     fee:	09 e4       	ldi	r16, 0x49	; 73
                }
                else {
                    (*vals)[i].control[j] = SUPEFRAME[j];
     ff0:	13 e5       	ldi	r17, 0x53	; 83

void setcontrol(struct frame (*vals)[FRAMECOUNT], int ack) {
    int i;
    int j;
    for(i = 0; i < FRAMECOUNT; i++) {
        if((*vals)[i].length[0]) {
     ff2:	18 96       	adiw	r26, 0x08	; 8
     ff4:	8c 91       	ld	r24, X
     ff6:	18 97       	sbiw	r26, 0x08	; 8
     ff8:	88 23       	and	r24, r24
     ffa:	21 f1       	breq	.+72     	; 0x1044 <_Z10setcontrolPA13_5framei+0x6c>
            for(j = 0; j < CONTROLLEN; j++) {
                if(!ack) {
     ffc:	61 15       	cp	r22, r1
     ffe:	71 05       	cpc	r23, r1
    1000:	71 f0       	breq	.+28     	; 0x101e <_Z10setcontrolPA13_5framei+0x46>
                    (*vals)[i].control[j] = INFOFRAME[j];
                }
                else {
                    (*vals)[i].control[j] = SUPEFRAME[j];
    1002:	2c 9f       	mul	r18, r28
    1004:	f0 01       	movw	r30, r0
    1006:	2d 9f       	mul	r18, r29
    1008:	f0 0d       	add	r31, r0
    100a:	3c 9f       	mul	r19, r28
    100c:	f0 0d       	add	r31, r0
    100e:	11 24       	eor	r1, r1
    1010:	31 96       	adiw	r30, 0x01	; 1
    1012:	ee 0f       	add	r30, r30
    1014:	ff 1f       	adc	r31, r31
    1016:	e4 0f       	add	r30, r20
    1018:	f5 1f       	adc	r31, r21
    101a:	10 83       	st	Z, r17
    101c:	0d c0       	rjmp	.+26     	; 0x1038 <_Z10setcontrolPA13_5framei+0x60>
    int j;
    for(i = 0; i < FRAMECOUNT; i++) {
        if((*vals)[i].length[0]) {
            for(j = 0; j < CONTROLLEN; j++) {
                if(!ack) {
                    (*vals)[i].control[j] = INFOFRAME[j];
    101e:	2c 9f       	mul	r18, r28
    1020:	f0 01       	movw	r30, r0
    1022:	2d 9f       	mul	r18, r29
    1024:	f0 0d       	add	r31, r0
    1026:	3c 9f       	mul	r19, r28
    1028:	f0 0d       	add	r31, r0
    102a:	11 24       	eor	r1, r1
    102c:	31 96       	adiw	r30, 0x01	; 1
    102e:	ee 0f       	add	r30, r30
    1030:	ff 1f       	adc	r31, r31
    1032:	e4 0f       	add	r30, r20
    1034:	f5 1f       	adc	r31, r21
    1036:	00 83       	st	Z, r16
    1038:	13 96       	adiw	r26, 0x03	; 3
    103a:	9c 93       	st	X, r25
    103c:	13 97       	sbiw	r26, 0x03	; 3
                    (*vals)[i].control[j] = SUPEFRAME[j];
                }

                //display_char((*vals)[i].control[j]);
            }
            (*vals)[i].control[CONTROLLEN] = '\0';
    103e:	14 96       	adiw	r26, 0x04	; 4
    1040:	1c 92       	st	X, r1
    1042:	14 97       	sbiw	r26, 0x04	; 4
}

void setcontrol(struct frame (*vals)[FRAMECOUNT], int ack) {
    int i;
    int j;
    for(i = 0; i < FRAMECOUNT; i++) {
    1044:	2f 5f       	subi	r18, 0xFF	; 255
    1046:	3f 4f       	sbci	r19, 0xFF	; 255
    1048:	d8 96       	adiw	r26, 0x38	; 56
    104a:	2d 30       	cpi	r18, 0x0D	; 13
    104c:	31 05       	cpc	r19, r1
    104e:	89 f6       	brne	.-94     	; 0xff2 <_Z10setcontrolPA13_5framei+0x1a>
                //display_char((*vals)[i].control[j]);
            }
            (*vals)[i].control[CONTROLLEN] = '\0';
        }
    }    
}
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	1f 91       	pop	r17
    1056:	0f 91       	pop	r16
    1058:	08 95       	ret

0000105a <_Z6millisv>:
volatile unsigned long milliseconds;

unsigned long millis()
{
   unsigned long m;
   uint8_t oldSREG = SREG;
    105a:	8f b7       	in	r24, 0x3f	; 63

   // disable interrupts while we read timer0_millis or we might get an
   // inconsistent value (e.g. in the middle of a write to timer0_millis)
   cli();
    105c:	f8 94       	cli
   m = milliseconds;
    105e:	20 91 f4 01 	lds	r18, 0x01F4
    1062:	30 91 f5 01 	lds	r19, 0x01F5
    1066:	40 91 f6 01 	lds	r20, 0x01F6
    106a:	50 91 f7 01 	lds	r21, 0x01F7
   SREG = oldSREG;
    106e:	8f bf       	out	0x3f, r24	; 63
   return m;
}
    1070:	b9 01       	movw	r22, r18
    1072:	ca 01       	movw	r24, r20
    1074:	08 95       	ret

00001076 <_Z10init_timerv>:

void init_timer()
{
    TCCR1B = _BV(WGM12) //CTC mode

    | _BV(CS11);   /* 8 prescaler */
    1076:	8a e0       	ldi	r24, 0x0A	; 10
    1078:	80 93 81 00 	sts	0x0081, r24

    OCR1A = 1499; //Want to count up to 1499 to give 1ms period
    107c:	8b ed       	ldi	r24, 0xDB	; 219
    107e:	95 e0       	ldi	r25, 0x05	; 5
    1080:	90 93 89 00 	sts	0x0089, r25
    1084:	80 93 88 00 	sts	0x0088, r24

    TIMSK1 |= _BV(OCIE1A); //Set up overflow as interrupt
    1088:	ef e6       	ldi	r30, 0x6F	; 111
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	82 60       	ori	r24, 0x02	; 2
    1090:	80 83       	st	Z, r24

    sei();
    1092:	78 94       	sei
}
    1094:	08 95       	ret

00001096 <__vector_13>:

ISR(TIMER1_COMPA_vect)
    1096:	1f 92       	push	r1
    1098:	0f 92       	push	r0
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	0f 92       	push	r0
    109e:	11 24       	eor	r1, r1
    10a0:	8f 93       	push	r24
    10a2:	9f 93       	push	r25
    10a4:	af 93       	push	r26
    10a6:	bf 93       	push	r27
{
    cli();
    10a8:	f8 94       	cli
    milliseconds++;
    10aa:	80 91 f4 01 	lds	r24, 0x01F4
    10ae:	90 91 f5 01 	lds	r25, 0x01F5
    10b2:	a0 91 f6 01 	lds	r26, 0x01F6
    10b6:	b0 91 f7 01 	lds	r27, 0x01F7
    10ba:	01 96       	adiw	r24, 0x01	; 1
    10bc:	a1 1d       	adc	r26, r1
    10be:	b1 1d       	adc	r27, r1
    10c0:	80 93 f4 01 	sts	0x01F4, r24
    10c4:	90 93 f5 01 	sts	0x01F5, r25
    10c8:	a0 93 f6 01 	sts	0x01F6, r26
    10cc:	b0 93 f7 01 	sts	0x01F7, r27
    sei();
    10d0:	78 94       	sei
}
    10d2:	bf 91       	pop	r27
    10d4:	af 91       	pop	r26
    10d6:	9f 91       	pop	r25
    10d8:	8f 91       	pop	r24
    10da:	0f 90       	pop	r0
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	0f 90       	pop	r0
    10e0:	1f 90       	pop	r1
    10e2:	18 95       	reti

000010e4 <_Z8rx_checkv>:
//     strcpy(dummy_message, Sframe);
// }

bool rx_check() {
    return 1;
}
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	08 95       	ret

000010e8 <_Z7calccrcPci>:
    }
    strcpy(str,temp);
    return strlen(str);
}

uint16_t calccrc(char *str, int len) {
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	ec 01       	movw	r28, r24
    10f2:	a0 e0       	ldi	r26, 0x00	; 0
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    r = 0;
    for(i = 0; i < len; i++) {
        r = r ^ (str[i] << 8);
        int j;
        for(j = 0; j < 8; j++) {
            r = (r&0x8000)? ((r<<1)^GENERATOR):(r<<1);
    10fa:	01 e2       	ldi	r16, 0x21	; 33
    10fc:	10 e1       	ldi	r17, 0x10	; 16
    10fe:	1c c0       	rjmp	.+56     	; 0x1138 <__stack+0x39>

uint16_t calccrc(char *str, int len) {
    int i, r;
    r = 0;
    for(i = 0; i < len; i++) {
        r = r ^ (str[i] << 8);
    1100:	fe 01       	movw	r30, r28
    1102:	ea 0f       	add	r30, r26
    1104:	fb 1f       	adc	r31, r27
    1106:	80 81       	ld	r24, Z
    1108:	99 27       	eor	r25, r25
    110a:	87 fd       	sbrc	r24, 7
    110c:	90 95       	com	r25
    110e:	98 2f       	mov	r25, r24
    1110:	88 27       	eor	r24, r24
    1112:	28 27       	eor	r18, r24
    1114:	39 27       	eor	r19, r25
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	a9 01       	movw	r20, r18
    111c:	44 0f       	add	r20, r20
    111e:	55 1f       	adc	r21, r21
        int j;
        for(j = 0; j < 8; j++) {
            r = (r&0x8000)? ((r<<1)^GENERATOR):(r<<1);
    1120:	37 ff       	sbrs	r19, 7
    1122:	04 c0       	rjmp	.+8      	; 0x112c <__stack+0x2d>
    1124:	9a 01       	movw	r18, r20
    1126:	20 27       	eor	r18, r16
    1128:	31 27       	eor	r19, r17
    112a:	01 c0       	rjmp	.+2      	; 0x112e <__stack+0x2f>
    112c:	9a 01       	movw	r18, r20
    int i, r;
    r = 0;
    for(i = 0; i < len; i++) {
        r = r ^ (str[i] << 8);
        int j;
        for(j = 0; j < 8; j++) {
    112e:	01 96       	adiw	r24, 0x01	; 1
    1130:	88 30       	cpi	r24, 0x08	; 8
    1132:	91 05       	cpc	r25, r1
    1134:	91 f7       	brne	.-28     	; 0x111a <__stack+0x1b>
}

uint16_t calccrc(char *str, int len) {
    int i, r;
    r = 0;
    for(i = 0; i < len; i++) {
    1136:	11 96       	adiw	r26, 0x01	; 1
    1138:	a6 17       	cp	r26, r22
    113a:	b7 07       	cpc	r27, r23
    113c:	0c f3       	brlt	.-62     	; 0x1100 <__stack+0x1>
            r = (r&0x8000)? ((r<<1)^GENERATOR):(r<<1);
            r = r & 0xffff;
        } 
    }
    return r;
}
    113e:	c9 01       	movw	r24, r18
    1140:	df 91       	pop	r29
    1142:	cf 91       	pop	r28
    1144:	1f 91       	pop	r17
    1146:	0f 91       	pop	r16
    1148:	08 95       	ret

0000114a <_Z4testv>:

int test() {
    return 0;
}
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	08 95       	ret

00001150 <_Z11unbytestuffPc>:
    // }
    return i;

}

void unbytestuff(char *Rframe) {
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	ac 01       	movw	r20, r24
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	c0 e0       	ldi	r28, 0x00	; 0
    115c:	d0 e0       	ldi	r29, 0x00	; 0
    115e:	13 c0       	rjmp	.+38     	; 0x1186 <_Z11unbytestuffPc+0x36>
    uint16_t i;
    int cnt = 0;
    // display_number(strlen(Rframe));
    for(i = 0; i < strlen(Rframe); i++) {
        if(Rframe[i] == ESCAPE) {
    1160:	fa 01       	movw	r30, r20
    1162:	e2 0f       	add	r30, r18
    1164:	f3 1f       	adc	r31, r19
    1166:	80 81       	ld	r24, Z
    1168:	81 36       	cpi	r24, 0x61	; 97
    116a:	11 f4       	brne	.+4      	; 0x1170 <_Z11unbytestuffPc+0x20>
            i++;
    116c:	2f 5f       	subi	r18, 0xFF	; 255
    116e:	3f 4f       	sbci	r19, 0xFF	; 255
        }
        Rframe[cnt++] = Rframe[i];
    1170:	fa 01       	movw	r30, r20
    1172:	ec 0f       	add	r30, r28
    1174:	fd 1f       	adc	r31, r29
    1176:	da 01       	movw	r26, r20
    1178:	a2 0f       	add	r26, r18
    117a:	b3 1f       	adc	r27, r19
    117c:	8c 91       	ld	r24, X
    117e:	80 83       	st	Z, r24
    1180:	21 96       	adiw	r28, 0x01	; 1

void unbytestuff(char *Rframe) {
    uint16_t i;
    int cnt = 0;
    // display_number(strlen(Rframe));
    for(i = 0; i < strlen(Rframe); i++) {
    1182:	2f 5f       	subi	r18, 0xFF	; 255
    1184:	3f 4f       	sbci	r19, 0xFF	; 255
    1186:	fa 01       	movw	r30, r20
    1188:	01 90       	ld	r0, Z+
    118a:	00 20       	and	r0, r0
    118c:	e9 f7       	brne	.-6      	; 0x1188 <_Z11unbytestuffPc+0x38>
    118e:	31 97       	sbiw	r30, 0x01	; 1
    1190:	e4 1b       	sub	r30, r20
    1192:	f5 0b       	sbc	r31, r21
    1194:	2e 17       	cp	r18, r30
    1196:	3f 07       	cpc	r19, r31
    1198:	18 f3       	brcs	.-58     	; 0x1160 <_Z11unbytestuffPc+0x10>
        if(Rframe[i] == ESCAPE) {
            i++;
        }
        Rframe[cnt++] = Rframe[i];
    }
    Rframe[cnt] = 0;
    119a:	c4 0f       	add	r28, r20
    119c:	d5 1f       	adc	r29, r21
    119e:	18 82       	st	Y, r1
}
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	08 95       	ret

000011a6 <_Z12decode_frame5framePc>:

int decode_frame(struct frame framedata, char * Rframe) {
    11a6:	0f 93       	push	r16
    11a8:	1f 93       	push	r17
    11aa:	df 93       	push	r29
    11ac:	cf 93       	push	r28
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
    11b2:	21 96       	adiw	r28, 0x01	; 1
    11b4:	0e ad       	ldd	r16, Y+62	; 0x3e
    11b6:	1f ad       	ldd	r17, Y+63	; 0x3f
    11b8:	21 97       	sbiw	r28, 0x01	; 1
    bit 3: first frame
    bit 4: last frame

    */
    int retval = 0;
    if(Rframe[0] == HEADER && Rframe[strlen(Rframe)-1] == FOOTER ) {
    11ba:	d8 01       	movw	r26, r16
    11bc:	8c 91       	ld	r24, X
    11be:	83 37       	cpi	r24, 0x73	; 115
    11c0:	09 f0       	breq	.+2      	; 0x11c4 <_Z12decode_frame5framePc+0x1e>
    11c2:	b4 c0       	rjmp	.+360    	; 0x132c <_Z12decode_frame5framePc+0x186>
    11c4:	d8 01       	movw	r26, r16
    11c6:	0d 90       	ld	r0, X+
    11c8:	00 20       	and	r0, r0
    11ca:	e9 f7       	brne	.-6      	; 0x11c6 <_Z12decode_frame5framePc+0x20>
    11cc:	11 97       	sbiw	r26, 0x01	; 1
    11ce:	a0 1b       	sub	r26, r16
    11d0:	b1 0b       	sbc	r27, r17
    11d2:	a0 0f       	add	r26, r16
    11d4:	b1 1f       	adc	r27, r17
    11d6:	11 97       	sbiw	r26, 0x01	; 1
    11d8:	8c 91       	ld	r24, X
    11da:	82 37       	cpi	r24, 0x72	; 114
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <_Z12decode_frame5framePc+0x3a>
    11de:	a6 c0       	rjmp	.+332    	; 0x132c <_Z12decode_frame5framePc+0x186>
        unbytestuff(Rframe);
    11e0:	c8 01       	movw	r24, r16
    11e2:	0e 94 a8 08 	call	0x1150	; 0x1150 <_Z11unbytestuffPc>
        strncpy(Rframe, Rframe, strlen(Rframe)-1);
    11e6:	d8 01       	movw	r26, r16
    11e8:	0d 90       	ld	r0, X+
    11ea:	00 20       	and	r0, r0
    11ec:	e9 f7       	brne	.-6      	; 0x11e8 <_Z12decode_frame5framePc+0x42>
    11ee:	a0 1b       	sub	r26, r16
    11f0:	b1 0b       	sbc	r27, r17
    11f2:	12 97       	sbiw	r26, 0x02	; 2
    11f4:	c8 01       	movw	r24, r16
    11f6:	b8 01       	movw	r22, r16
    11f8:	ad 01       	movw	r20, r26
    11fa:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <strncpy>
        Rframe[strlen(Rframe)-1] = '\0';
    11fe:	f8 01       	movw	r30, r16
    1200:	01 90       	ld	r0, Z+
    1202:	00 20       	and	r0, r0
    1204:	e9 f7       	brne	.-6      	; 0x1200 <_Z12decode_frame5framePc+0x5a>
    1206:	31 97       	sbiw	r30, 0x01	; 1
    1208:	e0 1b       	sub	r30, r16
    120a:	f1 0b       	sbc	r31, r17
    120c:	e0 0f       	add	r30, r16
    120e:	f1 1f       	adc	r31, r17
    1210:	31 97       	sbiw	r30, 0x01	; 1
    1212:	10 82       	st	Z, r1
        if(!((long unsigned int)calccrc(Rframe, strlen(Rframe)))) {
    1214:	f8 01       	movw	r30, r16
    1216:	01 90       	ld	r0, Z+
    1218:	00 20       	and	r0, r0
    121a:	e9 f7       	brne	.-6      	; 0x1216 <_Z12decode_frame5framePc+0x70>
    121c:	31 97       	sbiw	r30, 0x01	; 1
    121e:	e0 1b       	sub	r30, r16
    1220:	f1 0b       	sbc	r31, r17
    1222:	c8 01       	movw	r24, r16
    1224:	bf 01       	movw	r22, r30
    1226:	0e 94 74 08 	call	0x10e8	; 0x10e8 <_Z7calccrcPci>
    122a:	89 2b       	or	r24, r25
    122c:	09 f0       	breq	.+2      	; 0x1230 <_Z12decode_frame5framePc+0x8a>
    122e:	7e c0       	rjmp	.+252    	; 0x132c <_Z12decode_frame5framePc+0x186>
    1230:	a8 01       	movw	r20, r16
    1232:	de 01       	movw	r26, r28
    1234:	19 96       	adiw	r26, 0x09	; 9
    1236:	b8 01       	movw	r22, r16
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
            //display_string("\nNo Errors!\n");
            retval |= 1;
            int i;
            for(i = 0; i < 10; i++) {
                if(i < CONTROLLEN) {
    123c:	22 30       	cpi	r18, 0x02	; 2
    123e:	31 05       	cpc	r19, r1
    1240:	6c f4       	brge	.+26     	; 0x125c <_Z12decode_frame5framePc+0xb6>
                    framedata.control[i] = Rframe[HEADERLEN + i]; 
    1242:	fb 01       	movw	r30, r22
    1244:	81 81       	ldd	r24, Z+1	; 0x01
    1246:	8c 93       	st	X, r24
                }
                if(i < ADDRESSLEN) {
                    framedata.address[i] = Rframe[HEADERLEN + CONTROLLEN + i];
    1248:	83 81       	ldd	r24, Z+3	; 0x03
    124a:	13 96       	adiw	r26, 0x03	; 3
    124c:	8c 93       	st	X, r24
    124e:	13 97       	sbiw	r26, 0x03	; 3
                }
                if(i < LENGTHLEN) {
    1250:	21 15       	cp	r18, r1
    1252:	31 05       	cpc	r19, r1
    1254:	19 f4       	brne	.+6      	; 0x125c <_Z12decode_frame5framePc+0xb6>
                    framedata.length[i] = Rframe[HEADERLEN + CONTROLLEN + ADDRESSLEN + i];
    1256:	f8 01       	movw	r30, r16
    1258:	85 81       	ldd	r24, Z+5	; 0x05
    125a:	8f 87       	std	Y+15, r24	; 0x0f
        Rframe[strlen(Rframe)-1] = '\0';
        if(!((long unsigned int)calccrc(Rframe, strlen(Rframe)))) {
            //display_string("\nNo Errors!\n");
            retval |= 1;
            int i;
            for(i = 0; i < 10; i++) {
    125c:	2f 5f       	subi	r18, 0xFF	; 255
    125e:	3f 4f       	sbci	r19, 0xFF	; 255
    1260:	6f 5f       	subi	r22, 0xFF	; 255
    1262:	7f 4f       	sbci	r23, 0xFF	; 255
    1264:	11 96       	adiw	r26, 0x01	; 1
    1266:	2a 30       	cpi	r18, 0x0A	; 10
    1268:	31 05       	cpc	r19, r1
    126a:	41 f7       	brne	.-48     	; 0x123c <_Z12decode_frame5framePc+0x96>
                }
                if(i < LENGTHLEN) {
                    framedata.length[i] = Rframe[HEADERLEN + CONTROLLEN + ADDRESSLEN + i];
                }
            }
            framedata.control[CONTROLLEN] = 0;
    126c:	1b 86       	std	Y+11, r1	; 0x0b
            framedata.address[ADDRESSLEN] = 0;
    126e:	1e 86       	std	Y+14, r1	; 0x0e
            framedata.length[LENGTHLEN] = 0;
    1270:	18 8a       	std	Y+16, r1	; 0x10
            for(i = 0; i < framedata.length[0]; i++) {
    1272:	8f 85       	ldd	r24, Y+15	; 0x0f
    1274:	e8 2f       	mov	r30, r24
    1276:	ff 27       	eor	r31, r31
    1278:	e7 fd       	sbrc	r30, 7
    127a:	f0 95       	com	r31
    127c:	be 01       	movw	r22, r28
    127e:	6f 5e       	subi	r22, 0xEF	; 239
    1280:	7f 4f       	sbci	r23, 0xFF	; 255
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	08 c0       	rjmp	.+16     	; 0x1298 <_Z12decode_frame5framePc+0xf2>
                framedata.data[i] = Rframe[HEADERLEN + CONTROLLEN + ADDRESSLEN + LENGTHLEN + i];
    1288:	da 01       	movw	r26, r20
    128a:	15 96       	adiw	r26, 0x05	; 5
    128c:	8c 91       	ld	r24, X
    128e:	db 01       	movw	r26, r22
    1290:	8d 93       	st	X+, r24
    1292:	bd 01       	movw	r22, r26
                }
            }
            framedata.control[CONTROLLEN] = 0;
            framedata.address[ADDRESSLEN] = 0;
            framedata.length[LENGTHLEN] = 0;
            for(i = 0; i < framedata.length[0]; i++) {
    1294:	2f 5f       	subi	r18, 0xFF	; 255
    1296:	3f 4f       	sbci	r19, 0xFF	; 255
    1298:	4f 5f       	subi	r20, 0xFF	; 255
    129a:	5f 4f       	sbci	r21, 0xFF	; 255
    129c:	2e 17       	cp	r18, r30
    129e:	3f 07       	cpc	r19, r31
    12a0:	9c f3       	brlt	.-26     	; 0x1288 <_Z12decode_frame5framePc+0xe2>
                framedata.data[i] = Rframe[HEADERLEN + CONTROLLEN + ADDRESSLEN + LENGTHLEN + i];
            }
            framedata.data[(int)framedata.length[0]] = 0;
    12a2:	87 e0       	ldi	r24, 0x07	; 7
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	8c 0f       	add	r24, r28
    12a8:	9d 1f       	adc	r25, r29
    12aa:	e8 0f       	add	r30, r24
    12ac:	f9 1f       	adc	r31, r25
    12ae:	12 86       	std	Z+10, r1	; 0x0a
            display_string("           ");
    12b0:	8f e3       	ldi	r24, 0x3F	; 63
    12b2:	91 e0       	ldi	r25, 0x01	; 1
    12b4:	0e 94 dd 06 	call	0xdba	; 0xdba <_Z14display_stringPc>
            display_string(framedata.data);
    12b8:	ce 01       	movw	r24, r28
    12ba:	41 96       	adiw	r24, 0x11	; 17
    12bc:	0e 94 dd 06 	call	0xdba	; 0xdba <_Z14display_stringPc>
            if(framedata.address[0] == BROADCAST || framedata.address[0] == THISDEVICE) {
    12c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    12c2:	8f 3f       	cpi	r24, 0xFF	; 255
    12c4:	11 f0       	breq	.+4      	; 0x12ca <_Z12decode_frame5framePc+0x124>
    12c6:	84 37       	cpi	r24, 0x74	; 116
    12c8:	51 f5       	brne	.+84     	; 0x131e <_Z12decode_frame5framePc+0x178>
                display_string("\nPacket for me!");
    12ca:	8b e4       	ldi	r24, 0x4B	; 75
    12cc:	91 e0       	ldi	r25, 0x01	; 1
    12ce:	0e 94 dd 06 	call	0xdba	; 0xdba <_Z14display_stringPc>
                retval |= 1 << 1;
                if(framedata.data[0] == START) {
    12d2:	89 89       	ldd	r24, Y+17	; 0x11
    12d4:	85 33       	cpi	r24, 0x35	; 53
    12d6:	19 f4       	brne	.+6      	; 0x12de <_Z12decode_frame5framePc+0x138>
    12d8:	0b e0       	ldi	r16, 0x0B	; 11
    12da:	10 e0       	ldi	r17, 0x00	; 0
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <_Z12decode_frame5framePc+0x13c>
    12de:	03 e0       	ldi	r16, 0x03	; 3
    12e0:	10 e0       	ldi	r17, 0x00	; 0
                    retval |= 1<< 3;
                }
                if(framedata.data[strlen(framedata.data)-1] == END) {
    12e2:	fe 01       	movw	r30, r28
    12e4:	71 96       	adiw	r30, 0x11	; 17
    12e6:	df 01       	movw	r26, r30
    12e8:	0d 90       	ld	r0, X+
    12ea:	00 20       	and	r0, r0
    12ec:	e9 f7       	brne	.-6      	; 0x12e8 <_Z12decode_frame5framePc+0x142>
    12ee:	11 97       	sbiw	r26, 0x01	; 1
    12f0:	ae 1b       	sub	r26, r30
    12f2:	bf 0b       	sbc	r27, r31
    12f4:	e7 e0       	ldi	r30, 0x07	; 7
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	ec 0f       	add	r30, r28
    12fa:	fd 1f       	adc	r31, r29
    12fc:	ae 0f       	add	r26, r30
    12fe:	bf 1f       	adc	r27, r31
    1300:	19 96       	adiw	r26, 0x09	; 9
    1302:	8c 91       	ld	r24, X
    1304:	85 33       	cpi	r24, 0x35	; 53
    1306:	09 f4       	brne	.+2      	; 0x130a <_Z12decode_frame5framePc+0x164>
                    retval |= 1<<4;
    1308:	00 61       	ori	r16, 0x10	; 16
                }
                if(!strcmp(framedata.control, INFOFRAME)) {
    130a:	ce 01       	movw	r24, r28
    130c:	09 96       	adiw	r24, 0x09	; 9
    130e:	6b e5       	ldi	r22, 0x5B	; 91
    1310:	71 e0       	ldi	r23, 0x01	; 1
    1312:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <strcmp>
    1316:	00 97       	sbiw	r24, 0x00	; 0
    1318:	59 f4       	brne	.+22     	; 0x1330 <_Z12decode_frame5framePc+0x18a>
                    retval |= 1 << 2;
    131a:	04 60       	ori	r16, 0x04	; 4
    131c:	09 c0       	rjmp	.+18     	; 0x1330 <_Z12decode_frame5framePc+0x18a>
                }
            }
            else {
                // not intended recepient
                display_string("\nNot for me!\n");
    131e:	8e e5       	ldi	r24, 0x5E	; 94
    1320:	91 e0       	ldi	r25, 0x01	; 1
    1322:	0e 94 dd 06 	call	0xdba	; 0xdba <_Z14display_stringPc>
    1326:	01 e0       	ldi	r16, 0x01	; 1
    1328:	10 e0       	ldi	r17, 0x00	; 0
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <_Z12decode_frame5framePc+0x18a>
    132c:	00 e0       	ldi	r16, 0x00	; 0
    132e:	10 e0       	ldi	r17, 0x00	; 0


    
    return retval;

}
    1330:	c8 01       	movw	r24, r16
    1332:	cf 91       	pop	r28
    1334:	df 91       	pop	r29
    1336:	1f 91       	pop	r17
    1338:	0f 91       	pop	r16
    133a:	08 95       	ret

0000133c <_Z9bytestuffPci>:
    }
    return 0;

}

int bytestuff(char *str, int len) {
    133c:	4f 92       	push	r4
    133e:	5f 92       	push	r5
    1340:	6f 92       	push	r6
    1342:	7f 92       	push	r7
    1344:	8f 92       	push	r8
    1346:	9f 92       	push	r9
    1348:	af 92       	push	r10
    134a:	bf 92       	push	r11
    134c:	cf 92       	push	r12
    134e:	df 92       	push	r13
    1350:	ef 92       	push	r14
    1352:	ff 92       	push	r15
    1354:	0f 93       	push	r16
    1356:	1f 93       	push	r17
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	6d 97       	sbiw	r28, 0x1d	; 29
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	f8 94       	cli
    1366:	de bf       	out	0x3e, r29	; 62
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	cd bf       	out	0x3d, r28	; 61
    136c:	b8 2e       	mov	r11, r24
    136e:	a9 2e       	mov	r10, r25
    1370:	3b 01       	movw	r6, r22
    int i;
    char temp[HEADERLEN + CONTROLLEN + ADDRESSLEN + LENGTHLEN + DATALEN + CHECKSUMLEN + FOOTERLEN + 10] = "";
    1372:	19 82       	std	Y+1, r1	; 0x01
    1374:	1a 82       	std	Y+2, r1	; 0x02
    1376:	1b 82       	std	Y+3, r1	; 0x03
    1378:	1c 82       	std	Y+4, r1	; 0x04
    137a:	fe 01       	movw	r30, r28
    137c:	35 96       	adiw	r30, 0x05	; 5
    137e:	89 e1       	ldi	r24, 0x19	; 25
    1380:	df 01       	movw	r26, r30
    1382:	1d 92       	st	X+, r1
    1384:	8a 95       	dec	r24
    1386:	e9 f7       	brne	.-6      	; 0x1382 <_Z9bytestuffPci+0x46>
    1388:	2b 2d       	mov	r18, r11
    138a:	39 2f       	mov	r19, r25
    138c:	c9 01       	movw	r24, r18
    138e:	7c 01       	movw	r14, r24
    1390:	00 e0       	ldi	r16, 0x00	; 0
    1392:	10 e0       	ldi	r17, 0x00	; 0
    for(i = 0; i<len; i++) {
        if(str[i] == HEADER || str[i] == ESCAPE) {
            // display_number(int(str[i]));
            // display_char('\n');
            sprintf(temp, "%s%c", temp, ESCAPE);
    1394:	6e 01       	movw	r12, r28
    1396:	08 94       	sec
    1398:	c1 1c       	adc	r12, r1
    139a:	d1 1c       	adc	r13, r1
    139c:	bc e6       	ldi	r27, 0x6C	; 108
    139e:	8b 2e       	mov	r8, r27
    13a0:	b1 e0       	ldi	r27, 0x01	; 1
    13a2:	9b 2e       	mov	r9, r27
    13a4:	a1 e6       	ldi	r26, 0x61	; 97
    13a6:	4a 2e       	mov	r4, r26
    13a8:	51 2c       	mov	r5, r1
    13aa:	50 c0       	rjmp	.+160    	; 0x144c <_Z9bytestuffPci+0x110>

int bytestuff(char *str, int len) {
    int i;
    char temp[HEADERLEN + CONTROLLEN + ADDRESSLEN + LENGTHLEN + DATALEN + CHECKSUMLEN + FOOTERLEN + 10] = "";
    for(i = 0; i<len; i++) {
        if(str[i] == HEADER || str[i] == ESCAPE) {
    13ac:	f7 01       	movw	r30, r14
    13ae:	80 81       	ld	r24, Z
    13b0:	83 37       	cpi	r24, 0x73	; 115
    13b2:	11 f0       	breq	.+4      	; 0x13b8 <_Z9bytestuffPci+0x7c>
    13b4:	81 36       	cpi	r24, 0x61	; 97
    13b6:	09 f5       	brne	.+66     	; 0x13fa <_Z9bytestuffPci+0xbe>
            // display_number(int(str[i]));
            // display_char('\n');
            sprintf(temp, "%s%c", temp, ESCAPE);
    13b8:	8d b7       	in	r24, 0x3d	; 61
    13ba:	9e b7       	in	r25, 0x3e	; 62
    13bc:	08 97       	sbiw	r24, 0x08	; 8
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	9e bf       	out	0x3e, r25	; 62
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	8d bf       	out	0x3d, r24	; 61
    13c8:	ed b7       	in	r30, 0x3d	; 61
    13ca:	fe b7       	in	r31, 0x3e	; 62
    13cc:	31 96       	adiw	r30, 0x01	; 1
    13ce:	ad b7       	in	r26, 0x3d	; 61
    13d0:	be b7       	in	r27, 0x3e	; 62
    13d2:	12 96       	adiw	r26, 0x02	; 2
    13d4:	dc 92       	st	X, r13
    13d6:	ce 92       	st	-X, r12
    13d8:	11 97       	sbiw	r26, 0x01	; 1
    13da:	93 82       	std	Z+3, r9	; 0x03
    13dc:	82 82       	std	Z+2, r8	; 0x02
    13de:	d5 82       	std	Z+5, r13	; 0x05
    13e0:	c4 82       	std	Z+4, r12	; 0x04
    13e2:	57 82       	std	Z+7, r5	; 0x07
    13e4:	46 82       	std	Z+6, r4	; 0x06
    13e6:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <sprintf>
    13ea:	ed b7       	in	r30, 0x3d	; 61
    13ec:	fe b7       	in	r31, 0x3e	; 62
    13ee:	38 96       	adiw	r30, 0x08	; 8
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	fe bf       	out	0x3e, r31	; 62
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	ed bf       	out	0x3d, r30	; 61
        }
        sprintf(temp,"%s%c", temp, str[i]);
    13fa:	8d b7       	in	r24, 0x3d	; 61
    13fc:	9e b7       	in	r25, 0x3e	; 62
    13fe:	08 97       	sbiw	r24, 0x08	; 8
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	f8 94       	cli
    1404:	9e bf       	out	0x3e, r25	; 62
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	8d bf       	out	0x3d, r24	; 61
    140a:	ed b7       	in	r30, 0x3d	; 61
    140c:	fe b7       	in	r31, 0x3e	; 62
    140e:	31 96       	adiw	r30, 0x01	; 1
    1410:	ad b7       	in	r26, 0x3d	; 61
    1412:	be b7       	in	r27, 0x3e	; 62
    1414:	12 96       	adiw	r26, 0x02	; 2
    1416:	dc 92       	st	X, r13
    1418:	ce 92       	st	-X, r12
    141a:	11 97       	sbiw	r26, 0x01	; 1
    141c:	93 82       	std	Z+3, r9	; 0x03
    141e:	82 82       	std	Z+2, r8	; 0x02
    1420:	d5 82       	std	Z+5, r13	; 0x05
    1422:	c4 82       	std	Z+4, r12	; 0x04
    1424:	d7 01       	movw	r26, r14
    1426:	8d 91       	ld	r24, X+
    1428:	7d 01       	movw	r14, r26
    142a:	99 27       	eor	r25, r25
    142c:	87 fd       	sbrc	r24, 7
    142e:	90 95       	com	r25
    1430:	97 83       	std	Z+7, r25	; 0x07
    1432:	86 83       	std	Z+6, r24	; 0x06
    1434:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <sprintf>
}

int bytestuff(char *str, int len) {
    int i;
    char temp[HEADERLEN + CONTROLLEN + ADDRESSLEN + LENGTHLEN + DATALEN + CHECKSUMLEN + FOOTERLEN + 10] = "";
    for(i = 0; i<len; i++) {
    1438:	0f 5f       	subi	r16, 0xFF	; 255
    143a:	1f 4f       	sbci	r17, 0xFF	; 255
    143c:	ed b7       	in	r30, 0x3d	; 61
    143e:	fe b7       	in	r31, 0x3e	; 62
    1440:	38 96       	adiw	r30, 0x08	; 8
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	fe bf       	out	0x3e, r31	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	ed bf       	out	0x3d, r30	; 61
    144c:	06 15       	cp	r16, r6
    144e:	17 05       	cpc	r17, r7
    1450:	0c f4       	brge	.+2      	; 0x1454 <_Z9bytestuffPci+0x118>
    1452:	ac cf       	rjmp	.-168    	; 0x13ac <_Z9bytestuffPci+0x70>
            // display_char('\n');
            sprintf(temp, "%s%c", temp, ESCAPE);
        }
        sprintf(temp,"%s%c", temp, str[i]);
    }
    strcpy(str,temp);
    1454:	8b 2d       	mov	r24, r11
    1456:	9a 2d       	mov	r25, r10
    1458:	be 01       	movw	r22, r28
    145a:	6f 5f       	subi	r22, 0xFF	; 255
    145c:	7f 4f       	sbci	r23, 0xFF	; 255
    145e:	0e 94 30 16 	call	0x2c60	; 0x2c60 <strcpy>
    return strlen(str);
    1462:	ab 2d       	mov	r26, r11
    1464:	ba 2d       	mov	r27, r10
    1466:	fd 01       	movw	r30, r26
    1468:	01 90       	ld	r0, Z+
    146a:	00 20       	and	r0, r0
    146c:	e9 f7       	brne	.-6      	; 0x1468 <_Z9bytestuffPci+0x12c>
    146e:	31 97       	sbiw	r30, 0x01	; 1
    1470:	ea 1b       	sub	r30, r26
    1472:	fb 0b       	sbc	r31, r27
}
    1474:	cf 01       	movw	r24, r30
    1476:	6d 96       	adiw	r28, 0x1d	; 29
    1478:	0f b6       	in	r0, 0x3f	; 63
    147a:	f8 94       	cli
    147c:	de bf       	out	0x3e, r29	; 62
    147e:	0f be       	out	0x3f, r0	; 63
    1480:	cd bf       	out	0x3d, r28	; 61
    1482:	cf 91       	pop	r28
    1484:	df 91       	pop	r29
    1486:	1f 91       	pop	r17
    1488:	0f 91       	pop	r16
    148a:	ff 90       	pop	r15
    148c:	ef 90       	pop	r14
    148e:	df 90       	pop	r13
    1490:	cf 90       	pop	r12
    1492:	bf 90       	pop	r11
    1494:	af 90       	pop	r10
    1496:	9f 90       	pop	r9
    1498:	8f 90       	pop	r8
    149a:	7f 90       	pop	r7
    149c:	6f 90       	pop	r6
    149e:	5f 90       	pop	r5
    14a0:	4f 90       	pop	r4
    14a2:	08 95       	ret

000014a4 <_Z11setchecksumPA13_5frame>:
#include <stdio.h>
#include <avr/io.h>
#include <string.h>


void setchecksum(struct frame (*vals)[FRAMECOUNT]) {
    14a4:	2f 92       	push	r2
    14a6:	3f 92       	push	r3
    14a8:	4f 92       	push	r4
    14aa:	5f 92       	push	r5
    14ac:	6f 92       	push	r6
    14ae:	7f 92       	push	r7
    14b0:	8f 92       	push	r8
    14b2:	9f 92       	push	r9
    14b4:	af 92       	push	r10
    14b6:	bf 92       	push	r11
    14b8:	cf 92       	push	r12
    14ba:	df 92       	push	r13
    14bc:	ef 92       	push	r14
    14be:	ff 92       	push	r15
    14c0:	0f 93       	push	r16
    14c2:	1f 93       	push	r17
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
    14cc:	e2 97       	sbiw	r28, 0x32	; 50
    14ce:	0f b6       	in	r0, 0x3f	; 63
    14d0:	f8 94       	cli
    14d2:	de bf       	out	0x3e, r29	; 62
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	cd bf       	out	0x3d, r28	; 61
    14d8:	4c 01       	movw	r8, r24
    14da:	5c 01       	movw	r10, r24
    14dc:	ee 24       	eor	r14, r14
    14de:	ff 24       	eor	r15, r15
    int i;
    for(i = 0; i<FRAMECOUNT; i++) {
        if((*vals)[i].length[0]) {
            char checksumcalc[50] = "";
    14e0:	55 e0       	ldi	r21, 0x05	; 5
    14e2:	25 2e       	mov	r2, r21
    14e4:	31 2c       	mov	r3, r1
    14e6:	2c 0e       	add	r2, r28
    14e8:	3d 1e       	adc	r3, r29
            strcpy(checksumcalc,(*vals)[i].header);
    14ea:	48 e3       	ldi	r20, 0x38	; 56
    14ec:	44 2e       	mov	r4, r20
    14ee:	51 2c       	mov	r5, r1
    14f0:	6e 01       	movw	r12, r28
    14f2:	08 94       	sec
    14f4:	c1 1c       	adc	r12, r1
    14f6:	d1 1c       	adc	r13, r1
            strcat(checksumcalc,(*vals)[i].control);
    14f8:	3c e1       	ldi	r19, 0x1C	; 28
    14fa:	63 2e       	mov	r6, r19
    14fc:	71 2c       	mov	r7, r1


void setchecksum(struct frame (*vals)[FRAMECOUNT]) {
    int i;
    for(i = 0; i<FRAMECOUNT; i++) {
        if((*vals)[i].length[0]) {
    14fe:	f5 01       	movw	r30, r10
    1500:	80 85       	ldd	r24, Z+8	; 0x08
    1502:	88 23       	and	r24, r24
    1504:	09 f4       	brne	.+2      	; 0x1508 <_Z11setchecksumPA13_5frame+0x64>
    1506:	59 c0       	rjmp	.+178    	; 0x15ba <_Z11setchecksumPA13_5frame+0x116>
            char checksumcalc[50] = "";
    1508:	19 82       	std	Y+1, r1	; 0x01
    150a:	1a 82       	std	Y+2, r1	; 0x02
    150c:	1b 82       	std	Y+3, r1	; 0x03
    150e:	1c 82       	std	Y+4, r1	; 0x04
    1510:	f1 01       	movw	r30, r2
    1512:	8e e2       	ldi	r24, 0x2E	; 46
    1514:	11 92       	st	Z+, r1
    1516:	8a 95       	dec	r24
    1518:	e9 f7       	brne	.-6      	; 0x1514 <_Z11setchecksumPA13_5frame+0x70>
            strcpy(checksumcalc,(*vals)[i].header);
    151a:	e4 9c       	mul	r14, r4
    151c:	80 01       	movw	r16, r0
    151e:	e5 9c       	mul	r14, r5
    1520:	10 0d       	add	r17, r0
    1522:	f4 9c       	mul	r15, r4
    1524:	10 0d       	add	r17, r0
    1526:	11 24       	eor	r1, r1
    1528:	b4 01       	movw	r22, r8
    152a:	60 0f       	add	r22, r16
    152c:	71 1f       	adc	r23, r17
    152e:	c6 01       	movw	r24, r12
    1530:	0e 94 30 16 	call	0x2c60	; 0x2c60 <strcpy>
            strcat(checksumcalc,(*vals)[i].control);
    1534:	e6 9c       	mul	r14, r6
    1536:	b0 01       	movw	r22, r0
    1538:	e7 9c       	mul	r14, r7
    153a:	70 0d       	add	r23, r0
    153c:	f6 9c       	mul	r15, r6
    153e:	70 0d       	add	r23, r0
    1540:	11 24       	eor	r1, r1
    1542:	6f 5f       	subi	r22, 0xFF	; 255
    1544:	7f 4f       	sbci	r23, 0xFF	; 255
    1546:	66 0f       	add	r22, r22
    1548:	77 1f       	adc	r23, r23
    154a:	68 0d       	add	r22, r8
    154c:	79 1d       	adc	r23, r9
    154e:	c6 01       	movw	r24, r12
    1550:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <strcat>
            strcat(checksumcalc,(*vals)[i].address);
    1554:	0b 5f       	subi	r16, 0xFB	; 251
    1556:	1f 4f       	sbci	r17, 0xFF	; 255
    1558:	b4 01       	movw	r22, r8
    155a:	60 0f       	add	r22, r16
    155c:	71 1f       	adc	r23, r17
    155e:	c6 01       	movw	r24, r12
    1560:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <strcat>
            strcat(checksumcalc,(char*)(*vals)[i].length);
    1564:	b7 01       	movw	r22, r14
    1566:	93 e0       	ldi	r25, 0x03	; 3
    1568:	66 0f       	add	r22, r22
    156a:	77 1f       	adc	r23, r23
    156c:	9a 95       	dec	r25
    156e:	e1 f7       	brne	.-8      	; 0x1568 <_Z11setchecksumPA13_5frame+0xc4>
    1570:	6e 19       	sub	r22, r14
    1572:	7f 09       	sbc	r23, r15
    1574:	6f 5f       	subi	r22, 0xFF	; 255
    1576:	7f 4f       	sbci	r23, 0xFF	; 255
    1578:	83 e0       	ldi	r24, 0x03	; 3
    157a:	66 0f       	add	r22, r22
    157c:	77 1f       	adc	r23, r23
    157e:	8a 95       	dec	r24
    1580:	e1 f7       	brne	.-8      	; 0x157a <_Z11setchecksumPA13_5frame+0xd6>
    1582:	68 0d       	add	r22, r8
    1584:	79 1d       	adc	r23, r9
    1586:	c6 01       	movw	r24, r12
    1588:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <strcat>
            //strcat(checksumcalc,(char*)(*vals)[i].header);
            strcat(checksumcalc,(*vals)[i].data);
    158c:	0b 5f       	subi	r16, 0xFB	; 251
    158e:	1f 4f       	sbci	r17, 0xFF	; 255
    1590:	08 0d       	add	r16, r8
    1592:	19 1d       	adc	r17, r9
    1594:	c6 01       	movw	r24, r12
    1596:	b8 01       	movw	r22, r16
    1598:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <strcat>
            
            uint16_t crc = calccrc(checksumcalc, strlen(checksumcalc));
    159c:	f6 01       	movw	r30, r12
    159e:	01 90       	ld	r0, Z+
    15a0:	00 20       	and	r0, r0
    15a2:	e9 f7       	brne	.-6      	; 0x159e <_Z11setchecksumPA13_5frame+0xfa>
    15a4:	31 97       	sbiw	r30, 0x01	; 1
    15a6:	ec 19       	sub	r30, r12
    15a8:	fd 09       	sbc	r31, r13
    15aa:	c6 01       	movw	r24, r12
    15ac:	bf 01       	movw	r22, r30
    15ae:	0e 94 74 08 	call	0x10e8	; 0x10e8 <_Z7calccrcPci>

            (*vals)[i].checksum[0] = (uint8_t)(crc>>8);
    15b2:	f5 01       	movw	r30, r10
    15b4:	95 8b       	std	Z+21, r25	; 0x15
            (*vals)[i].checksum[1] = (uint8_t)(crc & 0xff);
    15b6:	86 8b       	std	Z+22, r24	; 0x16
            (*vals)[i].checksum[2] = '\0';
    15b8:	17 8a       	std	Z+23, r1	; 0x17
#include <string.h>


void setchecksum(struct frame (*vals)[FRAMECOUNT]) {
    int i;
    for(i = 0; i<FRAMECOUNT; i++) {
    15ba:	08 94       	sec
    15bc:	e1 1c       	adc	r14, r1
    15be:	f1 1c       	adc	r15, r1
    15c0:	88 e3       	ldi	r24, 0x38	; 56
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	a8 0e       	add	r10, r24
    15c6:	b9 1e       	adc	r11, r25
    15c8:	9d e0       	ldi	r25, 0x0D	; 13
    15ca:	e9 16       	cp	r14, r25
    15cc:	f1 04       	cpc	r15, r1
    15ce:	09 f0       	breq	.+2      	; 0x15d2 <_Z11setchecksumPA13_5frame+0x12e>
    15d0:	96 cf       	rjmp	.-212    	; 0x14fe <_Z11setchecksumPA13_5frame+0x5a>
            // char temp[30];
            // sprintf(temp, "crc = %x, %x %x\n",crc, (*vals)[i].checksum[0],(*vals)[i].checksum[1]);
            // display_string(temp);
        }
    }
}
    15d2:	e2 96       	adiw	r28, 0x32	; 50
    15d4:	0f b6       	in	r0, 0x3f	; 63
    15d6:	f8 94       	cli
    15d8:	de bf       	out	0x3e, r29	; 62
    15da:	0f be       	out	0x3f, r0	; 63
    15dc:	cd bf       	out	0x3d, r28	; 61
    15de:	cf 91       	pop	r28
    15e0:	df 91       	pop	r29
    15e2:	1f 91       	pop	r17
    15e4:	0f 91       	pop	r16
    15e6:	ff 90       	pop	r15
    15e8:	ef 90       	pop	r14
    15ea:	df 90       	pop	r13
    15ec:	cf 90       	pop	r12
    15ee:	bf 90       	pop	r11
    15f0:	af 90       	pop	r10
    15f2:	9f 90       	pop	r9
    15f4:	8f 90       	pop	r8
    15f6:	7f 90       	pop	r7
    15f8:	6f 90       	pop	r6
    15fa:	5f 90       	pop	r5
    15fc:	4f 90       	pop	r4
    15fe:	3f 90       	pop	r3
    1600:	2f 90       	pop	r2
    1602:	08 95       	ret

00001604 <_Z9makeframePA13_5framecPci>:
            (*vals)[i].control[CONTROLLEN] = '\0';
        }
    }    
}

int makeframe(struct frame (*data)[FRAMECOUNT], char dest, char*Spacket, int ack) {
    1604:	2f 92       	push	r2
    1606:	3f 92       	push	r3
    1608:	4f 92       	push	r4
    160a:	5f 92       	push	r5
    160c:	6f 92       	push	r6
    160e:	7f 92       	push	r7
    1610:	8f 92       	push	r8
    1612:	9f 92       	push	r9
    1614:	af 92       	push	r10
    1616:	bf 92       	push	r11
    1618:	cf 92       	push	r12
    161a:	df 92       	push	r13
    161c:	ef 92       	push	r14
    161e:	ff 92       	push	r15
    1620:	0f 93       	push	r16
    1622:	1f 93       	push	r17
    1624:	df 93       	push	r29
    1626:	cf 93       	push	r28
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
    162c:	6f 97       	sbiw	r28, 0x1f	; 31
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	f8 94       	cli
    1632:	de bf       	out	0x3e, r29	; 62
    1634:	0f be       	out	0x3f, r0	; 63
    1636:	cd bf       	out	0x3d, r28	; 61
    1638:	6c 01       	movw	r12, r24
    163a:	e6 2e       	mov	r14, r22
    163c:	8a 01       	movw	r16, r20
    163e:	59 01       	movw	r10, r18
    dataInit(data);    
    1640:	0e 94 ce 07 	call	0xf9c	; 0xf9c <_Z8dataInitPA13_5frame>

    setdata(data, Spacket);
    1644:	c6 01       	movw	r24, r12
    1646:	b8 01       	movw	r22, r16
    1648:	0e 94 45 07 	call	0xe8a	; 0xe8a <_Z7setdataPA13_5framePc>
    164c:	36 01       	movw	r6, r12
    164e:	f6 01       	movw	r30, r12
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	90 e0       	ldi	r25, 0x00	; 0
}

void setheader(struct frame (*vals)[FRAMECOUNT]) {
    int i;
    for(i = 0; i < FRAMECOUNT; i++) {
        (*vals)[i].header[0] = HEADER;
    1654:	23 e7       	ldi	r18, 0x73	; 115
    1656:	20 83       	st	Z, r18
        (*vals)[i].header[1] = '\0';
    1658:	11 82       	std	Z+1, r1	; 0x01
    }
}

void setheader(struct frame (*vals)[FRAMECOUNT]) {
    int i;
    for(i = 0; i < FRAMECOUNT; i++) {
    165a:	01 96       	adiw	r24, 0x01	; 1
    165c:	f8 96       	adiw	r30, 0x38	; 56
    165e:	8d 30       	cpi	r24, 0x0D	; 13
    1660:	91 05       	cpc	r25, r1
    1662:	c9 f7       	brne	.-14     	; 0x1656 <_Z9makeframePA13_5framecPci+0x52>

    setdata(data, Spacket);

    setheader(data);

    setcontrol(data, ack);
    1664:	c6 01       	movw	r24, r12
    1666:	b5 01       	movw	r22, r10
    1668:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_Z10setcontrolPA13_5framei>

    setaddress(data, dest);    
    166c:	c6 01       	movw	r24, r12
    166e:	6e 2d       	mov	r22, r14
    1670:	0e 94 db 07 	call	0xfb6	; 0xfb6 <_Z10setaddressPA13_5framec>

    setchecksum(data);
    1674:	c6 01       	movw	r24, r12
    1676:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <_Z11setchecksumPA13_5frame>
    167a:	f6 01       	movw	r30, r12
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e0       	ldi	r25, 0x00	; 0
}

void setfooter(struct frame (*vals)[FRAMECOUNT]) {
    int i;
    for(i = 0; i < FRAMECOUNT; i++) {
        (*vals)[i].footer[0] = FOOTER;
    1680:	22 e7       	ldi	r18, 0x72	; 114
    1682:	20 8f       	std	Z+24, r18	; 0x18
        (*vals)[i].footer[1] = '\0';        
    1684:	11 8e       	std	Z+25, r1	; 0x19
    }
}

void setfooter(struct frame (*vals)[FRAMECOUNT]) {
    int i;
    for(i = 0; i < FRAMECOUNT; i++) {
    1686:	01 96       	adiw	r24, 0x01	; 1
    1688:	f8 96       	adiw	r30, 0x38	; 56
    168a:	8d 30       	cpi	r24, 0x0D	; 13
    168c:	91 05       	cpc	r25, r1
    168e:	c9 f7       	brne	.-14     	; 0x1682 <_Z9makeframePA13_5framecPci+0x7e>
    1690:	aa 24       	eor	r10, r10
    1692:	bb 24       	eor	r11, r11
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    int i;
    int retval = 0;
    for(i = 0; i < FRAMECOUNT; i++) {
        if((*data)[i].length[0]) {
            // display_string("\nMAke the string: \n");
            char temp[HEADERLEN + CONTROLLEN + ADDRESSLEN + LENGTHLEN + DATALEN + CHECKSUMLEN + FOOTERLEN + 10] = "";
    1698:	ce 01       	movw	r24, r28
    169a:	05 96       	adiw	r24, 0x05	; 5
    169c:	9f 8f       	std	Y+31, r25	; 0x1f
    169e:	8e 8f       	std	Y+30, r24	; 0x1e
            sprintf(temp,"%s%s%s%s%s",(*data)[i].control,(*data)[i].address,(*data)[i].length,(*data)[i].data,(*data)[i].checksum);
    16a0:	4e 01       	movw	r8, r28
    16a2:	08 94       	sec
    16a4:	81 1c       	adc	r8, r1
    16a6:	91 1c       	adc	r9, r1
    16a8:	1c e1       	ldi	r17, 0x1C	; 28
    16aa:	21 2e       	mov	r2, r17
    16ac:	31 2c       	mov	r3, r1
    16ae:	b8 e3       	ldi	r27, 0x38	; 56
    16b0:	4b 2e       	mov	r4, r27
    16b2:	51 2c       	mov	r5, r1

    setfooter(data);
    int i;
    int retval = 0;
    for(i = 0; i < FRAMECOUNT; i++) {
        if((*data)[i].length[0]) {
    16b4:	d3 01       	movw	r26, r6
    16b6:	18 96       	adiw	r26, 0x08	; 8
    16b8:	8c 91       	ld	r24, X
    16ba:	88 23       	and	r24, r24
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <_Z9makeframePA13_5framecPci+0xbc>
    16be:	85 c0       	rjmp	.+266    	; 0x17ca <_Z9makeframePA13_5framecPci+0x1c6>
            // display_string("\nMAke the string: \n");
            char temp[HEADERLEN + CONTROLLEN + ADDRESSLEN + LENGTHLEN + DATALEN + CHECKSUMLEN + FOOTERLEN + 10] = "";
    16c0:	19 82       	std	Y+1, r1	; 0x01
    16c2:	1a 82       	std	Y+2, r1	; 0x02
    16c4:	1b 82       	std	Y+3, r1	; 0x03
    16c6:	1c 82       	std	Y+4, r1	; 0x04
    16c8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    16ca:	ff 8d       	ldd	r31, Y+31	; 0x1f
    16cc:	89 e1       	ldi	r24, 0x19	; 25
    16ce:	11 92       	st	Z+, r1
    16d0:	8a 95       	dec	r24
    16d2:	e9 f7       	brne	.-6      	; 0x16ce <_Z9makeframePA13_5framecPci+0xca>
            sprintf(temp,"%s%s%s%s%s",(*data)[i].control,(*data)[i].address,(*data)[i].length,(*data)[i].data,(*data)[i].checksum);
    16d4:	ad b7       	in	r26, 0x3d	; 61
    16d6:	be b7       	in	r27, 0x3e	; 62
    16d8:	1e 97       	sbiw	r26, 0x0e	; 14
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	f8 94       	cli
    16de:	be bf       	out	0x3e, r27	; 62
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	ad bf       	out	0x3d, r26	; 61
    16e4:	ed b7       	in	r30, 0x3d	; 61
    16e6:	fe b7       	in	r31, 0x3e	; 62
    16e8:	31 96       	adiw	r30, 0x01	; 1
    16ea:	12 96       	adiw	r26, 0x02	; 2
    16ec:	9c 92       	st	X, r9
    16ee:	8e 92       	st	-X, r8
    16f0:	11 97       	sbiw	r26, 0x01	; 1
    16f2:	81 e7       	ldi	r24, 0x71	; 113
    16f4:	91 e0       	ldi	r25, 0x01	; 1
    16f6:	93 83       	std	Z+3, r25	; 0x03
    16f8:	82 83       	std	Z+2, r24	; 0x02
    16fa:	a2 9c       	mul	r10, r2
    16fc:	c0 01       	movw	r24, r0
    16fe:	a3 9c       	mul	r10, r3
    1700:	90 0d       	add	r25, r0
    1702:	b2 9c       	mul	r11, r2
    1704:	90 0d       	add	r25, r0
    1706:	11 24       	eor	r1, r1
    1708:	01 96       	adiw	r24, 0x01	; 1
    170a:	88 0f       	add	r24, r24
    170c:	99 1f       	adc	r25, r25
    170e:	8c 0d       	add	r24, r12
    1710:	9d 1d       	adc	r25, r13
    1712:	95 83       	std	Z+5, r25	; 0x05
    1714:	84 83       	std	Z+4, r24	; 0x04
    1716:	a4 9c       	mul	r10, r4
    1718:	80 01       	movw	r16, r0
    171a:	a5 9c       	mul	r10, r5
    171c:	10 0d       	add	r17, r0
    171e:	b4 9c       	mul	r11, r4
    1720:	10 0d       	add	r17, r0
    1722:	11 24       	eor	r1, r1
    1724:	c8 01       	movw	r24, r16
    1726:	05 96       	adiw	r24, 0x05	; 5
    1728:	8c 0d       	add	r24, r12
    172a:	9d 1d       	adc	r25, r13
    172c:	97 83       	std	Z+7, r25	; 0x07
    172e:	86 83       	std	Z+6, r24	; 0x06
    1730:	c5 01       	movw	r24, r10
    1732:	73 e0       	ldi	r23, 0x03	; 3
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	7a 95       	dec	r23
    173a:	e1 f7       	brne	.-8      	; 0x1734 <_Z9makeframePA13_5framecPci+0x130>
    173c:	8a 19       	sub	r24, r10
    173e:	9b 09       	sbc	r25, r11
    1740:	01 96       	adiw	r24, 0x01	; 1
    1742:	63 e0       	ldi	r22, 0x03	; 3
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	6a 95       	dec	r22
    174a:	e1 f7       	brne	.-8      	; 0x1744 <_Z9makeframePA13_5framecPci+0x140>
    174c:	8c 0d       	add	r24, r12
    174e:	9d 1d       	adc	r25, r13
    1750:	91 87       	std	Z+9, r25	; 0x09
    1752:	80 87       	std	Z+8, r24	; 0x08
    1754:	c8 01       	movw	r24, r16
    1756:	0a 96       	adiw	r24, 0x0a	; 10
    1758:	8c 0d       	add	r24, r12
    175a:	9d 1d       	adc	r25, r13
    175c:	93 87       	std	Z+11, r25	; 0x0b
    175e:	82 87       	std	Z+10, r24	; 0x0a
    1760:	c8 01       	movw	r24, r16
    1762:	45 96       	adiw	r24, 0x15	; 21
    1764:	8c 0d       	add	r24, r12
    1766:	9d 1d       	adc	r25, r13
    1768:	95 87       	std	Z+13, r25	; 0x0d
    176a:	84 87       	std	Z+12, r24	; 0x0c
    176c:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <sprintf>

            bytestuff(temp, strlen(temp));
    1770:	f4 01       	movw	r30, r8
    1772:	01 90       	ld	r0, Z+
    1774:	00 20       	and	r0, r0
    1776:	e9 f7       	brne	.-6      	; 0x1772 <_Z9makeframePA13_5framecPci+0x16e>
    1778:	31 97       	sbiw	r30, 0x01	; 1
    177a:	e8 19       	sub	r30, r8
    177c:	f9 09       	sbc	r31, r9
    177e:	ad b7       	in	r26, 0x3d	; 61
    1780:	be b7       	in	r27, 0x3e	; 62
    1782:	1e 96       	adiw	r26, 0x0e	; 14
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	be bf       	out	0x3e, r27	; 62
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	ad bf       	out	0x3d, r26	; 61
    178e:	c4 01       	movw	r24, r8
    1790:	bf 01       	movw	r22, r30
    1792:	0e 94 9e 09 	call	0x133c	; 0x133c <_Z9bytestuffPci>

            strcpy((*data)[i].frame, (*data)[i].header);
    1796:	06 5e       	subi	r16, 0xE6	; 230
    1798:	1f 4f       	sbci	r17, 0xFF	; 255
    179a:	76 01       	movw	r14, r12
    179c:	e0 0e       	add	r14, r16
    179e:	f1 1e       	adc	r15, r17
    17a0:	0a 51       	subi	r16, 0x1A	; 26
    17a2:	10 40       	sbci	r17, 0x00	; 0
    17a4:	b6 01       	movw	r22, r12
    17a6:	60 0f       	add	r22, r16
    17a8:	71 1f       	adc	r23, r17
    17aa:	c7 01       	movw	r24, r14
    17ac:	0e 94 30 16 	call	0x2c60	; 0x2c60 <strcpy>
            strcat((*data)[i].frame, temp);
    17b0:	c7 01       	movw	r24, r14
    17b2:	b4 01       	movw	r22, r8
    17b4:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <strcat>
            strcat((*data)[i].frame, (*data)[i].footer);
    17b8:	08 5e       	subi	r16, 0xE8	; 232
    17ba:	1f 4f       	sbci	r17, 0xFF	; 255
    17bc:	0c 0d       	add	r16, r12
    17be:	1d 1d       	adc	r17, r13
    17c0:	c7 01       	movw	r24, r14
    17c2:	b8 01       	movw	r22, r16
    17c4:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <strcat>
    17c8:	95 01       	movw	r18, r10
    setchecksum(data);

    setfooter(data);
    int i;
    int retval = 0;
    for(i = 0; i < FRAMECOUNT; i++) {
    17ca:	08 94       	sec
    17cc:	a1 1c       	adc	r10, r1
    17ce:	b1 1c       	adc	r11, r1
    17d0:	e8 e3       	ldi	r30, 0x38	; 56
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	6e 0e       	add	r6, r30
    17d6:	7f 1e       	adc	r7, r31
    17d8:	fd e0       	ldi	r31, 0x0D	; 13
    17da:	af 16       	cp	r10, r31
    17dc:	b1 04       	cpc	r11, r1
    17de:	09 f0       	breq	.+2      	; 0x17e2 <_Z9makeframePA13_5framecPci+0x1de>
    17e0:	69 cf       	rjmp	.-302    	; 0x16b4 <_Z9makeframePA13_5framecPci+0xb0>
            retval = i;

        }
    }
    return retval;  
}
    17e2:	c9 01       	movw	r24, r18
    17e4:	6f 96       	adiw	r28, 0x1f	; 31
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	cd bf       	out	0x3d, r28	; 61
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	ff 90       	pop	r15
    17fa:	ef 90       	pop	r14
    17fc:	df 90       	pop	r13
    17fe:	cf 90       	pop	r12
    1800:	bf 90       	pop	r11
    1802:	af 90       	pop	r10
    1804:	9f 90       	pop	r9
    1806:	8f 90       	pop	r8
    1808:	7f 90       	pop	r7
    180a:	6f 90       	pop	r6
    180c:	5f 90       	pop	r5
    180e:	4f 90       	pop	r4
    1810:	3f 90       	pop	r3
    1812:	2f 90       	pop	r2
    1814:	08 95       	ret

00001816 <_Z11display_hexlh>:
	char numberstring[5];
  	snprintf(numberstring, 5, "%d", number); //Convert to string so we can display
  	display_string(numberstring);
}

void display_hex(long hex, uint8_t bytes) //Displys 1 to 4 bytes in hex (if you want up to 8, change 'long'to 'long long')
    1816:	8f 92       	push	r8
    1818:	9f 92       	push	r9
    181a:	af 92       	push	r10
    181c:	bf 92       	push	r11
    181e:	cf 92       	push	r12
    1820:	df 92       	push	r13
    1822:	ef 92       	push	r14
    1824:	ff 92       	push	r15
    1826:	0f 93       	push	r16
    1828:	1f 93       	push	r17
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	6b 01       	movw	r12, r22
    1834:	7c 01       	movw	r14, r24
		else
			hexchars[bytes*2-1-i] = temp + 48;
	}
	display_string("0x");
	display_nstring(hexchars, 0, bytes*2);
}
    1836:	8d b6       	in	r8, 0x3d	; 61
    1838:	9e b6       	in	r9, 0x3e	; 62
  	display_string(numberstring);
}

void display_hex(long hex, uint8_t bytes) //Displys 1 to 4 bytes in hex (if you want up to 8, change 'long'to 'long long')
{
	char hexchars[bytes*2];
    183a:	04 2f       	mov	r16, r20
    183c:	10 e0       	ldi	r17, 0x00	; 0
    183e:	00 0f       	add	r16, r16
    1840:	11 1f       	adc	r17, r17
    1842:	8d b7       	in	r24, 0x3d	; 61
    1844:	9e b7       	in	r25, 0x3e	; 62
    1846:	80 1b       	sub	r24, r16
    1848:	91 0b       	sbc	r25, r17
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	f8 94       	cli
    184e:	9e bf       	out	0x3e, r25	; 62
    1850:	0f be       	out	0x3f, r0	; 63
    1852:	8d bf       	out	0x3d, r24	; 61
    1854:	ad b6       	in	r10, 0x3d	; 61
    1856:	be b6       	in	r11, 0x3e	; 62
    1858:	08 94       	sec
    185a:	a1 1c       	adc	r10, r1
    185c:	b1 1c       	adc	r11, r1
    185e:	ed b7       	in	r30, 0x3d	; 61
    1860:	fe b7       	in	r31, 0x3e	; 62
    1862:	e0 0f       	add	r30, r16
    1864:	f1 1f       	adc	r31, r17
    1866:	40 e0       	ldi	r20, 0x00	; 0
    1868:	50 e0       	ldi	r21, 0x00	; 0
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	16 c0       	rjmp	.+44     	; 0x189c <_Z11display_hexlh+0x86>
	for (int i = 0; i < bytes*2; i++)
	{
		uint8_t temp = 0xF & (hex >> (i*4));
    1870:	d7 01       	movw	r26, r14
    1872:	c6 01       	movw	r24, r12
    1874:	02 2e       	mov	r0, r18
    1876:	04 c0       	rjmp	.+8      	; 0x1880 <_Z11display_hexlh+0x6a>
    1878:	b5 95       	asr	r27
    187a:	a7 95       	ror	r26
    187c:	97 95       	ror	r25
    187e:	87 95       	ror	r24
    1880:	0a 94       	dec	r0
    1882:	d2 f7       	brpl	.-12     	; 0x1878 <_Z11display_hexlh+0x62>
    1884:	8f 70       	andi	r24, 0x0F	; 15
		if (temp > 10)
    1886:	8b 30       	cpi	r24, 0x0B	; 11
    1888:	10 f0       	brcs	.+4      	; 0x188e <_Z11display_hexlh+0x78>
			hexchars[bytes*2-1-i] = temp + 87;
    188a:	89 5a       	subi	r24, 0xA9	; 169
    188c:	01 c0       	rjmp	.+2      	; 0x1890 <_Z11display_hexlh+0x7a>
		else
			hexchars[bytes*2-1-i] = temp + 48;
    188e:	80 5d       	subi	r24, 0xD0	; 208
    1890:	80 83       	st	Z, r24
}

void display_hex(long hex, uint8_t bytes) //Displys 1 to 4 bytes in hex (if you want up to 8, change 'long'to 'long long')
{
	char hexchars[bytes*2];
	for (int i = 0; i < bytes*2; i++)
    1892:	4f 5f       	subi	r20, 0xFF	; 255
    1894:	5f 4f       	sbci	r21, 0xFF	; 255
    1896:	31 97       	sbiw	r30, 0x01	; 1
    1898:	2c 5f       	subi	r18, 0xFC	; 252
    189a:	3f 4f       	sbci	r19, 0xFF	; 255
    189c:	40 17       	cp	r20, r16
    189e:	51 07       	cpc	r21, r17
    18a0:	3c f3       	brlt	.-50     	; 0x1870 <_Z11display_hexlh+0x5a>
		if (temp > 10)
			hexchars[bytes*2-1-i] = temp + 87;
		else
			hexchars[bytes*2-1-i] = temp + 48;
	}
	display_string("0x");
    18a2:	8c e7       	ldi	r24, 0x7C	; 124
    18a4:	91 e0       	ldi	r25, 0x01	; 1
    18a6:	0e 94 dd 06 	call	0xdba	; 0xdba <_Z14display_stringPc>
	display_nstring(hexchars, 0, bytes*2);
    18aa:	c5 01       	movw	r24, r10
    18ac:	60 e0       	ldi	r22, 0x00	; 0
    18ae:	40 2f       	mov	r20, r16
    18b0:	0e 94 f0 06 	call	0xde0	; 0xde0 <_Z15display_nstringPchh>
}
    18b4:	0f b6       	in	r0, 0x3f	; 63
    18b6:	f8 94       	cli
    18b8:	9e be       	out	0x3e, r9	; 62
    18ba:	0f be       	out	0x3f, r0	; 63
    18bc:	8d be       	out	0x3d, r8	; 61
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	1f 91       	pop	r17
    18c4:	0f 91       	pop	r16
    18c6:	ff 90       	pop	r15
    18c8:	ef 90       	pop	r14
    18ca:	df 90       	pop	r13
    18cc:	cf 90       	pop	r12
    18ce:	bf 90       	pop	r11
    18d0:	af 90       	pop	r10
    18d2:	9f 90       	pop	r9
    18d4:	8f 90       	pop	r8
    18d6:	08 95       	ret

000018d8 <_Z14display_numberj>:
	uint8_t i;
	for(i=start; i<(start+n); i++) 
		display_char(str[i]);
}

void display_number(uint16_t number) //Displays a number using sprintf. Can display between 0 and 99999
    18d8:	0f 93       	push	r16
    18da:	1f 93       	push	r17
    18dc:	df 93       	push	r29
    18de:	cf 93       	push	r28
    18e0:	00 d0       	rcall	.+0      	; 0x18e2 <_Z14display_numberj+0xa>
    18e2:	00 d0       	rcall	.+0      	; 0x18e4 <_Z14display_numberj+0xc>
    18e4:	0f 92       	push	r0
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
{
	char numberstring[5];
  	snprintf(numberstring, 5, "%d", number); //Convert to string so we can display
    18ea:	2d b7       	in	r18, 0x3d	; 61
    18ec:	3e b7       	in	r19, 0x3e	; 62
    18ee:	28 50       	subi	r18, 0x08	; 8
    18f0:	30 40       	sbci	r19, 0x00	; 0
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	f8 94       	cli
    18f6:	3e bf       	out	0x3e, r19	; 62
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	2d bf       	out	0x3d, r18	; 61
    18fc:	ed b7       	in	r30, 0x3d	; 61
    18fe:	fe b7       	in	r31, 0x3e	; 62
    1900:	31 96       	adiw	r30, 0x01	; 1
    1902:	8e 01       	movw	r16, r28
    1904:	0f 5f       	subi	r16, 0xFF	; 255
    1906:	1f 4f       	sbci	r17, 0xFF	; 255
    1908:	ad b7       	in	r26, 0x3d	; 61
    190a:	be b7       	in	r27, 0x3e	; 62
    190c:	12 96       	adiw	r26, 0x02	; 2
    190e:	1c 93       	st	X, r17
    1910:	0e 93       	st	-X, r16
    1912:	11 97       	sbiw	r26, 0x01	; 1
    1914:	25 e0       	ldi	r18, 0x05	; 5
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	33 83       	std	Z+3, r19	; 0x03
    191a:	22 83       	std	Z+2, r18	; 0x02
    191c:	2f e7       	ldi	r18, 0x7F	; 127
    191e:	31 e0       	ldi	r19, 0x01	; 1
    1920:	35 83       	std	Z+5, r19	; 0x05
    1922:	24 83       	std	Z+4, r18	; 0x04
    1924:	97 83       	std	Z+7, r25	; 0x07
    1926:	86 83       	std	Z+6, r24	; 0x06
    1928:	0e 94 92 16 	call	0x2d24	; 0x2d24 <snprintf>
  	display_string(numberstring);
    192c:	2d b7       	in	r18, 0x3d	; 61
    192e:	3e b7       	in	r19, 0x3e	; 62
    1930:	28 5f       	subi	r18, 0xF8	; 248
    1932:	3f 4f       	sbci	r19, 0xFF	; 255
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	f8 94       	cli
    1938:	3e bf       	out	0x3e, r19	; 62
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	2d bf       	out	0x3d, r18	; 61
    193e:	c8 01       	movw	r24, r16
    1940:	0e 94 dd 06 	call	0xdba	; 0xdba <_Z14display_stringPc>
}
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
    1948:	0f 90       	pop	r0
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	cf 91       	pop	r28
    1950:	df 91       	pop	r29
    1952:	1f 91       	pop	r17
    1954:	0f 91       	pop	r16
    1956:	08 95       	ret

00001958 <_Z13RecievePacketPc>:



    return 0;
}
int RecievePacket(char* Rpacket) {
    1958:	2f 92       	push	r2
    195a:	3f 92       	push	r3
    195c:	4f 92       	push	r4
    195e:	5f 92       	push	r5
    1960:	6f 92       	push	r6
    1962:	7f 92       	push	r7
    1964:	8f 92       	push	r8
    1966:	9f 92       	push	r9
    1968:	af 92       	push	r10
    196a:	bf 92       	push	r11
    196c:	cf 92       	push	r12
    196e:	df 92       	push	r13
    1970:	ef 92       	push	r14
    1972:	ff 92       	push	r15
    1974:	1f 93       	push	r17
    1976:	df 93       	push	r29
    1978:	cf 93       	push	r28
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
    197e:	cc 53       	subi	r28, 0x3C	; 60
    1980:	d3 40       	sbci	r29, 0x03	; 3
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	de bf       	out	0x3e, r29	; 62
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	cd bf       	out	0x3d, r28	; 61
    198c:	cc 24       	eor	r12, r12
    198e:	dd 24       	eor	r13, r13
	//! Inline function to return the rx buffer length field.
	/** \returns The length of the data inside the buffer
	* \see rfm12_rx_status(), rfm12_rx_type(), rfm12_rx_buffer(), rfm12_rx_clear() and rf_rx_buffer_t
	*/
	static inline uint8_t rfm12_rx_len(void) {
		return rf_rx_buffers[ctrl.buffer_out_num].len;
    1990:	5e 01       	movw	r10, r28
    1992:	08 94       	sec
    1994:	a1 1c       	adc	r10, r1
    1996:	b1 1c       	adc	r11, r1
                Rframe[k] = bufptr[k];
            }
            Rframe[rfm12_rx_len()] = '\0';
            rfm12_rx_clear();
            display_string(Rframe);
            strcpy(ackstr, Rframe);
    1998:	93 e3       	ldi	r25, 0x33	; 51
    199a:	89 2e       	mov	r8, r25
    199c:	91 2c       	mov	r9, r1
    199e:	8c 0e       	add	r8, r28
    19a0:	9d 1e       	adc	r9, r29
            int Rframe_check = decode_frame(Nrframe[i], Rframe);
    19a2:	85 e6       	ldi	r24, 0x65	; 101
    19a4:	28 2e       	mov	r2, r24
    19a6:	31 2c       	mov	r3, r1
    19a8:	2c 0e       	add	r2, r28
    19aa:	3d 1e       	adc	r3, r29
    19ac:	18 e3       	ldi	r17, 0x38	; 56
    19ae:	41 2e       	mov	r4, r17
    19b0:	51 2c       	mov	r5, r1
    19b2:	bc ed       	ldi	r27, 0xDC	; 220
    19b4:	6b 2e       	mov	r6, r27
    19b6:	b5 e0       	ldi	r27, 0x05	; 5
    19b8:	7b 2e       	mov	r7, r27
	//! Inline function to return the rx buffer status byte.
	/** \returns STATUS_FREE or STATUS_COMPLETE
	* \see \ref rxtx_states "rx buffer states", rfm12_rx_len(), rfm12_rx_type(), rfm12_rx_buffer(), rfm12_rx_clear() and rf_rx_buffer_t
	*/
	static inline uint8_t rfm12_rx_status(void) {
		return rf_rx_buffers[ctrl.buffer_out_num].status;
    19ba:	20 91 64 02 	lds	r18, 0x0264
    19be:	82 2f       	mov	r24, r18
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	fc 01       	movw	r30, r24
    19c4:	a5 e0       	ldi	r26, 0x05	; 5
    19c6:	ee 0f       	add	r30, r30
    19c8:	ff 1f       	adc	r31, r31
    19ca:	aa 95       	dec	r26
    19cc:	e1 f7       	brne	.-8      	; 0x19c6 <_Z13RecievePacketPc+0x6e>
    19ce:	88 0f       	add	r24, r24
    19d0:	99 1f       	adc	r25, r25
    19d2:	e8 0f       	add	r30, r24
    19d4:	f9 1f       	adc	r31, r25
    19d6:	e5 5e       	subi	r30, 0xE5	; 229
    19d8:	fd 4f       	sbci	r31, 0xFD	; 253
    19da:	80 81       	ld	r24, Z
    struct frame Nrframe[FRAMECOUNT];
    int Received_Final_frame = 0;
    int i = 0;
    while(!Received_Final_frame){
        //int Rframe_len;
        if (rfm12_rx_status() == STATUS_COMPLETE) {
    19dc:	82 30       	cpi	r24, 0x02	; 2
    19de:	69 f7       	brne	.-38     	; 0x19ba <_Z13RecievePacketPc+0x62>
	//! Inline function to return the rx buffer length field.
	/** \returns The length of the data inside the buffer
	* \see rfm12_rx_status(), rfm12_rx_type(), rfm12_rx_buffer(), rfm12_rx_clear() and rf_rx_buffer_t
	*/
	static inline uint8_t rfm12_rx_len(void) {
		return rf_rx_buffers[ctrl.buffer_out_num].len;
    19e0:	82 2f       	mov	r24, r18
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	fc 01       	movw	r30, r24
    19e6:	65 e0       	ldi	r22, 0x05	; 5
    19e8:	ee 0f       	add	r30, r30
    19ea:	ff 1f       	adc	r31, r31
    19ec:	6a 95       	dec	r22
    19ee:	e1 f7       	brne	.-8      	; 0x19e8 <_Z13RecievePacketPc+0x90>
    19f0:	88 0f       	add	r24, r24
    19f2:	99 1f       	adc	r25, r25
    19f4:	e8 0f       	add	r30, r24
    19f6:	f9 1f       	adc	r31, r25
    19f8:	e5 5e       	subi	r30, 0xE5	; 229
    19fa:	fd 4f       	sbci	r31, 0xFD	; 253
    19fc:	31 81       	ldd	r19, Z+1	; 0x01
    19fe:	82 2f       	mov	r24, r18
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	dc 01       	movw	r26, r24
    1a04:	45 e0       	ldi	r20, 0x05	; 5
    1a06:	aa 0f       	add	r26, r26
    1a08:	bb 1f       	adc	r27, r27
    1a0a:	4a 95       	dec	r20
    1a0c:	e1 f7       	brne	.-8      	; 0x1a06 <_Z13RecievePacketPc+0xae>
    1a0e:	88 0f       	add	r24, r24
    1a10:	99 1f       	adc	r25, r25
    1a12:	a8 0f       	add	r26, r24
    1a14:	b9 1f       	adc	r27, r25
    1a16:	a1 5e       	subi	r26, 0xE1	; 225
    1a18:	bd 4f       	sbci	r27, 0xFD	; 253
    1a1a:	f5 01       	movw	r30, r10
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <_Z13RecievePacketPc+0xca>
            bufptr = rfm12_rx_buffer();
            for(uint8_t k = 0; k < (rfm12_rx_len()); k++) {
                Rframe[k] = bufptr[k];
    1a1e:	8d 91       	ld	r24, X+
    1a20:	81 93       	st	Z+, r24
    int i = 0;
    while(!Received_Final_frame){
        //int Rframe_len;
        if (rfm12_rx_status() == STATUS_COMPLETE) {
            bufptr = rfm12_rx_buffer();
            for(uint8_t k = 0; k < (rfm12_rx_len()); k++) {
    1a22:	8e 2f       	mov	r24, r30
    1a24:	8a 19       	sub	r24, r10
    1a26:	83 17       	cp	r24, r19
    1a28:	d0 f3       	brcs	.-12     	; 0x1a1e <_Z13RecievePacketPc+0xc6>
                Rframe[k] = bufptr[k];
            }
            Rframe[rfm12_rx_len()] = '\0';
    1a2a:	f5 01       	movw	r30, r10
    1a2c:	e3 0f       	add	r30, r19
    1a2e:	f1 1d       	adc	r31, r1
    1a30:	10 82       	st	Z, r1
            rfm12_rx_clear();
    1a32:	0e 94 54 10 	call	0x20a8	; 0x20a8 <rfm12_rx_clear>
            display_string(Rframe);
    1a36:	c5 01       	movw	r24, r10
    1a38:	0e 94 dd 06 	call	0xdba	; 0xdba <_Z14display_stringPc>
            strcpy(ackstr, Rframe);
    1a3c:	c4 01       	movw	r24, r8
    1a3e:	b5 01       	movw	r22, r10
    1a40:	0e 94 30 16 	call	0x2c60	; 0x2c60 <strcpy>
            int Rframe_check = decode_frame(Nrframe[i], Rframe);
    1a44:	8d b7       	in	r24, 0x3d	; 61
    1a46:	9e b7       	in	r25, 0x3e	; 62
    1a48:	ca 97       	sbiw	r24, 0x3a	; 58
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	f8 94       	cli
    1a4e:	9e bf       	out	0x3e, r25	; 62
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	8d bf       	out	0x3d, r24	; 61
    1a54:	2d b7       	in	r18, 0x3d	; 61
    1a56:	3e b7       	in	r19, 0x3e	; 62
    1a58:	2f 5f       	subi	r18, 0xFF	; 255
    1a5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a5c:	c4 9c       	mul	r12, r4
    1a5e:	f0 01       	movw	r30, r0
    1a60:	c5 9c       	mul	r12, r5
    1a62:	f0 0d       	add	r31, r0
    1a64:	d4 9c       	mul	r13, r4
    1a66:	f0 0d       	add	r31, r0
    1a68:	11 24       	eor	r1, r1
    1a6a:	d9 01       	movw	r26, r18
    1a6c:	e2 0d       	add	r30, r2
    1a6e:	f3 1d       	adc	r31, r3
    1a70:	88 e3       	ldi	r24, 0x38	; 56
    1a72:	01 90       	ld	r0, Z+
    1a74:	0d 92       	st	X+, r0
    1a76:	81 50       	subi	r24, 0x01	; 1
    1a78:	e1 f7       	brne	.-8      	; 0x1a72 <_Z13RecievePacketPc+0x11a>
    1a7a:	f9 01       	movw	r30, r18
    1a7c:	b1 ae       	std	Z+57, r11	; 0x39
    1a7e:	a0 ae       	std	Z+56, r10	; 0x38
    1a80:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <_Z12decode_frame5framePc>
    1a84:	7c 01       	movw	r14, r24
            display_string("\nRframe_check: ");
    1a86:	8d b7       	in	r24, 0x3d	; 61
    1a88:	9e b7       	in	r25, 0x3e	; 62
    1a8a:	ca 96       	adiw	r24, 0x3a	; 58
    1a8c:	0f b6       	in	r0, 0x3f	; 63
    1a8e:	f8 94       	cli
    1a90:	9e bf       	out	0x3e, r25	; 62
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	8d bf       	out	0x3d, r24	; 61
    1a96:	82 e8       	ldi	r24, 0x82	; 130
    1a98:	91 e0       	ldi	r25, 0x01	; 1
    1a9a:	0e 94 dd 06 	call	0xdba	; 0xdba <_Z14display_stringPc>
            display_number(Rframe_check);
    1a9e:	c7 01       	movw	r24, r14
    1aa0:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <_Z14display_numberj>
            if(Rframe_check & (1<<1)) {
    1aa4:	e1 fe       	sbrs	r14, 1
    1aa6:	1a c0       	rjmp	.+52     	; 0x1adc <_Z13RecievePacketPc+0x184>
                }
                /*
                frame received, frame for me
                acknowledge
                */
                rfm12_tx(strlen(ackstr), 0, (uint8_t*)ackstr);
    1aa8:	f4 01       	movw	r30, r8
    1aaa:	01 90       	ld	r0, Z+
    1aac:	00 20       	and	r0, r0
    1aae:	e9 f7       	brne	.-6      	; 0x1aaa <_Z13RecievePacketPc+0x152>
    1ab0:	31 97       	sbiw	r30, 0x01	; 1
    1ab2:	8e 2f       	mov	r24, r30
    1ab4:	88 19       	sub	r24, r8
    1ab6:	60 e0       	ldi	r22, 0x00	; 0
    1ab8:	a4 01       	movw	r20, r8
    1aba:	0e 94 a5 10 	call	0x214a	; 0x214a <rfm12_tx>
    1abe:	10 e0       	ldi	r17, 0x00	; 0
                for (uint8_t j = 0; j < 100; j++)   
                {   
                    //display_string(". ");
                    rfm12_tick();   
    1ac0:	0e 94 09 10 	call	0x2012	; 0x2012 <rfm12_tick>
    1ac4:	c3 01       	movw	r24, r6
    1ac6:	01 97       	sbiw	r24, 0x01	; 1
    1ac8:	f1 f7       	brne	.-4      	; 0x1ac6 <_Z13RecievePacketPc+0x16e>
                /*
                frame received, frame for me
                acknowledge
                */
                rfm12_tx(strlen(ackstr), 0, (uint8_t*)ackstr);
                for (uint8_t j = 0; j < 100; j++)   
    1aca:	1f 5f       	subi	r17, 0xFF	; 255
    1acc:	14 36       	cpi	r17, 0x64	; 100
    1ace:	c1 f7       	brne	.-16     	; 0x1ac0 <_Z13RecievePacketPc+0x168>
                {   
                    //display_string(". ");
                    rfm12_tick();   
                    _delay_us(500); 
                }
                i++;
    1ad0:	08 94       	sec
    1ad2:	c1 1c       	adc	r12, r1
    1ad4:	d1 1c       	adc	r13, r1
    char Rframe[50], ackstr[50];
    struct frame ack;
    struct frame Nrframe[FRAMECOUNT];
    int Received_Final_frame = 0;
    int i = 0;
    while(!Received_Final_frame){
    1ad6:	e3 fc       	sbrc	r14, 3
    1ad8:	04 c0       	rjmp	.+8      	; 0x1ae2 <_Z13RecievePacketPc+0x18a>
    1ada:	6f cf       	rjmp	.-290    	; 0x19ba <_Z13RecievePacketPc+0x62>
                    _delay_us(500); 
                }
                i++;
                
            }
            else if(!Rframe_check) {
    1adc:	ef 28       	or	r14, r15
    1ade:	09 f4       	brne	.+2      	; 0x1ae2 <_Z13RecievePacketPc+0x18a>
    1ae0:	6c cf       	rjmp	.-296    	; 0x19ba <_Z13RecievePacketPc+0x62>
    //     }
    //     strcat(Rpacket, "\n");
    // }
    return i;

}
    1ae2:	c6 01       	movw	r24, r12
    1ae4:	c4 5c       	subi	r28, 0xC4	; 196
    1ae6:	dc 4f       	sbci	r29, 0xFC	; 252
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	f8 94       	cli
    1aec:	de bf       	out	0x3e, r29	; 62
    1aee:	0f be       	out	0x3f, r0	; 63
    1af0:	cd bf       	out	0x3d, r28	; 61
    1af2:	cf 91       	pop	r28
    1af4:	df 91       	pop	r29
    1af6:	1f 91       	pop	r17
    1af8:	ff 90       	pop	r15
    1afa:	ef 90       	pop	r14
    1afc:	df 90       	pop	r13
    1afe:	cf 90       	pop	r12
    1b00:	bf 90       	pop	r11
    1b02:	af 90       	pop	r10
    1b04:	9f 90       	pop	r9
    1b06:	8f 90       	pop	r8
    1b08:	7f 90       	pop	r7
    1b0a:	6f 90       	pop	r6
    1b0c:	5f 90       	pop	r5
    1b0e:	4f 90       	pop	r4
    1b10:	3f 90       	pop	r3
    1b12:	2f 90       	pop	r2
    1b14:	08 95       	ret

00001b16 <main>:

// char* receiveframe() {
//     return dummy_message;
// }

int main() {
    1b16:	0f 93       	push	r16
    1b18:	1f 93       	push	r17
    1b1a:	df 93       	push	r29
    1b1c:	cf 93       	push	r28
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
    1b22:	c6 59       	subi	r28, 0x96	; 150
    1b24:	d0 40       	sbci	r29, 0x00	; 0
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	de bf       	out	0x3e, r29	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	cd bf       	out	0x3d, r28	; 61
    1b30:	88 ee       	ldi	r24, 0xE8	; 232
    1b32:	93 e0       	ldi	r25, 0x03	; 3
    1b34:	2c e2       	ldi	r18, 0x2C	; 44
    1b36:	31 e0       	ldi	r19, 0x01	; 1
    1b38:	f9 01       	movw	r30, r18
    1b3a:	31 97       	sbiw	r30, 0x01	; 1
    1b3c:	f1 f7       	brne	.-4      	; 0x1b3a <main+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b40:	d9 f7       	brne	.-10     	; 0x1b38 <main+0x22>
    _delay_ms(100);  //little delay for the rfm12 to initialize properly
    rfm12_init();    //init the RFM12
    1b42:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <rfm12_init>
    1b46:	88 ee       	ldi	r24, 0xE8	; 232
    1b48:	93 e0       	ldi	r25, 0x03	; 3
    1b4a:	2c e2       	ldi	r18, 0x2C	; 44
    1b4c:	31 e0       	ldi	r19, 0x01	; 1
    1b4e:	f9 01       	movw	r30, r18
    1b50:	31 97       	sbiw	r30, 0x01	; 1
    1b52:	f1 f7       	brne	.-4      	; 0x1b50 <main+0x3a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b54:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b56:	d9 f7       	brne	.-10     	; 0x1b4e <main+0x38>
    _delay_ms(100);
    init_lcd();
    1b58:	0e 94 36 04 	call	0x86c	; 0x86c <_Z8init_lcdv>

void init_timer()
{
    TCCR1B = _BV(WGM12) //CTC mode

    | _BV(CS11);   /* 8 prescaler */
    1b5c:	8a e0       	ldi	r24, 0x0A	; 10
    1b5e:	80 93 81 00 	sts	0x0081, r24

    OCR1A = 1499; //Want to count up to 1499 to give 1ms period
    1b62:	8b ed       	ldi	r24, 0xDB	; 219
    1b64:	95 e0       	ldi	r25, 0x05	; 5
    1b66:	90 93 89 00 	sts	0x0089, r25
    1b6a:	80 93 88 00 	sts	0x0088, r24

    TIMSK1 |= _BV(OCIE1A); //Set up overflow as interrupt
    1b6e:	80 91 6f 00 	lds	r24, 0x006F
    1b72:	82 60       	ori	r24, 0x02	; 2
    1b74:	80 93 6f 00 	sts	0x006F, r24

    sei();
    1b78:	78 94       	sei
    init_timer();
    sei(); 
    1b7a:	78 94       	sei
    set_orientation(East);
    1b7c:	83 e0       	ldi	r24, 0x03	; 3
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	0e 94 43 04 	call	0x886	; 0x886 <_Z15set_orientation11orientation>
    display_string((char*)"Initialising...\n");
    1b84:	82 e9       	ldi	r24, 0x92	; 146
    1b86:	91 e0       	ldi	r25, 0x01	; 1
    1b88:	0e 94 dd 06 	call	0xdba	; 0xdba <_Z14display_stringPc>
    //     }
    // }
    char Rpacket[150];
    // SendPacket(THISDEVICE, random);
    while(1) {
        if(RecievePacket(Rpacket)) {
    1b8c:	8e 01       	movw	r16, r28
    1b8e:	0f 5f       	subi	r16, 0xFF	; 255
    1b90:	1f 4f       	sbci	r17, 0xFF	; 255
    1b92:	c8 01       	movw	r24, r16
    1b94:	0e 94 ac 0c 	call	0x1958	; 0x1958 <_Z13RecievePacketPc>
    1b98:	89 2b       	or	r24, r25
    1b9a:	d9 f3       	breq	.-10     	; 0x1b92 <main+0x7c>
            display_string("PACKET RECEIVED!!!!!\n");
    1b9c:	83 ea       	ldi	r24, 0xA3	; 163
    1b9e:	91 e0       	ldi	r25, 0x01	; 1
    1ba0:	0e 94 dd 06 	call	0xdba	; 0xdba <_Z14display_stringPc>
            display_string(Rpacket);
    1ba4:	c8 01       	movw	r24, r16
    1ba6:	0e 94 dd 06 	call	0xdba	; 0xdba <_Z14display_stringPc>
    1baa:	f3 cf       	rjmp	.-26     	; 0x1b92 <main+0x7c>

00001bac <_Z10SendPacketcPc>:

int test() {
    return 0;
}

int SendPacket(char dest, char* Spacket) {
    1bac:	2f 92       	push	r2
    1bae:	3f 92       	push	r3
    1bb0:	4f 92       	push	r4
    1bb2:	5f 92       	push	r5
    1bb4:	6f 92       	push	r6
    1bb6:	7f 92       	push	r7
    1bb8:	8f 92       	push	r8
    1bba:	9f 92       	push	r9
    1bbc:	af 92       	push	r10
    1bbe:	bf 92       	push	r11
    1bc0:	cf 92       	push	r12
    1bc2:	df 92       	push	r13
    1bc4:	ef 92       	push	r14
    1bc6:	ff 92       	push	r15
    1bc8:	0f 93       	push	r16
    1bca:	1f 93       	push	r17
    1bcc:	df 93       	push	r29
    1bce:	cf 93       	push	r28
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
    1bd4:	c2 54       	subi	r28, 0x42	; 66
    1bd6:	d3 40       	sbci	r29, 0x03	; 3
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	de bf       	out	0x3e, r29	; 62
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	cd bf       	out	0x3d, r28	; 61
    1be2:	f8 2e       	mov	r15, r24
    1be4:	8b 01       	movw	r16, r22
volatile unsigned long milliseconds;

unsigned long millis()
{
   unsigned long m;
   uint8_t oldSREG = SREG;
    1be6:	2f b7       	in	r18, 0x3f	; 63

   // disable interrupts while we read timer0_millis or we might get an
   // inconsistent value (e.g. in the middle of a write to timer0_millis)
   cli();
    1be8:	f8 94       	cli
   m = milliseconds;
    1bea:	80 91 f4 01 	lds	r24, 0x01F4
    1bee:	90 91 f5 01 	lds	r25, 0x01F5
    1bf2:	a0 91 f6 01 	lds	r26, 0x01F6
    1bf6:	b0 91 f7 01 	lds	r27, 0x01F7
   SREG = oldSREG;
    1bfa:	2f bf       	out	0x3f, r18	; 63
    Packet length = 122  => max 6 frames
    split packet into frames, send frame, await acknowledgement  
    */
    struct frame data[FRAMECOUNT];
    int no_frames;
    display_number(millis());
    1bfc:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <_Z14display_numberj>
    display_char('\n');
    1c00:	8a e0       	ldi	r24, 0x0A	; 10
    1c02:	0e 94 ee 05 	call	0xbdc	; 0xbdc <_Z12display_charc>
    no_frames = makeframe(&data, dest, Spacket, 0);
    1c06:	ce 01       	movw	r24, r28
    1c08:	85 59       	subi	r24, 0x95	; 149
    1c0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c0c:	6f 2d       	mov	r22, r15
    1c0e:	a8 01       	movw	r20, r16
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	0e 94 02 0b 	call	0x1604	; 0x1604 <_Z9makeframePA13_5framecPci>
    1c18:	2c 01       	movw	r4, r24
volatile unsigned long milliseconds;

unsigned long millis()
{
   unsigned long m;
   uint8_t oldSREG = SREG;
    1c1a:	2f b7       	in	r18, 0x3f	; 63

   // disable interrupts while we read timer0_millis or we might get an
   // inconsistent value (e.g. in the middle of a write to timer0_millis)
   cli();
    1c1c:	f8 94       	cli
   m = milliseconds;
    1c1e:	80 91 f4 01 	lds	r24, 0x01F4
    1c22:	90 91 f5 01 	lds	r25, 0x01F5
    1c26:	a0 91 f6 01 	lds	r26, 0x01F6
    1c2a:	b0 91 f7 01 	lds	r27, 0x01F7
   SREG = oldSREG;
    1c2e:	2f bf       	out	0x3f, r18	; 63
    display_number(millis());
    1c30:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <_Z14display_numberj>
    display_char('\n');    
    1c34:	8a e0       	ldi	r24, 0x0A	; 10
    1c36:	0e 94 ee 05 	call	0xbdc	; 0xbdc <_Z12display_charc>
    1c3a:	88 24       	eor	r8, r8
    1c3c:	99 24       	eor	r9, r9
            while((millis() != time)) {
                ///////////check for acknowledgemt/////////////////
                if(rfm12_rx_status() == STATUS_COMPLETE) {
                    //send_complete = 1;
                    bufptr = rfm12_rx_buffer();
                    for(k = 0; k < (rfm12_rx_len()); k++) {
    1c3e:	3e 01       	movw	r6, r28
    1c40:	08 94       	sec
    1c42:	61 1c       	adc	r6, r1
    1c44:	71 1c       	adc	r7, r1
                    rfm12_rx_clear();
                    // display_string("\nRECEIVED: ");
                    // display_string(temp);
                    // display_string("\n\n");
                    ////////////////check if acknowledgemnt valid////////////////
                    if(decode_frame(ack, temp) & (1<<1)) {
    1c46:	13 e3       	ldi	r17, 0x33	; 51
    1c48:	21 2e       	mov	r2, r17
    1c4a:	31 2c       	mov	r3, r1
    1c4c:	2c 0e       	add	r2, r28
    1c4e:	3d 1e       	adc	r3, r29
    1c50:	bd c0       	rjmp	.+378    	; 0x1dcc <_Z10SendPacketcPc+0x220>
    for(i = 0; i < no_frames; i++) {
        send_complete = 0;
        char test[FRAMELEN] = "0123456789012345678901234";
        while(!send_complete) {
            ///////////////////send//////////////////////
            rfm12_tx(strlen(data[i].frame), 0, (uint8_t*)data[i].frame);
    1c52:	28 e3       	ldi	r18, 0x38	; 56
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	82 9e       	mul	r8, r18
    1c58:	70 01       	movw	r14, r0
    1c5a:	83 9e       	mul	r8, r19
    1c5c:	f0 0c       	add	r15, r0
    1c5e:	92 9e       	mul	r9, r18
    1c60:	f0 0c       	add	r15, r0
    1c62:	11 24       	eor	r1, r1
    1c64:	8a e1       	ldi	r24, 0x1A	; 26
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	e8 0e       	add	r14, r24
    1c6a:	f9 1e       	adc	r15, r25
    1c6c:	ab e6       	ldi	r26, 0x6B	; 107
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	ac 0f       	add	r26, r28
    1c72:	bd 1f       	adc	r27, r29
    1c74:	ea 0e       	add	r14, r26
    1c76:	fb 1e       	adc	r15, r27
    1c78:	f7 01       	movw	r30, r14
    1c7a:	01 90       	ld	r0, Z+
    1c7c:	00 20       	and	r0, r0
    1c7e:	e9 f7       	brne	.-6      	; 0x1c7a <_Z10SendPacketcPc+0xce>
    1c80:	31 97       	sbiw	r30, 0x01	; 1
    1c82:	8e 2f       	mov	r24, r30
    1c84:	8e 19       	sub	r24, r14
    1c86:	60 e0       	ldi	r22, 0x00	; 0
    1c88:	a7 01       	movw	r20, r14
    1c8a:	0e 94 a5 10 	call	0x214a	; 0x214a <rfm12_tx>
    1c8e:	00 e0       	ldi	r16, 0x00	; 0
            for (uint8_t j = 0; j < 100; j++)   
            {   
                //display_string(". ");
                rfm12_tick();   
    1c90:	0e 94 09 10 	call	0x2012	; 0x2012 <rfm12_tick>
    1c94:	8c ed       	ldi	r24, 0xDC	; 220
    1c96:	95 e0       	ldi	r25, 0x05	; 5
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <_Z10SendPacketcPc+0xec>
        send_complete = 0;
        char test[FRAMELEN] = "0123456789012345678901234";
        while(!send_complete) {
            ///////////////////send//////////////////////
            rfm12_tx(strlen(data[i].frame), 0, (uint8_t*)data[i].frame);
            for (uint8_t j = 0; j < 100; j++)   
    1c9c:	0f 5f       	subi	r16, 0xFF	; 255
    1c9e:	04 36       	cpi	r16, 0x64	; 100
    1ca0:	b9 f7       	brne	.-18     	; 0x1c90 <_Z10SendPacketcPc+0xe4>
volatile unsigned long milliseconds;

unsigned long millis()
{
   unsigned long m;
   uint8_t oldSREG = SREG;
    1ca2:	8f b7       	in	r24, 0x3f	; 63

   // disable interrupts while we read timer0_millis or we might get an
   // inconsistent value (e.g. in the middle of a write to timer0_millis)
   cli();
    1ca4:	f8 94       	cli
   m = milliseconds;
    1ca6:	a0 90 f4 01 	lds	r10, 0x01F4
    1caa:	b0 90 f5 01 	lds	r11, 0x01F5
    1cae:	c0 90 f6 01 	lds	r12, 0x01F6
    1cb2:	d0 90 f7 01 	lds	r13, 0x01F7
   SREG = oldSREG;
    1cb6:	8f bf       	out	0x3f, r24	; 63
                //display_string(". ");
                rfm12_tick();   
                _delay_us(500); 
            }

            time = millis() + 500;
    1cb8:	84 ef       	ldi	r24, 0xF4	; 244
    1cba:	91 e0       	ldi	r25, 0x01	; 1
    1cbc:	a0 e0       	ldi	r26, 0x00	; 0
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	a8 0e       	add	r10, r24
    1cc2:	b9 1e       	adc	r11, r25
    1cc4:	ca 1e       	adc	r12, r26
    1cc6:	db 1e       	adc	r13, r27
    1cc8:	6d c0       	rjmp	.+218    	; 0x1da4 <_Z10SendPacketcPc+0x1f8>
	//! Inline function to return the rx buffer status byte.
	/** \returns STATUS_FREE or STATUS_COMPLETE
	* \see \ref rxtx_states "rx buffer states", rfm12_rx_len(), rfm12_rx_type(), rfm12_rx_buffer(), rfm12_rx_clear() and rf_rx_buffer_t
	*/
	static inline uint8_t rfm12_rx_status(void) {
		return rf_rx_buffers[ctrl.buffer_out_num].status;
    1cca:	84 2f       	mov	r24, r20
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	fc 01       	movw	r30, r24
    1cd0:	b5 e0       	ldi	r27, 0x05	; 5
    1cd2:	ee 0f       	add	r30, r30
    1cd4:	ff 1f       	adc	r31, r31
    1cd6:	ba 95       	dec	r27
    1cd8:	e1 f7       	brne	.-8      	; 0x1cd2 <_Z10SendPacketcPc+0x126>
    1cda:	88 0f       	add	r24, r24
    1cdc:	99 1f       	adc	r25, r25
    1cde:	e8 0f       	add	r30, r24
    1ce0:	f9 1f       	adc	r31, r25
    1ce2:	e5 5e       	subi	r30, 0xE5	; 229
    1ce4:	fd 4f       	sbci	r31, 0xFD	; 253
    1ce6:	80 81       	ld	r24, Z

            while((millis() != time)) {
                ///////////check for acknowledgemt/////////////////
                if(rfm12_rx_status() == STATUS_COMPLETE) {
    1ce8:	82 30       	cpi	r24, 0x02	; 2
    1cea:	09 f0       	breq	.+2      	; 0x1cee <_Z10SendPacketcPc+0x142>
    1cec:	5d c0       	rjmp	.+186    	; 0x1da8 <_Z10SendPacketcPc+0x1fc>
	//! Inline function to return the rx buffer length field.
	/** \returns The length of the data inside the buffer
	* \see rfm12_rx_status(), rfm12_rx_type(), rfm12_rx_buffer(), rfm12_rx_clear() and rf_rx_buffer_t
	*/
	static inline uint8_t rfm12_rx_len(void) {
		return rf_rx_buffers[ctrl.buffer_out_num].len;
    1cee:	84 2f       	mov	r24, r20
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	fc 01       	movw	r30, r24
    1cf4:	75 e0       	ldi	r23, 0x05	; 5
    1cf6:	ee 0f       	add	r30, r30
    1cf8:	ff 1f       	adc	r31, r31
    1cfa:	7a 95       	dec	r23
    1cfc:	e1 f7       	brne	.-8      	; 0x1cf6 <_Z10SendPacketcPc+0x14a>
    1cfe:	88 0f       	add	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	e8 0f       	add	r30, r24
    1d04:	f9 1f       	adc	r31, r25
    1d06:	e5 5e       	subi	r30, 0xE5	; 229
    1d08:	fd 4f       	sbci	r31, 0xFD	; 253
    1d0a:	81 81       	ldd	r24, Z+1	; 0x01
                    //send_complete = 1;
                    bufptr = rfm12_rx_buffer();
                    for(k = 0; k < (rfm12_rx_len()); k++) {
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	84 2f       	mov	r24, r20
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	dc 01       	movw	r26, r24
    1d16:	55 e0       	ldi	r21, 0x05	; 5
    1d18:	aa 0f       	add	r26, r26
    1d1a:	bb 1f       	adc	r27, r27
    1d1c:	5a 95       	dec	r21
    1d1e:	e1 f7       	brne	.-8      	; 0x1d18 <_Z10SendPacketcPc+0x16c>
    1d20:	88 0f       	add	r24, r24
    1d22:	99 1f       	adc	r25, r25
    1d24:	a8 0f       	add	r26, r24
    1d26:	b9 1f       	adc	r27, r25
    1d28:	a1 5e       	subi	r26, 0xE1	; 225
    1d2a:	bd 4f       	sbci	r27, 0xFD	; 253
    1d2c:	f3 01       	movw	r30, r6
    1d2e:	a3 01       	movw	r20, r6
    1d30:	42 0f       	add	r20, r18
    1d32:	53 1f       	adc	r21, r19
    1d34:	02 c0       	rjmp	.+4      	; 0x1d3a <_Z10SendPacketcPc+0x18e>
                        temp[k] = bufptr[k];
    1d36:	8d 91       	ld	r24, X+
    1d38:	81 93       	st	Z+, r24
            while((millis() != time)) {
                ///////////check for acknowledgemt/////////////////
                if(rfm12_rx_status() == STATUS_COMPLETE) {
                    //send_complete = 1;
                    bufptr = rfm12_rx_buffer();
                    for(k = 0; k < (rfm12_rx_len()); k++) {
    1d3a:	e4 17       	cp	r30, r20
    1d3c:	f5 07       	cpc	r31, r21
    1d3e:	d9 f7       	brne	.-10     	; 0x1d36 <_Z10SendPacketcPc+0x18a>
                        temp[k] = bufptr[k];
                    }
                    temp[rfm12_rx_len()] = '\0';
    1d40:	26 0d       	add	r18, r6
    1d42:	37 1d       	adc	r19, r7
    1d44:	d9 01       	movw	r26, r18
    1d46:	1c 92       	st	X, r1
                    rfm12_rx_clear();
    1d48:	0e 94 54 10 	call	0x20a8	; 0x20a8 <rfm12_rx_clear>
                    // display_string("\nRECEIVED: ");
                    // display_string(temp);
                    // display_string("\n\n");
                    ////////////////check if acknowledgemnt valid////////////////
                    if(decode_frame(ack, temp) & (1<<1)) {
    1d4c:	ed b7       	in	r30, 0x3d	; 61
    1d4e:	fe b7       	in	r31, 0x3e	; 62
    1d50:	fa 97       	sbiw	r30, 0x3a	; 58
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	f8 94       	cli
    1d56:	fe bf       	out	0x3e, r31	; 62
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	ed bf       	out	0x3d, r30	; 61
    1d5c:	2d b7       	in	r18, 0x3d	; 61
    1d5e:	3e b7       	in	r19, 0x3e	; 62
    1d60:	2f 5f       	subi	r18, 0xFF	; 255
    1d62:	3f 4f       	sbci	r19, 0xFF	; 255
    1d64:	d9 01       	movw	r26, r18
    1d66:	f1 01       	movw	r30, r2
    1d68:	88 e3       	ldi	r24, 0x38	; 56
    1d6a:	01 90       	ld	r0, Z+
    1d6c:	0d 92       	st	X+, r0
    1d6e:	81 50       	subi	r24, 0x01	; 1
    1d70:	e1 f7       	brne	.-8      	; 0x1d6a <_Z10SendPacketcPc+0x1be>
    1d72:	d9 01       	movw	r26, r18
    1d74:	d9 96       	adiw	r26, 0x39	; 57
    1d76:	7c 92       	st	X, r7
    1d78:	6e 92       	st	-X, r6
    1d7a:	d8 97       	sbiw	r26, 0x38	; 56
    1d7c:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <_Z12decode_frame5framePc>
    1d80:	ed b7       	in	r30, 0x3d	; 61
    1d82:	fe b7       	in	r31, 0x3e	; 62
    1d84:	fa 96       	adiw	r30, 0x3a	; 58
    1d86:	0f b6       	in	r0, 0x3f	; 63
    1d88:	f8 94       	cli
    1d8a:	fe bf       	out	0x3e, r31	; 62
    1d8c:	0f be       	out	0x3f, r0	; 63
    1d8e:	ed bf       	out	0x3d, r30	; 61
    1d90:	81 ff       	sbrs	r24, 1
    1d92:	08 c0       	rjmp	.+16     	; 0x1da4 <_Z10SendPacketcPc+0x1f8>
                        //if(ack.checksum[0] == data[i].checksum[0] && ack.checksum[1] == data[i].checksum[1]) {
                        display_string("\nSend Complete!\n");
    1d94:	89 eb       	ldi	r24, 0xB9	; 185
    1d96:	91 e0       	ldi	r25, 0x01	; 1
    1d98:	0e 94 dd 06 	call	0xdba	; 0xdba <_Z14display_stringPc>

    int i,k, send_complete;
    struct frame ack;
    unsigned long time;

    for(i = 0; i < no_frames; i++) {
    1d9c:	08 94       	sec
    1d9e:	81 1c       	adc	r8, r1
    1da0:	91 1c       	adc	r9, r1
    1da2:	14 c0       	rjmp	.+40     	; 0x1dcc <_Z10SendPacketcPc+0x220>
	//! Inline function to return the rx buffer status byte.
	/** \returns STATUS_FREE or STATUS_COMPLETE
	* \see \ref rxtx_states "rx buffer states", rfm12_rx_len(), rfm12_rx_type(), rfm12_rx_buffer(), rfm12_rx_clear() and rf_rx_buffer_t
	*/
	static inline uint8_t rfm12_rx_status(void) {
		return rf_rx_buffers[ctrl.buffer_out_num].status;
    1da4:	40 91 64 02 	lds	r20, 0x0264
volatile unsigned long milliseconds;

unsigned long millis()
{
   unsigned long m;
   uint8_t oldSREG = SREG;
    1da8:	2f b7       	in	r18, 0x3f	; 63

   // disable interrupts while we read timer0_millis or we might get an
   // inconsistent value (e.g. in the middle of a write to timer0_millis)
   cli();
    1daa:	f8 94       	cli
   m = milliseconds;
    1dac:	80 91 f4 01 	lds	r24, 0x01F4
    1db0:	90 91 f5 01 	lds	r25, 0x01F5
    1db4:	a0 91 f6 01 	lds	r26, 0x01F6
    1db8:	b0 91 f7 01 	lds	r27, 0x01F7
   SREG = oldSREG;
    1dbc:	2f bf       	out	0x3f, r18	; 63
                _delay_us(500); 
            }

            time = millis() + 500;

            while((millis() != time)) {
    1dbe:	8a 15       	cp	r24, r10
    1dc0:	9b 05       	cpc	r25, r11
    1dc2:	ac 05       	cpc	r26, r12
    1dc4:	bd 05       	cpc	r27, r13
    1dc6:	09 f0       	breq	.+2      	; 0x1dca <_Z10SendPacketcPc+0x21e>
    1dc8:	80 cf       	rjmp	.-256    	; 0x1cca <_Z10SendPacketcPc+0x11e>
    1dca:	20 c0       	rjmp	.+64     	; 0x1e0c <_Z10SendPacketcPc+0x260>

    int i,k, send_complete;
    struct frame ack;
    unsigned long time;

    for(i = 0; i < no_frames; i++) {
    1dcc:	84 14       	cp	r8, r4
    1dce:	95 04       	cpc	r9, r5
    1dd0:	0c f4       	brge	.+2      	; 0x1dd4 <_Z10SendPacketcPc+0x228>
    1dd2:	3f cf       	rjmp	.-386    	; 0x1c52 <_Z10SendPacketcPc+0xa6>




    return 0;
}
    1dd4:	80 e0       	ldi	r24, 0x00	; 0
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	ce 5b       	subi	r28, 0xBE	; 190
    1dda:	dc 4f       	sbci	r29, 0xFC	; 252
    1ddc:	0f b6       	in	r0, 0x3f	; 63
    1dde:	f8 94       	cli
    1de0:	de bf       	out	0x3e, r29	; 62
    1de2:	0f be       	out	0x3f, r0	; 63
    1de4:	cd bf       	out	0x3d, r28	; 61
    1de6:	cf 91       	pop	r28
    1de8:	df 91       	pop	r29
    1dea:	1f 91       	pop	r17
    1dec:	0f 91       	pop	r16
    1dee:	ff 90       	pop	r15
    1df0:	ef 90       	pop	r14
    1df2:	df 90       	pop	r13
    1df4:	cf 90       	pop	r12
    1df6:	bf 90       	pop	r11
    1df8:	af 90       	pop	r10
    1dfa:	9f 90       	pop	r9
    1dfc:	8f 90       	pop	r8
    1dfe:	7f 90       	pop	r7
    1e00:	6f 90       	pop	r6
    1e02:	5f 90       	pop	r5
    1e04:	4f 90       	pop	r4
    1e06:	3f 90       	pop	r3
    1e08:	2f 90       	pop	r2
    1e0a:	08 95       	ret
                    } 
                    
                 }
            }
            if(!send_complete) {
                display_string("\nTIMEOUT\n");
    1e0c:	8a ec       	ldi	r24, 0xCA	; 202
    1e0e:	91 e0       	ldi	r25, 0x01	; 1
    1e10:	0e 94 dd 06 	call	0xdba	; 0xdba <_Z14display_stringPc>
    1e14:	31 cf       	rjmp	.-414    	; 0x1c78 <_Z10SendPacketcPc+0xcc>

00001e16 <_ZL10rfm12_dataj>:


//non-inlined version of rfm12_data
//warning: without the attribute, gcc will inline this even if -Os is set
static void __attribute__ ((noinline)) rfm12_data(uint16_t d) {
	SS_ASSERT();
    1e16:	2c 98       	cbi	0x05, 4	; 5
	#if !(RFM12_SPI_SOFTWARE)
		SPDR = d >> 8;
    1e18:	9e bd       	out	0x2e, r25	; 46
		while (!(SPSR & (1<<SPIF)));
    1e1a:	0d b4       	in	r0, 0x2d	; 45
    1e1c:	07 fe       	sbrs	r0, 7
    1e1e:	fd cf       	rjmp	.-6      	; 0x1e1a <_ZL10rfm12_dataj+0x4>

		SPDR = d & 0xff;
    1e20:	8e bd       	out	0x2e, r24	; 46
		while (!(SPSR & (1<<SPIF)));
    1e22:	0d b4       	in	r0, 0x2d	; 45
    1e24:	07 fe       	sbrs	r0, 7
    1e26:	fd cf       	rjmp	.-6      	; 0x1e22 <_ZL10rfm12_dataj+0xc>
	#else
		spi_data(d >> 8);
		spi_data(d & 0xff);
	#endif
	SS_RELEASE();
    1e28:	2c 9a       	sbi	0x05, 4	; 5
}
    1e2a:	08 95       	ret

00001e2c <_ZL10rfm12_readj>:

//non-inlined version of rfm12_read
//warning: without the attribute, gcc will inline this even if -Os is set
static uint16_t __attribute__ ((noinline)) rfm12_read(uint16_t c) {
	uint16_t retval;
	SS_ASSERT();
    1e2c:	2c 98       	cbi	0x05, 4	; 5

	#if !(RFM12_SPI_SOFTWARE)
		SPDR = c >> 8;
    1e2e:	9e bd       	out	0x2e, r25	; 46
		while (!(SPSR & (1<<SPIF)));
    1e30:	0d b4       	in	r0, 0x2d	; 45
    1e32:	07 fe       	sbrs	r0, 7
    1e34:	fd cf       	rjmp	.-6      	; 0x1e30 <_ZL10rfm12_readj+0x4>
		retval = SPDR << 8;
    1e36:	3e b5       	in	r19, 0x2e	; 46
		SPDR = c & 0xff;
    1e38:	8e bd       	out	0x2e, r24	; 46
		while (!(SPSR & (1<<SPIF)));
    1e3a:	0d b4       	in	r0, 0x2d	; 45
    1e3c:	07 fe       	sbrs	r0, 7
    1e3e:	fd cf       	rjmp	.-6      	; 0x1e3a <_ZL10rfm12_readj+0xe>
		retval |= SPDR;
    1e40:	2e b5       	in	r18, 0x2e	; 46
	SS_ASSERT();

	#if !(RFM12_SPI_SOFTWARE)
		SPDR = c >> 8;
		while (!(SPSR & (1<<SPIF)));
		retval = SPDR << 8;
    1e42:	93 2f       	mov	r25, r19
    1e44:	80 e0       	ldi	r24, 0x00	; 0
	#else
		retval = spi_data(c >> 8);
		retval <<= 8;
		retval |= spi_data(c & 0xff);
	#endif
	SS_RELEASE();
    1e46:	2c 9a       	sbi	0x05, 4	; 5
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	28 2b       	or	r18, r24
    1e4c:	39 2b       	or	r19, r25
	return retval;
}
    1e4e:	c9 01       	movw	r24, r18
    1e50:	08 95       	ret

00001e52 <__vector_3>:
*/
//if polling is used, do not define an interrupt handler, but a polling function
#if (RFM12_USE_POLLING)
void rfm12_poll(void)
#else
ISR(RFM12_INT_VECT, ISR_NOBLOCK)
    1e52:	78 94       	sei
    1e54:	1f 92       	push	r1
    1e56:	0f 92       	push	r0
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	0f 92       	push	r0
    1e5c:	11 24       	eor	r1, r1
    1e5e:	cf 92       	push	r12
    1e60:	df 92       	push	r13
    1e62:	ef 92       	push	r14
    1e64:	ff 92       	push	r15
    1e66:	0f 93       	push	r16
    1e68:	1f 93       	push	r17
    1e6a:	2f 93       	push	r18
    1e6c:	3f 93       	push	r19
    1e6e:	4f 93       	push	r20
    1e70:	5f 93       	push	r21
    1e72:	6f 93       	push	r22
    1e74:	7f 93       	push	r23
    1e76:	8f 93       	push	r24
    1e78:	9f 93       	push	r25
    1e7a:	af 93       	push	r26
    1e7c:	bf 93       	push	r27
    1e7e:	ef 93       	push	r30
    1e80:	ff 93       	push	r31
#endif
{
	RFM12_INT_OFF();
    1e82:	ea 98       	cbi	0x1d, 2	; 29
    1e84:	00 91 65 02 	lds	r16, 0x0265
	#endif /* !(RFM12_TRANSMIT_ONLY) */

	do {
		//clear AVR int flag
#ifdef __PLATFORM_AVR__
		RFM12_INT_FLAG = (1<<RFM12_FLAG_BIT);
    1e88:	84 e0       	ldi	r24, 0x04	; 4
    1e8a:	c8 2e       	mov	r12, r24
						#if RFM12_UART_DEBUG >= 2
							uart_putc('D');
						#endif

						//indicate that the buffer is ready to be used
						rf_rx_buffers[ctrl.buffer_in_num].status = STATUS_COMPLETE;
    1e8c:	12 e0       	ldi	r17, 0x02	; 2
    1e8e:	d1 2e       	mov	r13, r17
							checksum ^= data;

							//put next byte into buffer, if there is enough space
							if (ctrl.bytecount < (RFM12_RX_BUFFER_SIZE + 3)) {
								//hackhack: begin writing to struct at offsetof len
								(& rf_rx_buffers[ctrl.buffer_in_num].len)[ctrl.bytecount] = data;
    1e90:	b2 e2       	ldi	r27, 0x22	; 34
    1e92:	eb 2e       	mov	r14, r27
					//if receive mode is not disabled (default)
					#if !(RFM12_TRANSMIT_ONLY)
						uint8_t data;

						//init the bytecounter - remember, we will read the length byte, so this must be 1
						ctrl.bytecount = 1;
    1e94:	ff 24       	eor	r15, r15
    1e96:	f3 94       	inc	r15
	#endif /* !(RFM12_TRANSMIT_ONLY) */

	do {
		//clear AVR int flag
#ifdef __PLATFORM_AVR__
		RFM12_INT_FLAG = (1<<RFM12_FLAG_BIT);
    1e98:	cc ba       	out	0x1c, r12	; 28
/* @description reads the upper 8 bits of the status
 * register (the interrupt flags)
 */
static uint8_t rfm12_read_int_flags_inline(void) {
	#if !(RFM12_SPI_SOFTWARE)
		SS_ASSERT();
    1e9a:	2c 98       	cbi	0x05, 4	; 5
		SPDR = 0;
    1e9c:	1e bc       	out	0x2e, r1	; 46
		while (!(SPSR & (1<<SPIF)));
    1e9e:	0d b4       	in	r0, 0x2d	; 45
    1ea0:	07 fe       	sbrs	r0, 7
    1ea2:	fd cf       	rjmp	.-6      	; 0x1e9e <__vector_3+0x4c>
		SS_RELEASE();
    1ea4:	2c 9a       	sbi	0x05, 4	; 5
				rfm12_data(ctrl.pwrmgt_shadow);
			}
		#endif /* RFM12_USE_WAKEUP_TIMER */

		//check if the fifo interrupt occurred
		if (status & (RFM12_STATUS_FFIT>>8)) {
    1ea6:	0e b4       	in	r0, 0x2e	; 46
    1ea8:	07 fe       	sbrs	r0, 7
    1eaa:	99 c0       	rjmp	.+306    	; 0x1fde <__vector_3+0x18c>
			//yes
			recheck_interrupt = 1;
			//see what we have to do (start rx, rx or tx)
			switch (ctrl.rfm12_state) {
    1eac:	10 91 5f 02 	lds	r17, 0x025F
    1eb0:	11 30       	cpi	r17, 0x01	; 1
    1eb2:	b9 f1       	breq	.+110    	; 0x1f22 <__vector_3+0xd0>
    1eb4:	11 30       	cpi	r17, 0x01	; 1
    1eb6:	20 f0       	brcs	.+8      	; 0x1ec0 <__vector_3+0x6e>
    1eb8:	12 30       	cpi	r17, 0x02	; 2
    1eba:	09 f0       	breq	.+2      	; 0x1ebe <__vector_3+0x6c>
    1ebc:	85 c0       	rjmp	.+266    	; 0x1fc8 <__vector_3+0x176>
    1ebe:	69 c0       	rjmp	.+210    	; 0x1f92 <__vector_3+0x140>
					//if receive mode is not disabled (default)
					#if !(RFM12_TRANSMIT_ONLY)
						uint8_t data;

						//init the bytecounter - remember, we will read the length byte, so this must be 1
						ctrl.bytecount = 1;
    1ec0:	f0 92 62 02 	sts	0x0262, r15

						//read the length byte,  and write it to the checksum
						//remember, the first byte is the length byte
						data = rfm12_read(RFM12_CMD_READ);
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	90 eb       	ldi	r25, 0xB0	; 176
    1ec8:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <_ZL10rfm12_readj>
    1ecc:	08 2f       	mov	r16, r24
						checksum = data;

						//add the packet overhead and store it into a working variable
						ctrl.num_bytes = data + PACKET_OVERHEAD;
    1ece:	0d 5f       	subi	r16, 0xFD	; 253
    1ed0:	00 93 61 02 	sts	0x0261, r16
    1ed4:	03 50       	subi	r16, 0x03	; 3
							uart_putc(data);
						#endif

						//see whether our buffer is free
						//FIXME: put this into global statekeeping struct, the free state can be set by the function which pulls the packet, i guess
						if (rf_rx_buffers[ctrl.buffer_in_num].status == STATUS_FREE) {
    1ed6:	20 91 63 02 	lds	r18, 0x0263
    1eda:	82 2f       	mov	r24, r18
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	fc 01       	movw	r30, r24
    1ee0:	a5 e0       	ldi	r26, 0x05	; 5
    1ee2:	ee 0f       	add	r30, r30
    1ee4:	ff 1f       	adc	r31, r31
    1ee6:	aa 95       	dec	r26
    1ee8:	e1 f7       	brne	.-8      	; 0x1ee2 <__vector_3+0x90>
    1eea:	88 0f       	add	r24, r24
    1eec:	99 1f       	adc	r25, r25
    1eee:	e8 0f       	add	r30, r24
    1ef0:	f9 1f       	adc	r31, r25
    1ef2:	e5 5e       	subi	r30, 0xE5	; 229
    1ef4:	fd 4f       	sbci	r31, 0xFD	; 253
    1ef6:	80 81       	ld	r24, Z
    1ef8:	88 23       	and	r24, r24
    1efa:	09 f0       	breq	.+2      	; 0x1efe <__vector_3+0xac>
    1efc:	65 c0       	rjmp	.+202    	; 0x1fc8 <__vector_3+0x176>
							//the current receive buffer is empty, so we start receiving
							ctrl.rfm12_state = STATE_RX_ACTIVE;
    1efe:	f0 92 5f 02 	sts	0x025F, r15

							//store the received length into the packet buffer
							//this length field will be used by application reading the
							//buffer.
							rf_rx_buffers[ctrl.buffer_in_num].len = data;
    1f02:	82 2f       	mov	r24, r18
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	fc 01       	movw	r30, r24
    1f08:	65 e0       	ldi	r22, 0x05	; 5
    1f0a:	ee 0f       	add	r30, r30
    1f0c:	ff 1f       	adc	r31, r31
    1f0e:	6a 95       	dec	r22
    1f10:	e1 f7       	brne	.-8      	; 0x1f0a <__vector_3+0xb8>
    1f12:	88 0f       	add	r24, r24
    1f14:	99 1f       	adc	r25, r25
    1f16:	e8 0f       	add	r30, r24
    1f18:	f9 1f       	adc	r31, r25
    1f1a:	e5 5e       	subi	r30, 0xE5	; 229
    1f1c:	fd 4f       	sbci	r31, 0xFD	; 253
    1f1e:	01 83       	std	Z+1, r16	; 0x01
    1f20:	bb cf       	rjmp	.-138    	; 0x1e98 <__vector_3+0x46>
				case STATE_RX_ACTIVE: {
					//if receive mode is not disabled (default)
					#if !(RFM12_TRANSMIT_ONLY)
						uint8_t data;
						//read a byte
						data = rfm12_read(RFM12_CMD_READ);
    1f22:	80 e0       	ldi	r24, 0x00	; 0
    1f24:	90 eb       	ldi	r25, 0xB0	; 176
    1f26:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <_ZL10rfm12_readj>
    1f2a:	28 2f       	mov	r18, r24

						//check if transmission is complete
						if (ctrl.bytecount < ctrl.num_bytes) {
    1f2c:	90 91 62 02 	lds	r25, 0x0262
    1f30:	80 91 61 02 	lds	r24, 0x0261
    1f34:	98 17       	cp	r25, r24
    1f36:	c0 f4       	brcc	.+48     	; 0x1f68 <__vector_3+0x116>
								uart_putc(data);
							#endif

							//xor the remaining bytes onto the checksum
							//note: only the header will be effectively checked
							checksum ^= data;
    1f38:	02 27       	eor	r16, r18

							//put next byte into buffer, if there is enough space
							if (ctrl.bytecount < (RFM12_RX_BUFFER_SIZE + 3)) {
    1f3a:	91 32       	cpi	r25, 0x21	; 33
    1f3c:	58 f4       	brcc	.+22     	; 0x1f54 <__vector_3+0x102>
								//hackhack: begin writing to struct at offsetof len
								(& rf_rx_buffers[ctrl.buffer_in_num].len)[ctrl.bytecount] = data;
    1f3e:	e0 91 63 02 	lds	r30, 0x0263
    1f42:	ee 9d       	mul	r30, r14
    1f44:	f0 01       	movw	r30, r0
    1f46:	11 24       	eor	r1, r1
    1f48:	31 96       	adiw	r30, 0x01	; 1
    1f4a:	e9 0f       	add	r30, r25
    1f4c:	f1 1d       	adc	r31, r1
    1f4e:	e5 5e       	subi	r30, 0xE5	; 229
    1f50:	fd 4f       	sbci	r31, 0xFD	; 253
    1f52:	20 83       	st	Z, r18
							}
#ifndef DISABLE_CHECKSUMM
							//check header against checksum
							if (ctrl.bytecount == 2 && checksum != 0xff) {
    1f54:	80 91 62 02 	lds	r24, 0x0262
    1f58:	82 30       	cpi	r24, 0x02	; 2
    1f5a:	11 f4       	brne	.+4      	; 0x1f60 <__vector_3+0x10e>
    1f5c:	0f 3f       	cpi	r16, 0xFF	; 255
    1f5e:	a1 f5       	brne	.+104    	; 0x1fc8 <__vector_3+0x176>
								break;
							}
#endif

							//increment bytecount
							ctrl.bytecount++;
    1f60:	8f 5f       	subi	r24, 0xFF	; 255
    1f62:	80 93 62 02 	sts	0x0262, r24
    1f66:	98 cf       	rjmp	.-208    	; 0x1e98 <__vector_3+0x46>
						#if RFM12_UART_DEBUG >= 2
							uart_putc('D');
						#endif

						//indicate that the buffer is ready to be used
						rf_rx_buffers[ctrl.buffer_in_num].status = STATUS_COMPLETE;
    1f68:	80 91 63 02 	lds	r24, 0x0263
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	f9 01       	movw	r30, r18
    1f72:	45 e0       	ldi	r20, 0x05	; 5
    1f74:	ee 0f       	add	r30, r30
    1f76:	ff 1f       	adc	r31, r31
    1f78:	4a 95       	dec	r20
    1f7a:	e1 f7       	brne	.-8      	; 0x1f74 <__vector_3+0x122>
    1f7c:	22 0f       	add	r18, r18
    1f7e:	33 1f       	adc	r19, r19
    1f80:	e2 0f       	add	r30, r18
    1f82:	f3 1f       	adc	r31, r19
    1f84:	e5 5e       	subi	r30, 0xE5	; 229
    1f86:	fd 4f       	sbci	r31, 0xFD	; 253
    1f88:	d0 82       	st	Z, r13
								rfm12_rx_callback_func (ctrl.rf_buffer_in->len, ctrl.rf_buffer_in.buffer);
							}
						#endif

						//switch to other buffer
						ctrl.buffer_in_num ^= 1;
    1f8a:	81 27       	eor	r24, r17
    1f8c:	80 93 63 02 	sts	0x0263, r24
    1f90:	1b c0       	rjmp	.+54     	; 0x1fc8 <__vector_3+0x176>
					//debug
					#if RFM12_UART_DEBUG >= 2
						uart_putc('T');
					#endif

					if (ctrl.bytecount < ctrl.num_bytes) {
    1f92:	20 91 62 02 	lds	r18, 0x0262
    1f96:	80 91 61 02 	lds	r24, 0x0261
    1f9a:	28 17       	cp	r18, r24
    1f9c:	58 f4       	brcc	.+22     	; 0x1fb4 <__vector_3+0x162>
						//load the next byte from our buffer struct.
						rfm12_data( RFM12_CMD_TX | rf_tx_buffer.sync[ctrl.bytecount++]);
    1f9e:	e2 2f       	mov	r30, r18
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	e8 50       	subi	r30, 0x08	; 8
    1fa4:	fe 4f       	sbci	r31, 0xFE	; 254
    1fa6:	80 81       	ld	r24, Z
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	2f 5f       	subi	r18, 0xFF	; 255
    1fac:	20 93 62 02 	sts	0x0262, r18
    1fb0:	98 6b       	ori	r25, 0xB8	; 184
    1fb2:	12 c0       	rjmp	.+36     	; 0x1fd8 <__vector_3+0x186>
					#ifdef TX_LEAVE_HOOK
						TX_LEAVE_HOOK;
					#endif

					//flag the buffer as free again
					ctrl.txstate = STATUS_FREE;
    1fb4:	10 92 60 02 	sts	0x0260, r1
					#if RFM12_PWRMGT_SHADOW
						ctrl.pwrmgt_shadow &= ~(RFM12_PWRMGT_ET); /* disable transmitter */
						ctrl.pwrmgt_shadow |= (PWRMGT_RECEIVE);   /* activate predefined receive mode */
						rfm12_data(ctrl.pwrmgt_shadow);
					#else /* no RFM12_PWRMGT_SHADOW */
						rfm12_data( PWRMGT_RECEIVE );
    1fb8:	81 e8       	ldi	r24, 0x81	; 129
    1fba:	92 e8       	ldi	r25, 0x82	; 130
    1fbc:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <_ZL10rfm12_dataj>
					#ifdef RX_ENTER_HOOK
						RX_ENTER_HOOK;
					#endif

					//load a dummy byte to clear int status
					rfm12_data( RFM12_CMD_TX | 0xaa);
    1fc0:	8a ea       	ldi	r24, 0xAA	; 170
    1fc2:	98 eb       	ldi	r25, 0xB8	; 184
    1fc4:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <_ZL10rfm12_dataj>
							break;
					#endif
			}//end of switch

			//set the state machine to idle
			ctrl.rfm12_state = STATE_RX_IDLE;
    1fc8:	10 92 5f 02 	sts	0x025F, r1
			//reset the receiver fifo, if receive mode is not disabled (default)
			#if !(RFM12_TRANSMIT_ONLY)
				#if RFM12_UART_DEBUG >= 2
					uart_putc('F');
				#endif
				rfm12_data( RFM12_CMD_FIFORESET | CLEAR_FIFO_INLINE);
    1fcc:	81 e8       	ldi	r24, 0x81	; 129
    1fce:	9a ec       	ldi	r25, 0xCA	; 202
    1fd0:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <_ZL10rfm12_dataj>
				rfm12_data( RFM12_CMD_FIFORESET | ACCEPT_DATA_INLINE);
    1fd4:	83 e8       	ldi	r24, 0x83	; 131
    1fd6:	9a ec       	ldi	r25, 0xCA	; 202
    1fd8:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <_ZL10rfm12_dataj>
    1fdc:	5d cf       	rjmp	.-326    	; 0x1e98 <__vector_3+0x46>
    1fde:	00 93 65 02 	sts	0x0265, r16
	#if RFM12_UART_DEBUG >= 2
		uart_putc('E');
	#endif

	//turn the int back on
	RFM12_INT_ON();
    1fe2:	ea 9a       	sbi	0x1d, 2	; 29
}
    1fe4:	ff 91       	pop	r31
    1fe6:	ef 91       	pop	r30
    1fe8:	bf 91       	pop	r27
    1fea:	af 91       	pop	r26
    1fec:	9f 91       	pop	r25
    1fee:	8f 91       	pop	r24
    1ff0:	7f 91       	pop	r23
    1ff2:	6f 91       	pop	r22
    1ff4:	5f 91       	pop	r21
    1ff6:	4f 91       	pop	r20
    1ff8:	3f 91       	pop	r19
    1ffa:	2f 91       	pop	r18
    1ffc:	1f 91       	pop	r17
    1ffe:	0f 91       	pop	r16
    2000:	ff 90       	pop	r15
    2002:	ef 90       	pop	r14
    2004:	df 90       	pop	r13
    2006:	cf 90       	pop	r12
    2008:	0f 90       	pop	r0
    200a:	0f be       	out	0x3f, r0	; 63
    200c:	0f 90       	pop	r0
    200e:	1f 90       	pop	r1
    2010:	18 95       	reti

00002012 <rfm12_tick>:
			puts ("\r\n");
			oldstate = state;
		}
	#endif
	//don't disturb RFM12 if transmitting or receiving
	if (ctrl.rfm12_state != STATE_RX_IDLE) {
    2012:	80 91 5f 02 	lds	r24, 0x025F
    2016:	88 23       	and	r24, r24
    2018:	91 f5       	brne	.+100    	; 0x207e <rfm12_tick+0x6c>
	#if !(RFM12_NOCOLLISIONDETECTION)
		//disable the interrupt (as we're working directly with the transceiver now)
		//hint: we could be losing an interrupt here, because we read the status register.
		//this applys for the Wakeup timer, as it's flag is reset by reading.
		//printf("t");
		RFM12_INT_OFF();
    201a:	ea 98       	cbi	0x1d, 2	; 29
		status = rfm12_read(RFM12_CMD_STATUS);
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <_ZL10rfm12_readj>
		RFM12_INT_ON();
    2024:	ea 9a       	sbi	0x1d, 2	; 29
				RFM12_INT_ON();
			}
		#endif /* RFM12_USE_WAKEUP_TIMER */

		//check if we see a carrier
		if (status & RFM12_STATUS_RSSI) {
    2026:	90 ff       	sbrs	r25, 0
    2028:	02 c0       	rjmp	.+4      	; 0x202e <rfm12_tick+0x1c>
			//yes: reset free counter and return
			//puts("yes");
		//	printf("%u\n", status & RFM12_STATUS_RSSI);
			channel_free_count = CHANNEL_FREE_TIME;
    202a:	88 ec       	ldi	r24, 0xC8	; 200
    202c:	05 c0       	rjmp	.+10     	; 0x2038 <rfm12_tick+0x26>
			return;
		}
		//no

		//is the channel free long enough ?
		if (channel_free_count != 0) {
    202e:	80 91 e2 01 	lds	r24, 0x01E2
    2032:	88 23       	and	r24, r24
    2034:	21 f0       	breq	.+8      	; 0x203e <rfm12_tick+0x2c>
			//no:
			channel_free_count--; // decrement counter
    2036:	81 50       	subi	r24, 0x01	; 1
    2038:	80 93 e2 01 	sts	0x01E2, r24
    203c:	08 95       	ret
	//	puts("trans");
		//yes: we can begin transmitting
	#endif
	//puts("trans");
	//do we have something to transmit?
	if (ctrl.txstate == STATUS_OCCUPIED) { //yes: start transmitting
    203e:	80 91 60 02 	lds	r24, 0x0260
    2042:	81 30       	cpi	r24, 0x01	; 1
    2044:	e1 f4       	brne	.+56     	; 0x207e <rfm12_tick+0x6c>
		//we won't loose interrupts, as the AVR caches them in the int flag.
		//we could disturb an ongoing reception,
		//if it has just started some cpu cycles ago
		//(as the check for this case is some lines (cpu cycles) above)
		//anyhow, we MUST transmit at some point...
		RFM12_INT_OFF();
    2046:	ea 98       	cbi	0x1d, 2	; 29

		#if RFM12_PWRMGT_SHADOW
			ctrl.pwrmgt_shadow &= ~(RFM12_PWRMGT_ER); /* disable receiver */
			rfm12_data(ctrl.pwrmgt_shadow);
		#else
			rfm12_data(RFM12_CMD_PWRMGT | PWRMGT_DEFAULT ); /* disable receiver */
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	92 e8       	ldi	r25, 0x82	; 130
    204c:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <_ZL10rfm12_dataj>
			RX_LEAVE_HOOK;
		#endif

		//calculate number of bytes to be sent by ISR
		//2 sync bytes + len byte + type byte + checksum + message length + 1 dummy byte
		ctrl.num_bytes = rf_tx_buffer.len + 6;
    2050:	80 91 fa 01 	lds	r24, 0x01FA
    2054:	8a 5f       	subi	r24, 0xFA	; 250
    2056:	80 93 61 02 	sts	0x0261, r24

		//reset byte sent counter
		ctrl.bytecount = 0;
    205a:	10 92 62 02 	sts	0x0262, r1

		//set mode for interrupt handler
		ctrl.rfm12_state = STATE_TX;
    205e:	82 e0       	ldi	r24, 0x02	; 2
    2060:	80 93 5f 02 	sts	0x025F, r24
		#endif

		//fill 2byte 0xAA preamble into data register
		//the preamble helps the receivers AFC circuit to lock onto the exact frequency
		//(hint: the tx FIFO [if el is enabled] is two staged, so we can safely write 2 bytes before starting)
		rfm12_data(RFM12_CMD_TX | PREAMBLE);
    2064:	8a ea       	ldi	r24, 0xAA	; 170
    2066:	98 eb       	ldi	r25, 0xB8	; 184
    2068:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <_ZL10rfm12_dataj>
		rfm12_data(RFM12_CMD_TX | PREAMBLE);
    206c:	8a ea       	ldi	r24, 0xAA	; 170
    206e:	98 eb       	ldi	r25, 0xB8	; 184
    2070:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <_ZL10rfm12_dataj>
		//set ET in power register to enable transmission (hint: TX starts now)
		#if RFM12_PWRMGT_SHADOW
			ctrl.pwrmgt_shadow |= RFM12_PWRMGT_ET;
			rfm12_data (ctrl.pwrmgt_shadow);
		#else
			rfm12_data(RFM12_CMD_PWRMGT | PWRMGT_DEFAULT | RFM12_PWRMGT_ET);
    2074:	81 e2       	ldi	r24, 0x21	; 33
    2076:	92 e8       	ldi	r25, 0x82	; 130
    2078:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <_ZL10rfm12_dataj>
		#endif

		//enable the interrupt to continue the transmission
		RFM12_INT_ON();
    207c:	ea 9a       	sbi	0x1d, 2	; 29
    207e:	08 95       	ret

00002080 <rfm12_start_tx>:
#if (RFM12_NORETURNS)
void
#else
uint8_t
#endif
rfm12_start_tx(uint8_t type, uint8_t length) {
    2080:	98 2f       	mov	r25, r24
	//exit if the buffer isn't free
	if (ctrl.txstate != STATUS_FREE)
    2082:	80 91 60 02 	lds	r24, 0x0260
    2086:	88 23       	and	r24, r24
    2088:	11 f0       	breq	.+4      	; 0x208e <rfm12_start_tx+0xe>
    208a:	83 e0       	ldi	r24, 0x03	; 3
    208c:	08 95       	ret
		return TXRETURN(RFM12_TX_OCCUPIED);

	//write airlab header to buffer
	rf_tx_buffer.len = length;
    208e:	60 93 fa 01 	sts	0x01FA, r22
	rf_tx_buffer.type = type;
    2092:	90 93 fb 01 	sts	0x01FB, r25
	rf_tx_buffer.checksum = length ^ type ^ 0xff;
    2096:	69 27       	eor	r22, r25
    2098:	60 95       	com	r22
    209a:	60 93 fc 01 	sts	0x01FC, r22

	//schedule packet for transmission
	ctrl.txstate = STATUS_OCCUPIED;
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	80 93 60 02 	sts	0x0260, r24
    20a4:	80 e8       	ldi	r24, 0x80	; 128

	return TXRETURN(RFM12_TX_ENQUEUED);
}
    20a6:	08 95       	ret

000020a8 <rfm12_rx_clear>:
	* \see rfm12_rx_status(), rfm12_rx_len(), rfm12_rx_type(), rfm12_rx_buffer() and rf_rx_buffers
	*/
	//warning: without the attribute, gcc will inline this even if -Os is set
	void __attribute__((noinline)) rfm12_rx_clear(void) {
			//mark the current buffer as empty
			rf_rx_buffers[ctrl.buffer_out_num].status = STATUS_FREE;
    20a8:	20 91 64 02 	lds	r18, 0x0264
    20ac:	82 2f       	mov	r24, r18
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	fc 01       	movw	r30, r24
    20b2:	45 e0       	ldi	r20, 0x05	; 5
    20b4:	ee 0f       	add	r30, r30
    20b6:	ff 1f       	adc	r31, r31
    20b8:	4a 95       	dec	r20
    20ba:	e1 f7       	brne	.-8      	; 0x20b4 <rfm12_rx_clear+0xc>
    20bc:	88 0f       	add	r24, r24
    20be:	99 1f       	adc	r25, r25
    20c0:	e8 0f       	add	r30, r24
    20c2:	f9 1f       	adc	r31, r25
    20c4:	e5 5e       	subi	r30, 0xE5	; 229
    20c6:	fd 4f       	sbci	r31, 0xFD	; 253
    20c8:	10 82       	st	Z, r1

			//switch to the other buffer
			ctrl.buffer_out_num ^= 1;
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	28 27       	eor	r18, r24
    20ce:	20 93 64 02 	sts	0x0264, r18

	}
    20d2:	08 95       	ret

000020d4 <rfm12_init>:
* puts the module into receive mode before returning.
*
* \note Please note that the transmit power and receive amplification values are currently hard coded.
* Have a look into rfm12_hw.h for possible settings.
*/
void rfm12_init(void) {
    20d4:	cf 93       	push	r28
    20d6:	df 93       	push	r29
	//initialize spi
#ifdef __PLATFORM_AVR__
	SS_RELEASE();
    20d8:	2c 9a       	sbi	0x05, 4	; 5
	DDR_SS |= (1<<BIT_SS);
    20da:	24 9a       	sbi	0x04, 4	; 4
		return d;
	#endif
}

static void spi_init(void) {
	DDR_MOSI |= (_BV(BIT_MOSI));
    20dc:	25 9a       	sbi	0x04, 5	; 4
	DDR_SCK  |= (_BV(BIT_SCK));
    20de:	27 9a       	sbi	0x04, 7	; 4
	#if !(RFM12_SPI_SOFTWARE)
		PORT_SPI |= (_BV(BIT_SPI_SS));
    20e0:	2c 9a       	sbi	0x05, 4	; 5
		DDR_SPI  |= (_BV(BIT_SPI_SS));
    20e2:	24 9a       	sbi	0x04, 4	; 4
	#endif

	DDR_MISO &= ~(_BV(BIT_MISO));
    20e4:	26 98       	cbi	0x04, 6	; 4

	#if !(RFM12_SPI_SOFTWARE)
		SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0); //SPI Master, clk/16
    20e6:	81 e5       	ldi	r24, 0x51	; 81
    20e8:	8c bd       	out	0x2c, r24	; 44
	#endif

	//store the syncronization pattern to the transmission buffer
	//the sync pattern is used by the receiver to distinguish noise from real transmissions
	//the sync pattern is hardcoded into the receiver
	rf_tx_buffer.sync[0] = SYNC_MSB;
    20ea:	8d e2       	ldi	r24, 0x2D	; 45
    20ec:	80 93 f8 01 	sts	0x01F8, r24
	rf_tx_buffer.sync[1] = SYNC_LSB;
    20f0:	84 ed       	ldi	r24, 0xD4	; 212
    20f2:	80 93 f9 01 	sts	0x01F9, r24

	//if receive mode is not disabled (default)
	#if !(RFM12_TRANSMIT_ONLY)
		//init buffer pointers
		ctrl.buffer_in_num = 0;
    20f6:	10 92 63 02 	sts	0x0263, r1
		ctrl.buffer_out_num = 0;
    20fa:	10 92 64 02 	sts	0x0264, r1
    20fe:	c0 e0       	ldi	r28, 0x00	; 0
    2100:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t x;

	#ifdef __PLATFORM_AVR__

		for (x = 0; x < ( sizeof(init_cmds) / 2) ; x++) {
			rfm12_data(pgm_read_word(&init_cmds[x]));
    2102:	fe 01       	movw	r30, r28
    2104:	ee 0f       	add	r30, r30
    2106:	ff 1f       	adc	r31, r31
    2108:	e9 5a       	subi	r30, 0xA9	; 169
    210a:	fd 4f       	sbci	r31, 0xFD	; 253
    210c:	85 91       	lpm	r24, Z+
    210e:	94 91       	lpm	r25, Z+
    2110:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <_ZL10rfm12_dataj>
    2114:	21 96       	adiw	r28, 0x01	; 1
	//write all the initialisation values to rfm12
	uint8_t x;

	#ifdef __PLATFORM_AVR__

		for (x = 0; x < ( sizeof(init_cmds) / 2) ; x++) {
    2116:	cc 30       	cpi	r28, 0x0C	; 12
    2118:	d1 05       	cpc	r29, r1
    211a:	99 f7       	brne	.-26     	; 0x2102 <rfm12_init+0x2e>
		adc_init();
	#endif

	//setup interrupt for falling edge trigger
#ifdef __PLATFORM_AVR__
	RFM12_INT_SETUP();
    211c:	80 91 69 00 	lds	r24, 0x0069
    2120:	80 62       	ori	r24, 0x20	; 32
    2122:	80 93 69 00 	sts	0x0069, r24
#endif

	//clear int flag
	rfm12_read(RFM12_CMD_STATUS);
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <_ZL10rfm12_readj>

#ifdef __PLATFORM_AVR__
	RFM12_INT_FLAG = (1<<RFM12_FLAG_BIT);
    212e:	84 e0       	ldi	r24, 0x04	; 4
    2130:	8c bb       	out	0x1c, r24	; 28
#endif

	//init receiver fifo, we now begin receiving.
	rfm12_data(CLEAR_FIFO);
    2132:	81 e8       	ldi	r24, 0x81	; 129
    2134:	9a ec       	ldi	r25, 0xCA	; 202
    2136:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <_ZL10rfm12_dataj>
	rfm12_data(ACCEPT_DATA);
    213a:	83 e8       	ldi	r24, 0x83	; 131
    213c:	9a ec       	ldi	r25, 0xCA	; 202
    213e:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <_ZL10rfm12_dataj>

	//activate the interrupt
	RFM12_INT_ON();
    2142:	ea 9a       	sbi	0x1d, 2	; 29
}
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	08 95       	ret

0000214a <rfm12_tx>:
	#if (RFM12_NORETURNS)
	void
	#else
	uint8_t
	#endif
	rfm12_tx(uint8_t len, uint8_t type, uint8_t *data) {
    214a:	0f 93       	push	r16
    214c:	1f 93       	push	r17
    214e:	18 2f       	mov	r17, r24
    2150:	06 2f       	mov	r16, r22
			uart_putstr ("sending packet\r\n");
		#endif
	//	printf("send");
	//	printf("%u", len);
	//	printf("%u", RFM12_TX_BUFFER_SIZE);
		if (len > RFM12_TX_BUFFER_SIZE) return TXRETURN(RFM12_TX_ERROR);
    2152:	8f 31       	cpi	r24, 0x1F	; 31
    2154:	10 f0       	brcs	.+4      	; 0x215a <rfm12_tx+0x10>
    2156:	82 e0       	ldi	r24, 0x02	; 2
    2158:	12 c0       	rjmp	.+36     	; 0x217e <rfm12_tx+0x34>

		//exit if the buffer isn't free
		if (ctrl.txstate != STATUS_FREE)
    215a:	80 91 60 02 	lds	r24, 0x0260
    215e:	88 23       	and	r24, r24
    2160:	11 f0       	breq	.+4      	; 0x2166 <rfm12_tx+0x1c>
    2162:	83 e0       	ldi	r24, 0x03	; 3
    2164:	0c c0       	rjmp	.+24     	; 0x217e <rfm12_tx+0x34>
			return TXRETURN(RFM12_TX_OCCUPIED);

		memcpy(rf_tx_buffer.buffer, data, len);
    2166:	2d ef       	ldi	r18, 0xFD	; 253
    2168:	31 e0       	ldi	r19, 0x01	; 1
    216a:	c9 01       	movw	r24, r18
    216c:	ba 01       	movw	r22, r20
    216e:	41 2f       	mov	r20, r17
    2170:	50 e0       	ldi	r21, 0x00	; 0
    2172:	0e 94 13 16 	call	0x2c26	; 0x2c26 <memcpy>

		#if (!(RFM12_NORETURNS))
		return rfm12_start_tx(type, len);
    2176:	80 2f       	mov	r24, r16
    2178:	61 2f       	mov	r22, r17
    217a:	0e 94 40 10 	call	0x2080	; 0x2080 <rfm12_start_tx>
		#else
		rfm12_start_tx(type, len);
		#endif
	}
    217e:	1f 91       	pop	r17
    2180:	0f 91       	pop	r16
    2182:	08 95       	ret

00002184 <_ZN5tfthwL7write16Ej>:
	TFT_WCTRL |= TFT_RS;
}

static inline void tfthw::data(uint8_t dat)
{
	TFT_WDATA = dat;
    2184:	98 b9       	out	0x08, r25	; 8
	TFT_WCTRL &= ~TFT_WR;
    2186:	13 98       	cbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_WR;
    2188:	13 9a       	sbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_RS;
}

static inline void tfthw::data(uint8_t dat)
{
	TFT_WDATA = dat;
    218a:	88 b9       	out	0x08, r24	; 8
	TFT_WCTRL &= ~TFT_WR;
    218c:	13 98       	cbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_WR;
    218e:	13 9a       	sbi	0x02, 3	; 2
	// 0x2c Write, 0x2e Read, 0x3c / 0x3e Continue, 0x00 NOP
	static inline void memWrite() {cmd(0x2c);}
	static inline void memRead() {cmd(0x2e);}
	static inline void mode(bool read);
	static inline void write(const uint8_t d) {data(d);}
	static inline void write16(const uint16_t c) {write(c >> 8); write(c & 0xff);}
    2190:	08 95       	ret

00002192 <_ZN5tfthwL3cmdEh>:
	data(orient);
}

static inline void tfthw::cmd(uint8_t dat)
{
	TFT_WCTRL &= ~TFT_RS;
    2192:	14 98       	cbi	0x02, 4	; 2
	TFT_WDATA = dat;
    2194:	88 b9       	out	0x08, r24	; 8
	TFT_WCTRL &= ~TFT_WR;
    2196:	13 98       	cbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_WR;
    2198:	13 9a       	sbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_RS;
    219a:	14 9a       	sbi	0x02, 4	; 2
}
    219c:	08 95       	ret

0000219e <_ZN5tfthwL9setOrientEh>:
{
	using namespace tft;
	static const uint8_t base = 0x08;
	static const uint8_t MY = 1U << 7, MX = 1U << 6, MV = 1U << 5;
	static uint8_t orient;
	orient = o & Portrait ?  base | MX : base | MV;
    219e:	28 2f       	mov	r18, r24
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	a9 01       	movw	r20, r18
    21a4:	41 70       	andi	r20, 0x01	; 1
    21a6:	50 70       	andi	r21, 0x00	; 0
    21a8:	80 fd       	sbrc	r24, 0
    21aa:	02 c0       	rjmp	.+4      	; 0x21b0 <_ZN5tfthwL9setOrientEh+0x12>
    21ac:	98 e2       	ldi	r25, 0x28	; 40
    21ae:	01 c0       	rjmp	.+2      	; 0x21b2 <_ZN5tfthwL9setOrientEh+0x14>
    21b0:	98 e4       	ldi	r25, 0x48	; 72
    21b2:	90 93 77 02 	sts	0x0277, r25
	if (o & Flipped)
    21b6:	21 ff       	sbrs	r18, 1
    21b8:	04 c0       	rjmp	.+8      	; 0x21c2 <_ZN5tfthwL9setOrientEh+0x24>
		orient ^= MY | MX;
    21ba:	80 ec       	ldi	r24, 0xC0	; 192
    21bc:	98 27       	eor	r25, r24
    21be:	90 93 77 02 	sts	0x0277, r25
	if (o & BMPMode)
    21c2:	22 ff       	sbrs	r18, 2
    21c4:	0a c0       	rjmp	.+20     	; 0x21da <_ZN5tfthwL9setOrientEh+0x3c>
		orient ^= o & Portrait ? MY : MX;
    21c6:	90 91 77 02 	lds	r25, 0x0277
    21ca:	45 2b       	or	r20, r21
    21cc:	11 f4       	brne	.+4      	; 0x21d2 <_ZN5tfthwL9setOrientEh+0x34>
    21ce:	80 e4       	ldi	r24, 0x40	; 64
    21d0:	01 c0       	rjmp	.+2      	; 0x21d4 <_ZN5tfthwL9setOrientEh+0x36>
    21d2:	80 e8       	ldi	r24, 0x80	; 128
    21d4:	89 27       	eor	r24, r25
    21d6:	80 93 77 02 	sts	0x0277, r24
	cmd(0x36);			// Memory Access Control
    21da:	86 e3       	ldi	r24, 0x36	; 54
    21dc:	0e 94 c9 10 	call	0x2192	; 0x2192 <_ZN5tfthwL3cmdEh>
	data(orient);
    21e0:	80 91 77 02 	lds	r24, 0x0277
	TFT_WCTRL |= TFT_RS;
}

static inline void tfthw::data(uint8_t dat)
{
	TFT_WDATA = dat;
    21e4:	88 b9       	out	0x08, r24	; 8
	TFT_WCTRL &= ~TFT_WR;
    21e6:	13 98       	cbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_WR;
    21e8:	13 9a       	sbi	0x02, 3	; 2
		orient ^= MY | MX;
	if (o & BMPMode)
		orient ^= o & Portrait ? MY : MX;
	cmd(0x36);			// Memory Access Control
	data(orient);
}
    21ea:	08 95       	ret

000021ec <_ZN5tfthwL4areaEjjjj>:
	area(x, y, 1, 1);
	memWrite();
	write16(c);
}

inline void tfthw::area(uint16_t x, uint16_t y, uint16_t w, uint16_t h)
    21ec:	af 92       	push	r10
    21ee:	bf 92       	push	r11
    21f0:	cf 92       	push	r12
    21f2:	df 92       	push	r13
    21f4:	ef 92       	push	r14
    21f6:	ff 92       	push	r15
    21f8:	0f 93       	push	r16
    21fa:	1f 93       	push	r17
    21fc:	8c 01       	movw	r16, r24
    21fe:	7b 01       	movw	r14, r22
    2200:	6a 01       	movw	r12, r20
    2202:	59 01       	movw	r10, r18
}
#endif

static inline void tfthw::setColumn(const uint16_t start, const uint16_t end)
{
	cmd(0x2a);	// Set column address
    2204:	8a e2       	ldi	r24, 0x2A	; 42
    2206:	0e 94 c9 10 	call	0x2192	; 0x2192 <_ZN5tfthwL3cmdEh>
	write16(start);
    220a:	c8 01       	movw	r24, r16
    220c:	0e 94 c2 10 	call	0x2184	; 0x2184 <_ZN5tfthwL7write16Ej>
	write16(end);
    2210:	01 50       	subi	r16, 0x01	; 1
    2212:	10 40       	sbci	r17, 0x00	; 0
    2214:	c8 01       	movw	r24, r16
    2216:	8c 0d       	add	r24, r12
    2218:	9d 1d       	adc	r25, r13
    221a:	0e 94 c2 10 	call	0x2184	; 0x2184 <_ZN5tfthwL7write16Ej>
}

static inline void tfthw::setPage(const uint16_t start, const uint16_t end)
{
	cmd(0x2b);	// Set page(row) address
    221e:	8b e2       	ldi	r24, 0x2B	; 43
    2220:	0e 94 c9 10 	call	0x2192	; 0x2192 <_ZN5tfthwL3cmdEh>
	write16(start);
    2224:	c7 01       	movw	r24, r14
    2226:	0e 94 c2 10 	call	0x2184	; 0x2184 <_ZN5tfthwL7write16Ej>
	write16(end);
    222a:	08 94       	sec
    222c:	e1 08       	sbc	r14, r1
    222e:	f1 08       	sbc	r15, r1
    2230:	c7 01       	movw	r24, r14
    2232:	8a 0d       	add	r24, r10
    2234:	9b 1d       	adc	r25, r11
    2236:	0e 94 c2 10 	call	0x2184	; 0x2184 <_ZN5tfthwL7write16Ej>
{
	using namespace tfthw;
	setColumn(x, x + w - 1);
	setPage(y, y + h - 1);
}
    223a:	1f 91       	pop	r17
    223c:	0f 91       	pop	r16
    223e:	ff 90       	pop	r15
    2240:	ef 90       	pop	r14
    2242:	df 90       	pop	r13
    2244:	cf 90       	pop	r12
    2246:	bf 90       	pop	r11
    2248:	af 90       	pop	r10
    224a:	08 95       	ret

0000224c <_ZN3tftL5pointEjjj>:
		drawChar(c);
		next();
	}
}

inline void tft::point(uint16_t x, uint16_t y, uint16_t c)
    224c:	cf 93       	push	r28
    224e:	df 93       	push	r29
    2250:	9c 01       	movw	r18, r24
    2252:	ea 01       	movw	r28, r20
{
	using namespace tfthw;
	if (x >= width || y >= height)
    2254:	80 91 6d 02 	lds	r24, 0x026D
    2258:	90 91 6e 02 	lds	r25, 0x026E
    225c:	28 17       	cp	r18, r24
    225e:	39 07       	cpc	r19, r25
    2260:	a0 f4       	brcc	.+40     	; 0x228a <_ZN3tftL5pointEjjj+0x3e>
    2262:	80 91 6f 02 	lds	r24, 0x026F
    2266:	90 91 70 02 	lds	r25, 0x0270
    226a:	68 17       	cp	r22, r24
    226c:	79 07       	cpc	r23, r25
    226e:	68 f4       	brcc	.+26     	; 0x228a <_ZN3tftL5pointEjjj+0x3e>
		return;
	area(x, y, 1, 1);
    2270:	c9 01       	movw	r24, r18
    2272:	41 e0       	ldi	r20, 0x01	; 1
    2274:	50 e0       	ldi	r21, 0x00	; 0
    2276:	21 e0       	ldi	r18, 0x01	; 1
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	0e 94 f6 10 	call	0x21ec	; 0x21ec <_ZN5tfthwL4areaEjjjj>
	static inline void setBGLight(bool ctrl);
	static inline void setOrient(uint8_t o);
	static inline void setPage(const uint16_t start, const uint16_t end);
	static inline void setColumn(const uint16_t start, const uint16_t end);
	// 0x2c Write, 0x2e Read, 0x3c / 0x3e Continue, 0x00 NOP
	static inline void memWrite() {cmd(0x2c);}
    227e:	8c e2       	ldi	r24, 0x2C	; 44
    2280:	0e 94 c9 10 	call	0x2192	; 0x2192 <_ZN5tfthwL3cmdEh>
	memWrite();
	write16(c);
    2284:	ce 01       	movw	r24, r28
    2286:	0e 94 c2 10 	call	0x2184	; 0x2184 <_ZN5tfthwL7write16Ej>
}
    228a:	df 91       	pop	r29
    228c:	cf 91       	pop	r28
    228e:	08 95       	ret

00002290 <_ZN3tft7setFontEhh>:
	Type tmp = a;
	a = b;
	b = tmp;
}

bool tft::setFont(uint8_t w, uint8_t h)
    2290:	98 2f       	mov	r25, r24
{
	if (font->width == w && font->height == h)
    2292:	e0 91 eb 01 	lds	r30, 0x01EB
    2296:	f0 91 ec 01 	lds	r31, 0x01EC
    229a:	80 81       	ld	r24, Z
    229c:	89 17       	cp	r24, r25
    229e:	19 f4       	brne	.+6      	; 0x22a6 <_ZN3tft7setFontEhh+0x16>
    22a0:	81 81       	ldd	r24, Z+1	; 0x01
    22a2:	86 17       	cp	r24, r22
    22a4:	61 f0       	breq	.+24     	; 0x22be <_ZN3tft7setFontEhh+0x2e>
    22a6:	e3 ee       	ldi	r30, 0xE3	; 227
    22a8:	f1 e0       	ldi	r31, 0x01	; 1
		return true;
	const struct font_t *ptr = &fonts;
	while (ptr != 0)
		if (ptr->width == w && ptr->height == h) {
    22aa:	80 81       	ld	r24, Z
    22ac:	89 17       	cp	r24, r25
    22ae:	49 f4       	brne	.+18     	; 0x22c2 <_ZN3tft7setFontEhh+0x32>
    22b0:	81 81       	ldd	r24, Z+1	; 0x01
    22b2:	86 17       	cp	r24, r22
    22b4:	31 f4       	brne	.+12     	; 0x22c2 <_ZN3tft7setFontEhh+0x32>
			font = ptr;
    22b6:	f0 93 ec 01 	sts	0x01EC, r31
    22ba:	e0 93 eb 01 	sts	0x01EB, r30
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	08 95       	ret
			return true;
		} else
			ptr = ptr->next;
    22c2:	06 80       	ldd	r0, Z+6	; 0x06
    22c4:	f7 81       	ldd	r31, Z+7	; 0x07
    22c6:	e0 2d       	mov	r30, r0
bool tft::setFont(uint8_t w, uint8_t h)
{
	if (font->width == w && font->height == h)
		return true;
	const struct font_t *ptr = &fonts;
	while (ptr != 0)
    22c8:	30 97       	sbiw	r30, 0x00	; 0
    22ca:	79 f7       	brne	.-34     	; 0x22aa <_ZN3tft7setFontEhh+0x1a>
    22cc:	80 e0       	ldi	r24, 0x00	; 0
			font = ptr;
			return true;
		} else
			ptr = ptr->next;
	return false;
}
    22ce:	08 95       	ret

000022d0 <_ZN3tft9rectangleEjjjjj>:
			point(x, y0 + dy * (x - x0) / dx * \
					(y0 > y1 ? -1 : 1), c);
	}
}

void tft::rectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t c)
    22d0:	cf 92       	push	r12
    22d2:	df 92       	push	r13
    22d4:	ef 92       	push	r14
    22d6:	ff 92       	push	r15
    22d8:	0f 93       	push	r16
    22da:	1f 93       	push	r17
    22dc:	cf 93       	push	r28
    22de:	df 93       	push	r29
    22e0:	fc 01       	movw	r30, r24
    22e2:	6a 01       	movw	r12, r20
    22e4:	79 01       	movw	r14, r18
{
	if ((int16_t)w <= 0 || (int16_t)h <= 0)
    22e6:	14 16       	cp	r1, r20
    22e8:	15 06       	cpc	r1, r21
    22ea:	0c f0       	brlt	.+2      	; 0x22ee <_ZN3tft9rectangleEjjjjj+0x1e>
    22ec:	4f c0       	rjmp	.+158    	; 0x238c <_ZN3tft9rectangleEjjjjj+0xbc>
    22ee:	12 16       	cp	r1, r18
    22f0:	13 06       	cpc	r1, r19
    22f2:	0c f0       	brlt	.+2      	; 0x22f6 <_ZN3tft9rectangleEjjjjj+0x26>
    22f4:	4b c0       	rjmp	.+150    	; 0x238c <_ZN3tft9rectangleEjjjjj+0xbc>
		goto draw;
	}

disp:
#endif
	if ((int16_t)x < 0) {
    22f6:	97 ff       	sbrs	r25, 7
    22f8:	04 c0       	rjmp	.+8      	; 0x2302 <_ZN3tft9rectangleEjjjjj+0x32>
		w -= -(int16_t)x;
    22fa:	c8 0e       	add	r12, r24
    22fc:	d9 1e       	adc	r13, r25
    22fe:	e0 e0       	ldi	r30, 0x00	; 0
    2300:	f0 e0       	ldi	r31, 0x00	; 0
		x = 0;
	}
	if ((int16_t)y < 0) {
    2302:	77 ff       	sbrs	r23, 7
    2304:	04 c0       	rjmp	.+8      	; 0x230e <_ZN3tft9rectangleEjjjjj+0x3e>
		h -= -(int16_t)y;
    2306:	e6 0e       	add	r14, r22
    2308:	f7 1e       	adc	r15, r23
    230a:	60 e0       	ldi	r22, 0x00	; 0
    230c:	70 e0       	ldi	r23, 0x00	; 0
		y = 0;
	}
	if ((int16_t)w <= 0 || (int16_t)h <= 0)
    230e:	1c 14       	cp	r1, r12
    2310:	1d 04       	cpc	r1, r13
    2312:	e4 f5       	brge	.+120    	; 0x238c <_ZN3tft9rectangleEjjjjj+0xbc>
    2314:	1e 14       	cp	r1, r14
    2316:	1f 04       	cpc	r1, r15
    2318:	cc f5       	brge	.+114    	; 0x238c <_ZN3tft9rectangleEjjjjj+0xbc>
		return;
	if (x + w > width)
    231a:	20 91 6d 02 	lds	r18, 0x026D
    231e:	30 91 6e 02 	lds	r19, 0x026E
    2322:	cf 01       	movw	r24, r30
    2324:	8c 0d       	add	r24, r12
    2326:	9d 1d       	adc	r25, r13
    2328:	28 17       	cp	r18, r24
    232a:	39 07       	cpc	r19, r25
    232c:	18 f4       	brcc	.+6      	; 0x2334 <_ZN3tft9rectangleEjjjjj+0x64>
		w = width - x;
    232e:	69 01       	movw	r12, r18
    2330:	ce 1a       	sub	r12, r30
    2332:	df 0a       	sbc	r13, r31
	if (y + h > height)
    2334:	20 91 6f 02 	lds	r18, 0x026F
    2338:	30 91 70 02 	lds	r19, 0x0270
    233c:	cb 01       	movw	r24, r22
    233e:	8e 0d       	add	r24, r14
    2340:	9f 1d       	adc	r25, r15
    2342:	28 17       	cp	r18, r24
    2344:	39 07       	cpc	r19, r25
    2346:	18 f4       	brcc	.+6      	; 0x234e <_ZN3tft9rectangleEjjjjj+0x7e>
		h = height - y;
    2348:	79 01       	movw	r14, r18
    234a:	e6 1a       	sub	r14, r22
    234c:	f7 0a       	sbc	r15, r23
	if ((int16_t)w <= 0 || (int16_t)h <= 0)
    234e:	1c 14       	cp	r1, r12
    2350:	1d 04       	cpc	r1, r13
    2352:	e4 f4       	brge	.+56     	; 0x238c <_ZN3tft9rectangleEjjjjj+0xbc>
    2354:	1e 14       	cp	r1, r14
    2356:	1f 04       	cpc	r1, r15
    2358:	cc f4       	brge	.+50     	; 0x238c <_ZN3tft9rectangleEjjjjj+0xbc>
		return;

	tfthw::area(x, y, w, h);
    235a:	cf 01       	movw	r24, r30
    235c:	a6 01       	movw	r20, r12
    235e:	97 01       	movw	r18, r14
    2360:	0e 94 f6 10 	call	0x21ec	; 0x21ec <_ZN5tfthwL4areaEjjjj>
    2364:	8c e2       	ldi	r24, 0x2C	; 44
    2366:	0e 94 c9 10 	call	0x2192	; 0x2192 <_ZN5tfthwL3cmdEh>
    236a:	0a c0       	rjmp	.+20     	; 0x2380 <_ZN3tft9rectangleEjjjjj+0xb0>
draw:
#endif
	tfthw::memWrite();
	while (h--)
		for (uint16_t xx = 0; xx < w; xx++)
			tfthw::write16(c);
    236c:	c8 01       	movw	r24, r16
    236e:	0e 94 c2 10 	call	0x2184	; 0x2184 <_ZN5tfthwL7write16Ej>
#ifdef TFT_VERTICAL_SCROLLING
draw:
#endif
	tfthw::memWrite();
	while (h--)
		for (uint16_t xx = 0; xx < w; xx++)
    2372:	21 96       	adiw	r28, 0x01	; 1
    2374:	cc 15       	cp	r28, r12
    2376:	dd 05       	cpc	r29, r13
    2378:	c8 f3       	brcs	.-14     	; 0x236c <_ZN3tft9rectangleEjjjjj+0x9c>
    237a:	08 94       	sec
    237c:	e1 08       	sbc	r14, r1
    237e:	f1 08       	sbc	r15, r1
	tfthw::area(x, y, w, h);
#ifdef TFT_VERTICAL_SCROLLING
draw:
#endif
	tfthw::memWrite();
	while (h--)
    2380:	e1 14       	cp	r14, r1
    2382:	f1 04       	cpc	r15, r1
    2384:	19 f0       	breq	.+6      	; 0x238c <_ZN3tft9rectangleEjjjjj+0xbc>
    2386:	c0 e0       	ldi	r28, 0x00	; 0
    2388:	d0 e0       	ldi	r29, 0x00	; 0
    238a:	f4 cf       	rjmp	.-24     	; 0x2374 <_ZN3tft9rectangleEjjjjj+0xa4>
		for (uint16_t xx = 0; xx < w; xx++)
			tfthw::write16(c);
}
    238c:	df 91       	pop	r29
    238e:	cf 91       	pop	r28
    2390:	1f 91       	pop	r17
    2392:	0f 91       	pop	r16
    2394:	ff 90       	pop	r15
    2396:	ef 90       	pop	r14
    2398:	df 90       	pop	r13
    239a:	cf 90       	pop	r12
    239c:	08 95       	ret

0000239e <_ZN3tft5frameEjjjjhj>:
#endif
	}
}

void tft::frame(uint16_t x, uint16_t y, uint16_t w, uint16_t h, \
		uint8_t s, uint16_t c)
    239e:	2f 92       	push	r2
    23a0:	3f 92       	push	r3
    23a2:	4f 92       	push	r4
    23a4:	5f 92       	push	r5
    23a6:	6f 92       	push	r6
    23a8:	7f 92       	push	r7
    23aa:	8f 92       	push	r8
    23ac:	9f 92       	push	r9
    23ae:	af 92       	push	r10
    23b0:	bf 92       	push	r11
    23b2:	cf 92       	push	r12
    23b4:	df 92       	push	r13
    23b6:	ef 92       	push	r14
    23b8:	ff 92       	push	r15
    23ba:	0f 93       	push	r16
    23bc:	1f 93       	push	r17
    23be:	cf 93       	push	r28
    23c0:	df 93       	push	r29
    23c2:	2c 01       	movw	r4, r24
    23c4:	3b 01       	movw	r6, r22
    23c6:	5a 01       	movw	r10, r20
    23c8:	49 01       	movw	r8, r18
{
	rectangle(x, y, w - s, s, c);
    23ca:	c0 2e       	mov	r12, r16
    23cc:	dd 24       	eor	r13, r13
    23ce:	ea 01       	movw	r28, r20
    23d0:	cc 19       	sub	r28, r12
    23d2:	dd 09       	sbc	r29, r13
    23d4:	ae 01       	movw	r20, r28
    23d6:	96 01       	movw	r18, r12
    23d8:	87 01       	movw	r16, r14
    23da:	0e 94 68 11 	call	0x22d0	; 0x22d0 <_ZN3tft9rectangleEjjjjj>
	rectangle(x + w - s, y, s, h - s, c);
    23de:	14 01       	movw	r2, r8
    23e0:	2c 18       	sub	r2, r12
    23e2:	3d 08       	sbc	r3, r13
    23e4:	a4 0c       	add	r10, r4
    23e6:	b5 1c       	adc	r11, r5
    23e8:	c5 01       	movw	r24, r10
    23ea:	8c 19       	sub	r24, r12
    23ec:	9d 09       	sbc	r25, r13
    23ee:	b3 01       	movw	r22, r6
    23f0:	a6 01       	movw	r20, r12
    23f2:	91 01       	movw	r18, r2
    23f4:	0e 94 68 11 	call	0x22d0	; 0x22d0 <_ZN3tft9rectangleEjjjjj>
	rectangle(x, y + s, s, h - s, c);
    23f8:	b6 01       	movw	r22, r12
    23fa:	66 0d       	add	r22, r6
    23fc:	77 1d       	adc	r23, r7
    23fe:	c2 01       	movw	r24, r4
    2400:	a6 01       	movw	r20, r12
    2402:	91 01       	movw	r18, r2
    2404:	0e 94 68 11 	call	0x22d0	; 0x22d0 <_ZN3tft9rectangleEjjjjj>
	rectangle(x + s, y + h - s, w - s, s, c);
    2408:	86 0c       	add	r8, r6
    240a:	97 1c       	adc	r9, r7
    240c:	8c 18       	sub	r8, r12
    240e:	9d 08       	sbc	r9, r13
    2410:	c6 01       	movw	r24, r12
    2412:	84 0d       	add	r24, r4
    2414:	95 1d       	adc	r25, r5
    2416:	b4 01       	movw	r22, r8
    2418:	ae 01       	movw	r20, r28
    241a:	96 01       	movw	r18, r12
    241c:	0e 94 68 11 	call	0x22d0	; 0x22d0 <_ZN3tft9rectangleEjjjjj>
}
    2420:	df 91       	pop	r29
    2422:	cf 91       	pop	r28
    2424:	1f 91       	pop	r17
    2426:	0f 91       	pop	r16
    2428:	ff 90       	pop	r15
    242a:	ef 90       	pop	r14
    242c:	df 90       	pop	r13
    242e:	cf 90       	pop	r12
    2430:	bf 90       	pop	r11
    2432:	af 90       	pop	r10
    2434:	9f 90       	pop	r9
    2436:	8f 90       	pop	r8
    2438:	7f 90       	pop	r7
    243a:	6f 90       	pop	r6
    243c:	5f 90       	pop	r5
    243e:	4f 90       	pop	r4
    2440:	3f 90       	pop	r3
    2442:	2f 90       	pop	r2
    2444:	08 95       	ret

00002446 <_ZN3tft4lineEjjjjj>:

void tft::line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, \
		uint16_t c)
    2446:	4f 92       	push	r4
    2448:	5f 92       	push	r5
    244a:	6f 92       	push	r6
    244c:	7f 92       	push	r7
    244e:	8f 92       	push	r8
    2450:	9f 92       	push	r9
    2452:	af 92       	push	r10
    2454:	bf 92       	push	r11
    2456:	cf 92       	push	r12
    2458:	df 92       	push	r13
    245a:	ef 92       	push	r14
    245c:	ff 92       	push	r15
    245e:	0f 93       	push	r16
    2460:	1f 93       	push	r17
    2462:	cf 93       	push	r28
    2464:	df 93       	push	r29
    2466:	ec 01       	movw	r28, r24
    2468:	7b 01       	movw	r14, r22
    246a:	6a 01       	movw	r12, r20
    246c:	59 01       	movw	r10, r18
    246e:	28 01       	movw	r4, r16
{
	if (x0 > width)
    2470:	80 91 6d 02 	lds	r24, 0x026D
    2474:	90 91 6e 02 	lds	r25, 0x026E
    2478:	8c 17       	cp	r24, r28
    247a:	9d 07       	cpc	r25, r29
    247c:	10 f4       	brcc	.+4      	; 0x2482 <_ZN3tft4lineEjjjjj+0x3c>
		x0 = width - 1;
    247e:	ec 01       	movw	r28, r24
    2480:	21 97       	sbiw	r28, 0x01	; 1
	if (x1 > width)
    2482:	8c 15       	cp	r24, r12
    2484:	9d 05       	cpc	r25, r13
    2486:	20 f4       	brcc	.+8      	; 0x2490 <_ZN3tft4lineEjjjjj+0x4a>
		x1 = width - 1;
    2488:	6c 01       	movw	r12, r24
    248a:	08 94       	sec
    248c:	c1 08       	sbc	r12, r1
    248e:	d1 08       	sbc	r13, r1
	if (y0 > height)
    2490:	80 91 6f 02 	lds	r24, 0x026F
    2494:	90 91 70 02 	lds	r25, 0x0270
    2498:	8e 15       	cp	r24, r14
    249a:	9f 05       	cpc	r25, r15
    249c:	20 f4       	brcc	.+8      	; 0x24a6 <_ZN3tft4lineEjjjjj+0x60>
		y0 = height - 1;
    249e:	7c 01       	movw	r14, r24
    24a0:	08 94       	sec
    24a2:	e1 08       	sbc	r14, r1
    24a4:	f1 08       	sbc	r15, r1
	if (y1 > height)
    24a6:	8a 15       	cp	r24, r10
    24a8:	9b 05       	cpc	r25, r11
    24aa:	20 f4       	brcc	.+8      	; 0x24b4 <_ZN3tft4lineEjjjjj+0x6e>
		y1 = height - 1;
    24ac:	5c 01       	movw	r10, r24
    24ae:	08 94       	sec
    24b0:	a1 08       	sbc	r10, r1
    24b2:	b1 08       	sbc	r11, r1
	if (x0 == x1) {
    24b4:	cc 15       	cp	r28, r12
    24b6:	dd 05       	cpc	r29, r13
    24b8:	89 f4       	brne	.+34     	; 0x24dc <_ZN3tft4lineEjjjjj+0x96>
		if (y0 > y1)
    24ba:	ae 14       	cp	r10, r14
    24bc:	bf 04       	cpc	r11, r15
    24be:	18 f4       	brcc	.+6      	; 0x24c6 <_ZN3tft4lineEjjjjj+0x80>
    24c0:	c5 01       	movw	r24, r10
    24c2:	57 01       	movw	r10, r14
    24c4:	7c 01       	movw	r14, r24
			swap(y0, y1);
		rectangle(x0, y0, 1, y1 - y0 + 1, c);
    24c6:	08 94       	sec
    24c8:	a1 1c       	adc	r10, r1
    24ca:	b1 1c       	adc	r11, r1
    24cc:	ae 18       	sub	r10, r14
    24ce:	bf 08       	sbc	r11, r15
    24d0:	ce 01       	movw	r24, r28
    24d2:	b7 01       	movw	r22, r14
    24d4:	41 e0       	ldi	r20, 0x01	; 1
    24d6:	50 e0       	ldi	r21, 0x00	; 0
    24d8:	95 01       	movw	r18, r10
    24da:	13 c0       	rjmp	.+38     	; 0x2502 <_ZN3tft4lineEjjjjj+0xbc>
		return;
	}
	if (y0 == y1) {
    24dc:	ea 14       	cp	r14, r10
    24de:	fb 04       	cpc	r15, r11
    24e0:	a1 f4       	brne	.+40     	; 0x250a <_ZN3tft4lineEjjjjj+0xc4>
		if (x0 > x1)
    24e2:	cc 16       	cp	r12, r28
    24e4:	dd 06       	cpc	r13, r29
    24e6:	18 f4       	brcc	.+6      	; 0x24ee <_ZN3tft4lineEjjjjj+0xa8>
    24e8:	c6 01       	movw	r24, r12
    24ea:	6e 01       	movw	r12, r28
    24ec:	ec 01       	movw	r28, r24
			swap(x0, x1);
		rectangle(x0, y0, x1 - x0 + 1, 1, c);
    24ee:	08 94       	sec
    24f0:	c1 1c       	adc	r12, r1
    24f2:	d1 1c       	adc	r13, r1
    24f4:	cc 1a       	sub	r12, r28
    24f6:	dd 0a       	sbc	r13, r29
    24f8:	ce 01       	movw	r24, r28
    24fa:	b7 01       	movw	r22, r14
    24fc:	a6 01       	movw	r20, r12
    24fe:	21 e0       	ldi	r18, 0x01	; 1
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	82 01       	movw	r16, r4
    2504:	0e 94 68 11 	call	0x22d0	; 0x22d0 <_ZN3tft9rectangleEjjjjj>
    2508:	6f c0       	rjmp	.+222    	; 0x25e8 <_ZN3tft4lineEjjjjj+0x1a2>
		return;
	}
	uint16_t dx = abs(x1 - x0), dy = abs(y1 - y0);
    250a:	36 01       	movw	r6, r12
    250c:	6c 1a       	sub	r6, r28
    250e:	7d 0a       	sbc	r7, r29
    2510:	77 fe       	sbrs	r7, 7
    2512:	04 c0       	rjmp	.+8      	; 0x251c <_ZN3tft4lineEjjjjj+0xd6>
    2514:	70 94       	com	r7
    2516:	61 94       	neg	r6
    2518:	71 08       	sbc	r7, r1
    251a:	73 94       	inc	r7
    251c:	45 01       	movw	r8, r10
    251e:	8e 18       	sub	r8, r14
    2520:	9f 08       	sbc	r9, r15
    2522:	97 fe       	sbrs	r9, 7
    2524:	04 c0       	rjmp	.+8      	; 0x252e <_ZN3tft4lineEjjjjj+0xe8>
    2526:	90 94       	com	r9
    2528:	81 94       	neg	r8
    252a:	91 08       	sbc	r9, r1
    252c:	93 94       	inc	r9
	if (dx < dy) {
    252e:	68 14       	cp	r6, r8
    2530:	79 04       	cpc	r7, r9
    2532:	70 f5       	brcc	.+92     	; 0x2590 <_ZN3tft4lineEjjjjj+0x14a>
		if (y0 > y1) {
    2534:	ae 14       	cp	r10, r14
    2536:	bf 04       	cpc	r11, r15
    2538:	30 f4       	brcc	.+12     	; 0x2546 <_ZN3tft4lineEjjjjj+0x100>
    253a:	c6 01       	movw	r24, r12
    253c:	6e 01       	movw	r12, r28
    253e:	ec 01       	movw	r28, r24
    2540:	c5 01       	movw	r24, r10
    2542:	57 01       	movw	r10, r14
    2544:	7c 01       	movw	r14, r24
    2546:	00 e0       	ldi	r16, 0x00	; 0
    2548:	10 e0       	ldi	r17, 0x00	; 0
    254a:	1e c0       	rjmp	.+60     	; 0x2588 <_ZN3tft4lineEjjjjj+0x142>
			swap(x0, x1);
			swap(y0, y1);
		}
		for (uint16_t y = y0; y <= y1; y++)
			point(x0 + dx * (y - y0) / dy * \
					(x0 > x1 ? -1 : 1), y, c);
    254c:	cc 16       	cp	r12, r28
    254e:	dd 06       	cpc	r13, r29
    2550:	18 f0       	brcs	.+6      	; 0x2558 <_ZN3tft4lineEjjjjj+0x112>
    2552:	21 e0       	ldi	r18, 0x01	; 1
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	02 c0       	rjmp	.+4      	; 0x255c <_ZN3tft4lineEjjjjj+0x116>
    2558:	2f ef       	ldi	r18, 0xFF	; 255
    255a:	3f ef       	ldi	r19, 0xFF	; 255
    255c:	c8 01       	movw	r24, r16
    255e:	b4 01       	movw	r22, r8
    2560:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <__udivmodhi4>
    2564:	26 9f       	mul	r18, r22
    2566:	c0 01       	movw	r24, r0
    2568:	27 9f       	mul	r18, r23
    256a:	90 0d       	add	r25, r0
    256c:	36 9f       	mul	r19, r22
    256e:	90 0d       	add	r25, r0
    2570:	11 24       	eor	r1, r1
    2572:	8c 0f       	add	r24, r28
    2574:	9d 1f       	adc	r25, r29
    2576:	b7 01       	movw	r22, r14
    2578:	a2 01       	movw	r20, r4
    257a:	0e 94 26 11 	call	0x224c	; 0x224c <_ZN3tftL5pointEjjj>
	if (dx < dy) {
		if (y0 > y1) {
			swap(x0, x1);
			swap(y0, y1);
		}
		for (uint16_t y = y0; y <= y1; y++)
    257e:	08 94       	sec
    2580:	e1 1c       	adc	r14, r1
    2582:	f1 1c       	adc	r15, r1
    2584:	06 0d       	add	r16, r6
    2586:	17 1d       	adc	r17, r7
    2588:	ae 14       	cp	r10, r14
    258a:	bf 04       	cpc	r11, r15
    258c:	f8 f6       	brcc	.-66     	; 0x254c <_ZN3tft4lineEjjjjj+0x106>
    258e:	2c c0       	rjmp	.+88     	; 0x25e8 <_ZN3tft4lineEjjjjj+0x1a2>
			point(x0 + dx * (y - y0) / dy * \
					(x0 > x1 ? -1 : 1), y, c);
	} else {
		if (x0 > x1) {
    2590:	cc 16       	cp	r12, r28
    2592:	dd 06       	cpc	r13, r29
    2594:	30 f4       	brcc	.+12     	; 0x25a2 <_ZN3tft4lineEjjjjj+0x15c>
    2596:	c6 01       	movw	r24, r12
    2598:	6e 01       	movw	r12, r28
    259a:	ec 01       	movw	r28, r24
    259c:	c5 01       	movw	r24, r10
    259e:	57 01       	movw	r10, r14
    25a0:	7c 01       	movw	r14, r24
    25a2:	00 e0       	ldi	r16, 0x00	; 0
    25a4:	10 e0       	ldi	r17, 0x00	; 0
    25a6:	1d c0       	rjmp	.+58     	; 0x25e2 <_ZN3tft4lineEjjjjj+0x19c>
			swap(x0, x1);
			swap(y0, y1);
		}
		for (uint16_t x = x0; x <= x1; x++)
			point(x, y0 + dy * (x - x0) / dx * \
					(y0 > y1 ? -1 : 1), c);
    25a8:	ae 14       	cp	r10, r14
    25aa:	bf 04       	cpc	r11, r15
    25ac:	18 f0       	brcs	.+6      	; 0x25b4 <_ZN3tft4lineEjjjjj+0x16e>
    25ae:	21 e0       	ldi	r18, 0x01	; 1
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	02 c0       	rjmp	.+4      	; 0x25b8 <_ZN3tft4lineEjjjjj+0x172>
    25b4:	2f ef       	ldi	r18, 0xFF	; 255
    25b6:	3f ef       	ldi	r19, 0xFF	; 255
    25b8:	c8 01       	movw	r24, r16
    25ba:	b3 01       	movw	r22, r6
    25bc:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <__udivmodhi4>
    25c0:	cb 01       	movw	r24, r22
    25c2:	28 9f       	mul	r18, r24
    25c4:	b0 01       	movw	r22, r0
    25c6:	29 9f       	mul	r18, r25
    25c8:	70 0d       	add	r23, r0
    25ca:	38 9f       	mul	r19, r24
    25cc:	70 0d       	add	r23, r0
    25ce:	11 24       	eor	r1, r1
    25d0:	6e 0d       	add	r22, r14
    25d2:	7f 1d       	adc	r23, r15
    25d4:	ce 01       	movw	r24, r28
    25d6:	a2 01       	movw	r20, r4
    25d8:	0e 94 26 11 	call	0x224c	; 0x224c <_ZN3tftL5pointEjjj>
	} else {
		if (x0 > x1) {
			swap(x0, x1);
			swap(y0, y1);
		}
		for (uint16_t x = x0; x <= x1; x++)
    25dc:	21 96       	adiw	r28, 0x01	; 1
    25de:	08 0d       	add	r16, r8
    25e0:	19 1d       	adc	r17, r9
    25e2:	cc 16       	cp	r12, r28
    25e4:	dd 06       	cpc	r13, r29
    25e6:	00 f7       	brcc	.-64     	; 0x25a8 <_ZN3tft4lineEjjjjj+0x162>
			point(x, y0 + dy * (x - x0) / dx * \
					(y0 > y1 ? -1 : 1), c);
	}
}
    25e8:	df 91       	pop	r29
    25ea:	cf 91       	pop	r28
    25ec:	1f 91       	pop	r17
    25ee:	0f 91       	pop	r16
    25f0:	ff 90       	pop	r15
    25f2:	ef 90       	pop	r14
    25f4:	df 90       	pop	r13
    25f6:	cf 90       	pop	r12
    25f8:	bf 90       	pop	r11
    25fa:	af 90       	pop	r10
    25fc:	9f 90       	pop	r9
    25fe:	8f 90       	pop	r8
    2600:	7f 90       	pop	r7
    2602:	6f 90       	pop	r6
    2604:	5f 90       	pop	r5
    2606:	4f 90       	pop	r4
    2608:	08 95       	ret

0000260a <_ZN3tft9setOrientEh>:
			tfthw::write16(c);
}

void tft::setOrient(uint8_t o)
{
	width = TFT_SIZE_WIDTH;
    260a:	40 e4       	ldi	r20, 0x40	; 64
    260c:	51 e0       	ldi	r21, 0x01	; 1
    260e:	50 93 6e 02 	sts	0x026E, r21
    2612:	40 93 6d 02 	sts	0x026D, r20
	height = TFT_SIZE_HEIGHT;
    2616:	20 ef       	ldi	r18, 0xF0	; 240
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	30 93 70 02 	sts	0x0270, r19
    261e:	20 93 6f 02 	sts	0x026F, r18
	if (o & Portrait)
    2622:	80 ff       	sbrs	r24, 0
    2624:	08 c0       	rjmp	.+16     	; 0x2636 <_ZN3tft9setOrientEh+0x2c>

template <typename Type>
inline void tft::swap(Type &a, Type &b)
{
	Type tmp = a;
	a = b;
    2626:	30 93 6e 02 	sts	0x026E, r19
    262a:	20 93 6d 02 	sts	0x026D, r18
	b = tmp;
    262e:	50 93 70 02 	sts	0x0270, r21
    2632:	40 93 6f 02 	sts	0x026F, r20
{
	width = TFT_SIZE_WIDTH;
	height = TFT_SIZE_HEIGHT;
	if (o & Portrait)
		swap(width, height);
	x = 0;
    2636:	10 92 6a 02 	sts	0x026A, r1
    263a:	10 92 69 02 	sts	0x0269, r1
	y = 0;
    263e:	10 92 6c 02 	sts	0x026C, r1
    2642:	10 92 6b 02 	sts	0x026B, r1
	orient = o;
    2646:	80 93 67 02 	sts	0x0267, r24
	tfthw::setOrient(o);
    264a:	0e 94 cf 10 	call	0x219e	; 0x219e <_ZN5tfthwL9setOrientEh>
}
    264e:	08 95       	ret

00002650 <_ZN3tft4initEv>:
		for (uint16_t c = width; c; c--)
			write16(background);
}
#endif

void tft::init()
    2650:	1f 93       	push	r17
static inline void tfthw::init()
{
	uint8_t c;
	uint16_t r;

	if (TFT_WCTRL == PORTC || TFT_WDATA == PORTC) {
    2652:	92 b1       	in	r25, 0x02	; 2
    2654:	88 b1       	in	r24, 0x08	; 8
    2656:	98 17       	cp	r25, r24
    2658:	21 f0       	breq	.+8      	; 0x2662 <_ZN3tft4initEv+0x12>
    265a:	98 b1       	in	r25, 0x08	; 8
    265c:	88 b1       	in	r24, 0x08	; 8
    265e:	98 17       	cp	r25, r24
    2660:	31 f4       	brne	.+12     	; 0x266e <_ZN3tft4initEv+0x1e>
		MCUCR |= 0x80;			// Disable JTAG
    2662:	85 b7       	in	r24, 0x35	; 53
    2664:	80 68       	ori	r24, 0x80	; 128
    2666:	85 bf       	out	0x35, r24	; 53
		MCUCR |= 0x80;
    2668:	85 b7       	in	r24, 0x35	; 53
    266a:	80 68       	ori	r24, 0x80	; 128
    266c:	85 bf       	out	0x35, r24	; 53
	}

	TFT_PCTRL = 0xFF & ~TFT_FMK;
    266e:	8f e7       	ldi	r24, 0x7F	; 127
    2670:	81 b9       	out	0x01, r24	; 1
	TFT_WCTRL = 0xFF & ~TFT_BLC;	// Disable background light
    2672:	8d ef       	ldi	r24, 0xFD	; 253
    2674:	82 b9       	out	0x02, r24	; 2
}

static inline void tfthw::mode(bool read)
{
	if (read) {
		TFT_PDATA = 0x00;
    2676:	17 b8       	out	0x07, r1	; 7
		TFT_WDATA = 0xFF;
    2678:	8f ef       	ldi	r24, 0xFF	; 255
    267a:	88 b9       	out	0x08, r24	; 8

	TFT_PCTRL = 0xFF & ~TFT_FMK;
	TFT_WCTRL = 0xFF & ~TFT_BLC;	// Disable background light
	mode(true);			// Read mode

	TFT_WCTRL &= ~TFT_RST;	// Hardware reset
    267c:	12 98       	cbi	0x02, 2	; 2
	TFT_WCTRL &= ~TFT_CS;
    267e:	10 98       	cbi	0x02, 0	; 2
	TFT_WCTRL |= TFT_WR;
    2680:	13 9a       	sbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_RD;
    2682:	15 9a       	sbi	0x02, 5	; 2
	TFT_WCTRL |= TFT_RS;
    2684:	14 9a       	sbi	0x02, 4	; 2
	TFT_WCTRL |= TFT_VSY;
    2686:	16 9a       	sbi	0x02, 6	; 2
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
    2688:	88 e2       	ldi	r24, 0x28	; 40
    268a:	8a 95       	dec	r24
    268c:	f1 f7       	brne	.-4      	; 0x268a <_ZN3tft4initEv+0x3a>
	_delay_us(10);		// Min: 10us
	TFT_WCTRL |= TFT_RST;
    268e:	12 9a       	sbi	0x02, 2	; 2
    2690:	80 eb       	ldi	r24, 0xB0	; 176
    2692:	94 e0       	ldi	r25, 0x04	; 4
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    2694:	2c e2       	ldi	r18, 0x2C	; 44
    2696:	31 e0       	ldi	r19, 0x01	; 1
    2698:	f9 01       	movw	r30, r18
    269a:	31 97       	sbiw	r30, 0x01	; 1
    269c:	f1 f7       	brne	.-4      	; 0x269a <_ZN3tft4initEv+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    269e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a0:	d9 f7       	brne	.-10     	; 0x2698 <_ZN3tft4initEv+0x48>
{
	if (read) {
		TFT_PDATA = 0x00;
		TFT_WDATA = 0xFF;
	} else
		TFT_PDATA = 0xFF;
    26a2:	8f ef       	ldi	r24, 0xFF	; 255
    26a4:	87 b9       	out	0x07, r24	; 7
	TFT_WCTRL |= TFT_VSY;
	_delay_us(10);		// Min: 10us
	TFT_WCTRL |= TFT_RST;
	_delay_ms(120);
	mode(false);		// Write mode
	cmd(0x28);		// Display OFF
    26a6:	88 e2       	ldi	r24, 0x28	; 40
    26a8:	0e 94 c9 10 	call	0x2192	; 0x2192 <_ZN5tfthwL3cmdEh>
	cmd(0x11);		// Sleep Out
    26ac:	81 e1       	ldi	r24, 0x11	; 17
    26ae:	0e 94 c9 10 	call	0x2192	; 0x2192 <_ZN5tfthwL3cmdEh>
    26b2:	80 eb       	ldi	r24, 0xB0	; 176
    26b4:	94 e0       	ldi	r25, 0x04	; 4
    26b6:	2c e2       	ldi	r18, 0x2C	; 44
    26b8:	31 e0       	ldi	r19, 0x01	; 1
    26ba:	f9 01       	movw	r30, r18
    26bc:	31 97       	sbiw	r30, 0x01	; 1
    26be:	f1 f7       	brne	.-4      	; 0x26bc <_ZN3tft4initEv+0x6c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c2:	d9 f7       	brne	.-10     	; 0x26ba <_ZN3tft4initEv+0x6a>
	_delay_ms(120);
	cmd(0x34);		// Tearing Effect Line OFF
    26c4:	84 e3       	ldi	r24, 0x34	; 52
    26c6:	0e 94 c9 10 	call	0x2192	; 0x2192 <_ZN5tfthwL3cmdEh>
	cmd(0x38);		// Idle Mode OFF
    26ca:	88 e3       	ldi	r24, 0x38	; 56
    26cc:	0e 94 c9 10 	call	0x2192	; 0x2192 <_ZN5tfthwL3cmdEh>
	cmd(0x13);		// Normal Display Mode ON
    26d0:	83 e1       	ldi	r24, 0x13	; 19
    26d2:	0e 94 c9 10 	call	0x2192	; 0x2192 <_ZN5tfthwL3cmdEh>
	cmd(0x20);		// Display Inversion OFF
    26d6:	80 e2       	ldi	r24, 0x20	; 32
    26d8:	0e 94 c9 10 	call	0x2192	; 0x2192 <_ZN5tfthwL3cmdEh>
	cmd(0x3A);		// COLMOD: Pixel Format Set
    26dc:	8a e3       	ldi	r24, 0x3A	; 58
    26de:	0e 94 c9 10 	call	0x2192	; 0x2192 <_ZN5tfthwL3cmdEh>
	TFT_WCTRL |= TFT_RS;
}

static inline void tfthw::data(uint8_t dat)
{
	TFT_WDATA = dat;
    26e2:	85 e5       	ldi	r24, 0x55	; 85
    26e4:	88 b9       	out	0x08, r24	; 8
	TFT_WCTRL &= ~TFT_WR;
    26e6:	13 98       	cbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_WR;
    26e8:	13 9a       	sbi	0x02, 3	; 2
	cmd(0x38);		// Idle Mode OFF
	cmd(0x13);		// Normal Display Mode ON
	cmd(0x20);		// Display Inversion OFF
	cmd(0x3A);		// COLMOD: Pixel Format Set
	data(0x55);		// 16 bits/pixel
	cmd(0x36);		// Memory Access Control
    26ea:	86 e3       	ldi	r24, 0x36	; 54
    26ec:	0e 94 c9 10 	call	0x2192	; 0x2192 <_ZN5tfthwL3cmdEh>
	TFT_WCTRL |= TFT_RS;
}

static inline void tfthw::data(uint8_t dat)
{
	TFT_WDATA = dat;
    26f0:	88 e4       	ldi	r24, 0x48	; 72
    26f2:	88 b9       	out	0x08, r24	; 8
	TFT_WCTRL &= ~TFT_WR;
    26f4:	13 98       	cbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_WR;
    26f6:	13 9a       	sbi	0x02, 3	; 2
	cmd(0x20);		// Display Inversion OFF
	cmd(0x3A);		// COLMOD: Pixel Format Set
	data(0x55);		// 16 bits/pixel
	cmd(0x36);		// Memory Access Control
	data(0x48);		// Column Adress Order, BGR
	cmd(0x2C);		// Memory Write
    26f8:	8c e2       	ldi	r24, 0x2C	; 44
    26fa:	0e 94 c9 10 	call	0x2192	; 0x2192 <_ZN5tfthwL3cmdEh>
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	0e c0       	rjmp	.+28     	; 0x2720 <_ZN3tft4initEv+0xd0>
	TFT_WCTRL |= TFT_RS;
}

static inline void tfthw::data(uint8_t dat)
{
	TFT_WDATA = dat;
    2704:	18 b8       	out	0x08, r1	; 8
	TFT_WCTRL &= ~TFT_WR;
    2706:	13 98       	cbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_WR;
    2708:	13 9a       	sbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_RS;
}

static inline void tfthw::data(uint8_t dat)
{
	TFT_WDATA = dat;
    270a:	18 b8       	out	0x08, r1	; 8
	TFT_WCTRL &= ~TFT_WR;
    270c:	13 98       	cbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_WR;
    270e:	13 9a       	sbi	0x02, 3	; 2
	data(0x55);		// 16 bits/pixel
	cmd(0x36);		// Memory Access Control
	data(0x48);		// Column Adress Order, BGR
	cmd(0x2C);		// Memory Write
	for (r = 0; r < 320; r++)	// Black screen
		for (c = 0; c < 240; c++) {
    2710:	2f 5f       	subi	r18, 0xFF	; 255
    2712:	20 3f       	cpi	r18, 0xF0	; 240
    2714:	b9 f7       	brne	.-18     	; 0x2704 <_ZN3tft4initEv+0xb4>
	cmd(0x3A);		// COLMOD: Pixel Format Set
	data(0x55);		// 16 bits/pixel
	cmd(0x36);		// Memory Access Control
	data(0x48);		// Column Adress Order, BGR
	cmd(0x2C);		// Memory Write
	for (r = 0; r < 320; r++)	// Black screen
    2716:	01 96       	adiw	r24, 0x01	; 1
    2718:	21 e0       	ldi	r18, 0x01	; 1
    271a:	80 34       	cpi	r24, 0x40	; 64
    271c:	92 07       	cpc	r25, r18
    271e:	11 f0       	breq	.+4      	; 0x2724 <_ZN3tft4initEv+0xd4>
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	f0 cf       	rjmp	.-32     	; 0x2704 <_ZN3tft4initEv+0xb4>
		for (c = 0; c < 240; c++) {
			data(0x00);
			data(0x00);
		}
	cmd(0xB1);		// Frame Rate control, normal
    2724:	81 eb       	ldi	r24, 0xB1	; 177
    2726:	0e 94 c9 10 	call	0x2192	; 0x2192 <_ZN5tfthwL3cmdEh>
	TFT_WCTRL |= TFT_RS;
}

static inline void tfthw::data(uint8_t dat)
{
	TFT_WDATA = dat;
    272a:	18 b8       	out	0x08, r1	; 8
	TFT_WCTRL &= ~TFT_WR;
    272c:	13 98       	cbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_WR;
    272e:	13 9a       	sbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_RS;
}

static inline void tfthw::data(uint8_t dat)
{
	TFT_WDATA = dat;
    2730:	18 e1       	ldi	r17, 0x18	; 24
    2732:	18 b9       	out	0x08, r17	; 8
	TFT_WCTRL &= ~TFT_WR;
    2734:	13 98       	cbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_WR;
    2736:	13 9a       	sbi	0x02, 3	; 2
			data(0x00);
		}
	cmd(0xB1);		// Frame Rate control, normal
	data(0x00);		// Faster
	data(0x18);
	cmd(0xB3);		// Frame Rate control, partial
    2738:	83 eb       	ldi	r24, 0xB3	; 179
    273a:	0e 94 c9 10 	call	0x2192	; 0x2192 <_ZN5tfthwL3cmdEh>
	TFT_WCTRL |= TFT_RS;
}

static inline void tfthw::data(uint8_t dat)
{
	TFT_WDATA = dat;
    273e:	18 b8       	out	0x08, r1	; 8
	TFT_WCTRL &= ~TFT_WR;
    2740:	13 98       	cbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_WR;
    2742:	13 9a       	sbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_RS;
}

static inline void tfthw::data(uint8_t dat)
{
	TFT_WDATA = dat;
    2744:	18 b9       	out	0x08, r17	; 8
	TFT_WCTRL &= ~TFT_WR;
    2746:	13 98       	cbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_WR;
    2748:	13 9a       	sbi	0x02, 3	; 2
	data(0x00);		// Faster
	data(0x18);
	cmd(0xB3);		// Frame Rate control, partial
	data(0x00);		// Faster
	data(0x18);
	cmd(0x29);		// Display On
    274a:	89 e2       	ldi	r24, 0x29	; 41
    274c:	0e 94 c9 10 	call	0x2192	; 0x2192 <_ZN5tfthwL3cmdEh>
{
	tfthw::init();
	x = 0;
    2750:	10 92 6a 02 	sts	0x026A, r1
    2754:	10 92 69 02 	sts	0x0269, r1
	y = 0;
    2758:	10 92 6c 02 	sts	0x026C, r1
    275c:	10 92 6b 02 	sts	0x026B, r1
	d.vsp = vsMaximum();
	setTopMask(0);
	setBottomMask(0);
	setTransform(false);
#endif
	zoom = 1;
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	80 93 66 02 	sts	0x0266, r24
	setOrient(TFT_DEF_ORIENT);
    2766:	0e 94 05 13 	call	0x260a	; 0x260a <_ZN3tft9setOrientEh>
	tabSize = 4;
    276a:	84 e0       	ldi	r24, 0x04	; 4
    276c:	80 93 68 02 	sts	0x0268, r24
	//width = SIZE_W;
	//height = SIZE_H;
	foreground = DEF_FGC;
    2770:	8f ef       	ldi	r24, 0xFF	; 255
    2772:	9f ef       	ldi	r25, 0xFF	; 255
    2774:	90 93 72 02 	sts	0x0272, r25
    2778:	80 93 71 02 	sts	0x0271, r24
	background = DEF_BGC;
    277c:	10 92 74 02 	sts	0x0274, r1
    2780:	10 92 73 02 	sts	0x0273, r1
}
    2784:	1f 91       	pop	r17
    2786:	08 95       	ret

00002788 <_ZN3tft8drawCharEc>:
		clean();
#endif
	}
}

void tft::drawChar(char ch)
    2788:	bf 92       	push	r11
    278a:	cf 92       	push	r12
    278c:	df 92       	push	r13
    278e:	ef 92       	push	r14
    2790:	ff 92       	push	r15
    2792:	0f 93       	push	r16
    2794:	1f 93       	push	r17
    2796:	cf 93       	push	r28
    2798:	df 93       	push	r29
    279a:	18 2f       	mov	r17, r24
	using namespace tfthw;
#ifdef TFT_CHECKING
	if ((int16_t)x() >= (int16_t)width() || (int16_t)y() >= (int16_t)height())
		return;
#endif
	if ((int16_t)(x + FONT_WIDTH * zoom) < 0)
    279c:	20 91 69 02 	lds	r18, 0x0269
    27a0:	30 91 6a 02 	lds	r19, 0x026A
    27a4:	e0 91 eb 01 	lds	r30, 0x01EB
    27a8:	f0 91 ec 01 	lds	r31, 0x01EC
    27ac:	50 81       	ld	r21, Z
    27ae:	40 91 66 02 	lds	r20, 0x0266
    27b2:	45 9f       	mul	r20, r21
    27b4:	c0 01       	movw	r24, r0
    27b6:	11 24       	eor	r1, r1
    27b8:	82 0f       	add	r24, r18
    27ba:	93 1f       	adc	r25, r19
    27bc:	97 fd       	sbrc	r25, 7
    27be:	5c c0       	rjmp	.+184    	; 0x2878 <_ZN3tft8drawCharEc+0xf0>
		return;
	uint8_t h = FONT_HEIGHT * zoom, w = FONT_WIDTH * zoom;
    27c0:	81 81       	ldd	r24, Z+1	; 0x01
    27c2:	48 9f       	mul	r20, r24
    27c4:	b0 2c       	mov	r11, r0
    27c6:	11 24       	eor	r1, r1
    27c8:	45 9f       	mul	r20, r21
    27ca:	e0 2c       	mov	r14, r0
    27cc:	11 24       	eor	r1, r1
	bool yTransform = transform() && portrait() && yy < bottomEdge() && yy + yStop - yStart > bottomEdge();
	uint8_t xEnd = xTransform ? bottomEdge() - xx : xStop;
draw:
	area(xx, yy, xEnd - xStart, h);
#else
	area(x, y, w, h);
    27ce:	60 91 6b 02 	lds	r22, 0x026B
    27d2:	70 91 6c 02 	lds	r23, 0x026C
    27d6:	c9 01       	movw	r24, r18
    27d8:	4e 2d       	mov	r20, r14
    27da:	50 e0       	ldi	r21, 0x00	; 0
    27dc:	2b 2d       	mov	r18, r11
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	0e 94 f6 10 	call	0x21ec	; 0x21ec <_ZN5tfthwL4areaEjjjj>
	static inline void setBGLight(bool ctrl);
	static inline void setOrient(uint8_t o);
	static inline void setPage(const uint16_t start, const uint16_t end);
	static inline void setColumn(const uint16_t start, const uint16_t end);
	// 0x2c Write, 0x2e Read, 0x3c / 0x3e Continue, 0x00 NOP
	static inline void memWrite() {cmd(0x2c);}
    27e4:	8c e2       	ldi	r24, 0x2C	; 44
    27e6:	0e 94 c9 10 	call	0x2192	; 0x2192 <_ZN5tfthwL3cmdEh>
    27ea:	ff 24       	eor	r15, r15
		unsigned char c;
#ifdef TFT_VERTICAL_SCROLLING
		c = pgm_read_byte(font->ptr + ((uint8_t)ch - font->offset) * font->size + yi / zoom) << (xStart / zoom);
		for (uint8_t xi = xStart; xi < xEnd; xi++) {
#else
		c = pgm_read_byte(font->ptr + ((uint8_t)ch - font->offset) * font->size + yi / zoom);
    27ec:	c1 2e       	mov	r12, r17
    27ee:	dd 24       	eor	r13, r13
    27f0:	40 c0       	rjmp	.+128    	; 0x2872 <_ZN3tft8drawCharEc+0xea>
    27f2:	e0 91 eb 01 	lds	r30, 0x01EB
    27f6:	f0 91 ec 01 	lds	r31, 0x01EC
    27fa:	60 91 66 02 	lds	r22, 0x0266
    27fe:	8f 2d       	mov	r24, r15
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	70 e0       	ldi	r23, 0x00	; 0
    2804:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <__udivmodhi4>
    2808:	83 81       	ldd	r24, Z+3	; 0x03
    280a:	96 01       	movw	r18, r12
    280c:	28 1b       	sub	r18, r24
    280e:	31 09       	sbc	r19, r1
    2810:	82 81       	ldd	r24, Z+2	; 0x02
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	ac 01       	movw	r20, r24
    2816:	24 9f       	mul	r18, r20
    2818:	c0 01       	movw	r24, r0
    281a:	25 9f       	mul	r18, r21
    281c:	90 0d       	add	r25, r0
    281e:	34 9f       	mul	r19, r20
    2820:	90 0d       	add	r25, r0
    2822:	11 24       	eor	r1, r1
    2824:	86 0f       	add	r24, r22
    2826:	97 1f       	adc	r25, r23
    2828:	04 80       	ldd	r0, Z+4	; 0x04
    282a:	f5 81       	ldd	r31, Z+5	; 0x05
    282c:	e0 2d       	mov	r30, r0
    282e:	e8 0f       	add	r30, r24
    2830:	f9 1f       	adc	r31, r25
    2832:	04 91       	lpm	r16, Z+
    2834:	10 e0       	ldi	r17, 0x00	; 0
    2836:	c1 e0       	ldi	r28, 0x01	; 1
    2838:	d0 e0       	ldi	r29, 0x00	; 0
    283a:	18 c0       	rjmp	.+48     	; 0x286c <_ZN3tft8drawCharEc+0xe4>
		for (uint8_t xi = 0; xi < w; xi++) {
#endif
			if (c & 0x80)
    283c:	07 ff       	sbrs	r16, 7
    283e:	05 c0       	rjmp	.+10     	; 0x284a <_ZN3tft8drawCharEc+0xc2>
				write16(foreground);
    2840:	80 91 71 02 	lds	r24, 0x0271
    2844:	90 91 72 02 	lds	r25, 0x0272
    2848:	04 c0       	rjmp	.+8      	; 0x2852 <_ZN3tft8drawCharEc+0xca>
			else
				write16(background);
    284a:	80 91 73 02 	lds	r24, 0x0273
    284e:	90 91 74 02 	lds	r25, 0x0274
    2852:	0e 94 c2 10 	call	0x2184	; 0x2184 <_ZN5tfthwL7write16Ej>
			if ((xi + 1) % zoom == 0)
    2856:	60 91 66 02 	lds	r22, 0x0266
    285a:	ce 01       	movw	r24, r28
    285c:	70 e0       	ldi	r23, 0x00	; 0
    285e:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__divmodhi4>
    2862:	89 2b       	or	r24, r25
    2864:	09 f4       	brne	.+2      	; 0x2868 <_ZN3tft8drawCharEc+0xe0>
				c <<= 1;
    2866:	00 0f       	add	r16, r16
#ifdef TFT_VERTICAL_SCROLLING
		c = pgm_read_byte(font->ptr + ((uint8_t)ch - font->offset) * font->size + yi / zoom) << (xStart / zoom);
		for (uint8_t xi = xStart; xi < xEnd; xi++) {
#else
		c = pgm_read_byte(font->ptr + ((uint8_t)ch - font->offset) * font->size + yi / zoom);
		for (uint8_t xi = 0; xi < w; xi++) {
    2868:	1f 5f       	subi	r17, 0xFF	; 255
    286a:	21 96       	adiw	r28, 0x01	; 1
    286c:	1e 15       	cp	r17, r14
    286e:	30 f3       	brcs	.-52     	; 0x283c <_ZN3tft8drawCharEc+0xb4>
			area(x, topEdge(), w, h);
			memWrite();
			yTransform = false;
		}
#else
	for (uint8_t yi = 0; yi < h; yi++) {
    2870:	f3 94       	inc	r15
    2872:	fb 14       	cp	r15, r11
    2874:	08 f4       	brcc	.+2      	; 0x2878 <_ZN3tft8drawCharEc+0xf0>
    2876:	bd cf       	rjmp	.-134    	; 0x27f2 <_ZN3tft8drawCharEc+0x6a>
		xTransform = false;
		goto draw;
	}
#endif
#endif
}
    2878:	df 91       	pop	r29
    287a:	cf 91       	pop	r28
    287c:	1f 91       	pop	r17
    287e:	0f 91       	pop	r16
    2880:	ff 90       	pop	r15
    2882:	ef 90       	pop	r14
    2884:	df 90       	pop	r13
    2886:	cf 90       	pop	r12
    2888:	bf 90       	pop	r11
    288a:	08 95       	ret

0000288c <_ZN3tft10drawImage2EPKhjjjjb>:

void tft::drawImage2(const uint8_t *ptr, uint16_t x, uint16_t y, uint16_t w, uint16_t h, bool progMem)
    288c:	9f 92       	push	r9
    288e:	af 92       	push	r10
    2890:	bf 92       	push	r11
    2892:	cf 92       	push	r12
    2894:	df 92       	push	r13
    2896:	ef 92       	push	r14
    2898:	ff 92       	push	r15
    289a:	0f 93       	push	r16
    289c:	1f 93       	push	r17
    289e:	cf 93       	push	r28
    28a0:	df 93       	push	r29
    28a2:	ec 01       	movw	r28, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	59 01       	movw	r10, r18
    28a8:	68 01       	movw	r12, r16
    28aa:	9e 2c       	mov	r9, r14
#endif

#ifdef TFT_VERTICAL_SCROLLING
disp:
#endif
	area(x, y, w, h);
    28ac:	ba 01       	movw	r22, r20
    28ae:	a9 01       	movw	r20, r18
    28b0:	98 01       	movw	r18, r16
    28b2:	0e 94 f6 10 	call	0x21ec	; 0x21ec <_ZN5tfthwL4areaEjjjj>
    28b6:	8c e2       	ldi	r24, 0x2C	; 44
    28b8:	0e 94 c9 10 	call	0x2192	; 0x2192 <_ZN5tfthwL3cmdEh>
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	10 e0       	ldi	r17, 0x00	; 0
    28c0:	ee 24       	eor	r14, r14
    28c2:	28 c0       	rjmp	.+80     	; 0x2914 <_ZN3tft10drawImage2EPKhjjjjb+0x88>
			if (i)
				c <<= i;
		}
#endif
		for (uint8_t xx = 0; xx < w; xx++) {
			if (i++ == 0)
    28c4:	02 2f       	mov	r16, r18
    28c6:	0f 5f       	subi	r16, 0xFF	; 255
    28c8:	22 23       	and	r18, r18
    28ca:	51 f4       	brne	.+20     	; 0x28e0 <_ZN3tft10drawImage2EPKhjjjjb+0x54>
    28cc:	ce 01       	movw	r24, r28
    28ce:	01 96       	adiw	r24, 0x01	; 1
				c = progMem ? pgm_read_byte(ptr++) : *ptr++;
    28d0:	99 20       	and	r9, r9
    28d2:	21 f0       	breq	.+8      	; 0x28dc <_ZN3tft10drawImage2EPKhjjjjb+0x50>
    28d4:	fe 01       	movw	r30, r28
    28d6:	ec 01       	movw	r28, r24
    28d8:	14 91       	lpm	r17, Z+
    28da:	02 c0       	rjmp	.+4      	; 0x28e0 <_ZN3tft10drawImage2EPKhjjjjb+0x54>
    28dc:	18 81       	ld	r17, Y
    28de:	ec 01       	movw	r28, r24
			if (c & 0x80)
    28e0:	17 ff       	sbrs	r17, 7
    28e2:	05 c0       	rjmp	.+10     	; 0x28ee <_ZN3tft10drawImage2EPKhjjjjb+0x62>
				write16(foreground);
    28e4:	80 91 71 02 	lds	r24, 0x0271
    28e8:	90 91 72 02 	lds	r25, 0x0272
    28ec:	04 c0       	rjmp	.+8      	; 0x28f6 <_ZN3tft10drawImage2EPKhjjjjb+0x6a>
			else
				write16(background);
    28ee:	80 91 73 02 	lds	r24, 0x0273
    28f2:	90 91 74 02 	lds	r25, 0x0274
    28f6:	0e 94 c2 10 	call	0x2184	; 0x2184 <_ZN5tfthwL7write16Ej>
			if (i == 8)
    28fa:	08 30       	cpi	r16, 0x08	; 8
    28fc:	11 f4       	brne	.+4      	; 0x2902 <_ZN3tft10drawImage2EPKhjjjjb+0x76>
    28fe:	00 e0       	ldi	r16, 0x00	; 0
    2900:	01 c0       	rjmp	.+2      	; 0x2904 <_ZN3tft10drawImage2EPKhjjjjb+0x78>
				i = 0;
			else
				c <<= 1;
    2902:	11 0f       	add	r17, r17
			i %= 8;
			if (i)
				c <<= i;
		}
#endif
		for (uint8_t xx = 0; xx < w; xx++) {
    2904:	f3 94       	inc	r15
    2906:	20 2f       	mov	r18, r16
    2908:	8f 2d       	mov	r24, r15
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	8a 15       	cp	r24, r10
    290e:	9b 05       	cpc	r25, r11
    2910:	c8 f2       	brcs	.-78     	; 0x28c4 <_ZN3tft10drawImage2EPKhjjjjb+0x38>
	memWrite();
#ifdef TFT_VERTICAL_SCROLLING
	//bool xTransform = transform() && !portrait() && x < bottomEdge() && x + w - xs - xe > bottomEdge();
	bool yTransform = transform() && portrait() && y < bottomEdge() && y + h > bottomEdge();
#endif
	for (uint8_t yy = 0; yy < h; yy++) {
    2912:	e3 94       	inc	r14
    2914:	8e 2d       	mov	r24, r14
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	8c 15       	cp	r24, r12
    291a:	9d 05       	cpc	r25, r13
    291c:	10 f4       	brcc	.+4      	; 0x2922 <_ZN3tft10drawImage2EPKhjjjjb+0x96>
    291e:	ff 24       	eor	r15, r15
    2920:	f3 cf       	rjmp	.-26     	; 0x2908 <_ZN3tft10drawImage2EPKhjjjjb+0x7c>
				i = 0;
			else
				c <<= 1;
		}
	}
}
    2922:	df 91       	pop	r29
    2924:	cf 91       	pop	r28
    2926:	1f 91       	pop	r17
    2928:	0f 91       	pop	r16
    292a:	ff 90       	pop	r15
    292c:	ef 90       	pop	r14
    292e:	df 90       	pop	r13
    2930:	cf 90       	pop	r12
    2932:	bf 90       	pop	r11
    2934:	af 90       	pop	r10
    2936:	9f 90       	pop	r9
    2938:	08 95       	ret

0000293a <_ZN3tft17drawImage2AlignedEPKhjjjjb>:

void tft::drawImage2Aligned(const uint8_t *ptr, uint16_t x, uint16_t y, uint16_t w, uint16_t h, bool progMem)
    293a:	9f 92       	push	r9
    293c:	af 92       	push	r10
    293e:	bf 92       	push	r11
    2940:	cf 92       	push	r12
    2942:	df 92       	push	r13
    2944:	ef 92       	push	r14
    2946:	ff 92       	push	r15
    2948:	0f 93       	push	r16
    294a:	1f 93       	push	r17
    294c:	cf 93       	push	r28
    294e:	df 93       	push	r29
    2950:	ec 01       	movw	r28, r24
    2952:	cb 01       	movw	r24, r22
    2954:	59 01       	movw	r10, r18
    2956:	68 01       	movw	r12, r16
    2958:	9e 2c       	mov	r9, r14
	using namespace tfthw;
	uint8_t i, c = 0;
	// TODO: zooming support
	// TODO: vertical scrolling support

	area(x, y, w, h);
    295a:	ba 01       	movw	r22, r20
    295c:	a9 01       	movw	r20, r18
    295e:	98 01       	movw	r18, r16
    2960:	0e 94 f6 10 	call	0x21ec	; 0x21ec <_ZN5tfthwL4areaEjjjj>
    2964:	8c e2       	ldi	r24, 0x2C	; 44
    2966:	0e 94 c9 10 	call	0x2192	; 0x2192 <_ZN5tfthwL3cmdEh>
    296a:	10 e0       	ldi	r17, 0x00	; 0
    296c:	ee 24       	eor	r14, r14
    296e:	28 c0       	rjmp	.+80     	; 0x29c0 <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x86>
	memWrite();
	for (uint8_t yy = 0; yy < h; yy++) {
		i = 0;
		for (uint8_t xx = 0; xx < w; xx++) {
			if (i++ == 0)
    2970:	02 2f       	mov	r16, r18
    2972:	0f 5f       	subi	r16, 0xFF	; 255
    2974:	22 23       	and	r18, r18
    2976:	51 f4       	brne	.+20     	; 0x298c <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x52>
    2978:	ce 01       	movw	r24, r28
    297a:	01 96       	adiw	r24, 0x01	; 1
				c = progMem ? pgm_read_byte(ptr++) : *ptr++;
    297c:	99 20       	and	r9, r9
    297e:	21 f0       	breq	.+8      	; 0x2988 <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x4e>
    2980:	fe 01       	movw	r30, r28
    2982:	ec 01       	movw	r28, r24
    2984:	14 91       	lpm	r17, Z+
    2986:	02 c0       	rjmp	.+4      	; 0x298c <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x52>
    2988:	18 81       	ld	r17, Y
    298a:	ec 01       	movw	r28, r24
			if (c & 0x80)
    298c:	17 ff       	sbrs	r17, 7
    298e:	05 c0       	rjmp	.+10     	; 0x299a <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x60>
				write16(foreground);
    2990:	80 91 71 02 	lds	r24, 0x0271
    2994:	90 91 72 02 	lds	r25, 0x0272
    2998:	04 c0       	rjmp	.+8      	; 0x29a2 <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x68>
			else
				write16(background);
    299a:	80 91 73 02 	lds	r24, 0x0273
    299e:	90 91 74 02 	lds	r25, 0x0274
    29a2:	0e 94 c2 10 	call	0x2184	; 0x2184 <_ZN5tfthwL7write16Ej>
			if (i == 8)
    29a6:	08 30       	cpi	r16, 0x08	; 8
    29a8:	11 f4       	brne	.+4      	; 0x29ae <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x74>
    29aa:	00 e0       	ldi	r16, 0x00	; 0
    29ac:	01 c0       	rjmp	.+2      	; 0x29b0 <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x76>
				i = 0;
			else
				c <<= 1;
    29ae:	11 0f       	add	r17, r17

	area(x, y, w, h);
	memWrite();
	for (uint8_t yy = 0; yy < h; yy++) {
		i = 0;
		for (uint8_t xx = 0; xx < w; xx++) {
    29b0:	f3 94       	inc	r15
    29b2:	20 2f       	mov	r18, r16
    29b4:	8f 2d       	mov	r24, r15
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	8a 15       	cp	r24, r10
    29ba:	9b 05       	cpc	r25, r11
    29bc:	c8 f2       	brcs	.-78     	; 0x2970 <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x36>
	// TODO: zooming support
	// TODO: vertical scrolling support

	area(x, y, w, h);
	memWrite();
	for (uint8_t yy = 0; yy < h; yy++) {
    29be:	e3 94       	inc	r14
    29c0:	8e 2d       	mov	r24, r14
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	8c 15       	cp	r24, r12
    29c6:	9d 05       	cpc	r25, r13
    29c8:	18 f4       	brcc	.+6      	; 0x29d0 <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x96>
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	ff 24       	eor	r15, r15
    29ce:	f2 cf       	rjmp	.-28     	; 0x29b4 <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x7a>
				i = 0;
			else
				c <<= 1;
		}
	}
}
    29d0:	df 91       	pop	r29
    29d2:	cf 91       	pop	r28
    29d4:	1f 91       	pop	r17
    29d6:	0f 91       	pop	r16
    29d8:	ff 90       	pop	r15
    29da:	ef 90       	pop	r14
    29dc:	df 90       	pop	r13
    29de:	cf 90       	pop	r12
    29e0:	bf 90       	pop	r11
    29e2:	af 90       	pop	r10
    29e4:	9f 90       	pop	r9
    29e6:	08 95       	ret

000029e8 <_ZN3tft4fillEj>:
	if (out == NULL)
		out = fdevopen(tftputchar, NULL);
	return out;
}

void tft::fill(uint16_t clr)
    29e8:	0f 93       	push	r16
    29ea:	1f 93       	push	r17
    29ec:	cf 93       	push	r28
    29ee:	df 93       	push	r29
    29f0:	8c 01       	movw	r16, r24
{
	using namespace tfthw;
	uint8_t ch = clr / 0x0100, cl = clr % 0x0100;
	uint16_t x = width, y;
    29f2:	c0 91 6d 02 	lds	r28, 0x026D
    29f6:	d0 91 6e 02 	lds	r29, 0x026E
}

namespace tfthw
{
	static inline void area(uint16_t x, uint16_t y, uint16_t w, uint16_t h);
	static inline void all() {area(0, 0, tft::width, tft::height);}
    29fa:	20 91 6f 02 	lds	r18, 0x026F
    29fe:	30 91 70 02 	lds	r19, 0x0270
    2a02:	80 e0       	ldi	r24, 0x00	; 0
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	60 e0       	ldi	r22, 0x00	; 0
    2a08:	70 e0       	ldi	r23, 0x00	; 0
    2a0a:	ae 01       	movw	r20, r28
    2a0c:	0e 94 f6 10 	call	0x21ec	; 0x21ec <_ZN5tfthwL4areaEjjjj>
    2a10:	8c e2       	ldi	r24, 0x2C	; 44
    2a12:	0e 94 c9 10 	call	0x2192	; 0x2192 <_ZN5tfthwL3cmdEh>
	all();
	memWrite();
	while (x--) {
		y = height;
    2a16:	50 91 6f 02 	lds	r21, 0x026F
    2a1a:	40 91 70 02 	lds	r20, 0x0270
    2a1e:	0c c0       	rjmp	.+24     	; 0x2a38 <_ZN3tft4fillEj+0x50>
	TFT_WCTRL |= TFT_RS;
}

static inline void tfthw::data(uint8_t dat)
{
	TFT_WDATA = dat;
    2a20:	18 b9       	out	0x08, r17	; 8
	TFT_WCTRL &= ~TFT_WR;
    2a22:	13 98       	cbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_WR;
    2a24:	13 9a       	sbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_RS;
}

static inline void tfthw::data(uint8_t dat)
{
	TFT_WDATA = dat;
    2a26:	08 b9       	out	0x08, r16	; 8
	TFT_WCTRL &= ~TFT_WR;
    2a28:	13 98       	cbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_WR;
    2a2a:	13 9a       	sbi	0x02, 3	; 2
    2a2c:	21 50       	subi	r18, 0x01	; 1
    2a2e:	30 40       	sbci	r19, 0x00	; 0
		while (y--) {
    2a30:	21 15       	cp	r18, r1
    2a32:	31 05       	cpc	r19, r1
    2a34:	a9 f7       	brne	.-22     	; 0x2a20 <_ZN3tft4fillEj+0x38>
    2a36:	21 97       	sbiw	r28, 0x01	; 1
	using namespace tfthw;
	uint8_t ch = clr / 0x0100, cl = clr % 0x0100;
	uint16_t x = width, y;
	all();
	memWrite();
	while (x--) {
    2a38:	20 97       	sbiw	r28, 0x00	; 0
    2a3a:	21 f0       	breq	.+8      	; 0x2a44 <_ZN3tft4fillEj+0x5c>
    2a3c:	85 2f       	mov	r24, r21
    2a3e:	94 2f       	mov	r25, r20
    2a40:	9c 01       	movw	r18, r24
    2a42:	f6 cf       	rjmp	.-20     	; 0x2a30 <_ZN3tft4fillEj+0x48>
		while (y--) {
			data(ch);
			data(cl);
		}
	}
}
    2a44:	df 91       	pop	r29
    2a46:	cf 91       	pop	r28
    2a48:	1f 91       	pop	r17
    2a4a:	0f 91       	pop	r16
    2a4c:	08 95       	ret

00002a4e <_ZN3tft7newlineEv>:
#endif

void tft::newline()
{
	using namespace tfthw;
	x = 0;
    2a4e:	10 92 6a 02 	sts	0x026A, r1
    2a52:	10 92 69 02 	sts	0x0269, r1
	y += FONT_HEIGHT * zoom;
    2a56:	e0 91 eb 01 	lds	r30, 0x01EB
    2a5a:	f0 91 ec 01 	lds	r31, 0x01EC
    2a5e:	20 91 66 02 	lds	r18, 0x0266
    2a62:	81 81       	ldd	r24, Z+1	; 0x01
    2a64:	28 9f       	mul	r18, r24
    2a66:	90 01       	movw	r18, r0
    2a68:	11 24       	eor	r1, r1
    2a6a:	80 91 6b 02 	lds	r24, 0x026B
    2a6e:	90 91 6c 02 	lds	r25, 0x026C
    2a72:	82 0f       	add	r24, r18
    2a74:	93 1f       	adc	r25, r19
    2a76:	90 93 6c 02 	sts	0x026C, r25
    2a7a:	80 93 6b 02 	sts	0x026B, r24
	if (y + FONT_HEIGHT * zoom > height) {
    2a7e:	82 0f       	add	r24, r18
    2a80:	93 1f       	adc	r25, r19
    2a82:	20 91 6f 02 	lds	r18, 0x026F
    2a86:	30 91 70 02 	lds	r19, 0x0270
    2a8a:	28 17       	cp	r18, r24
    2a8c:	39 07       	cpc	r19, r25
    2a8e:	70 f4       	brcc	.+28     	; 0x2aac <_ZN3tft7newlineEv+0x5e>
#endif

	void line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t c);
	void frame(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t s, uint16_t c);
	void fill(uint16_t clr);
	static inline void clean() {fill(background); x = 0; y = 0;}
    2a90:	80 91 73 02 	lds	r24, 0x0273
    2a94:	90 91 74 02 	lds	r25, 0x0274
    2a98:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN3tft4fillEj>
    2a9c:	10 92 6a 02 	sts	0x026A, r1
    2aa0:	10 92 69 02 	sts	0x0269, r1
    2aa4:	10 92 6c 02 	sts	0x026C, r1
    2aa8:	10 92 6b 02 	sts	0x026B, r1
    2aac:	08 95       	ret

00002aae <_ZN3tftL4nextEv>:
	if (transform() && !portrait()) {
		uint16_t xt = vsTransformBack(x);
		x = vsTransform(xt + FONT_WIDTH * zoom);
	} else {
#endif
		x += FONT_WIDTH * zoom;
    2aae:	e0 91 eb 01 	lds	r30, 0x01EB
    2ab2:	f0 91 ec 01 	lds	r31, 0x01EC
    2ab6:	20 91 66 02 	lds	r18, 0x0266
    2aba:	80 81       	ld	r24, Z
    2abc:	28 9f       	mul	r18, r24
    2abe:	90 01       	movw	r18, r0
    2ac0:	11 24       	eor	r1, r1
    2ac2:	80 91 69 02 	lds	r24, 0x0269
    2ac6:	90 91 6a 02 	lds	r25, 0x026A
    2aca:	82 0f       	add	r24, r18
    2acc:	93 1f       	adc	r25, r19
    2ace:	90 93 6a 02 	sts	0x026A, r25
    2ad2:	80 93 69 02 	sts	0x0269, r24
		if (x + FONT_WIDTH * zoom > width)
    2ad6:	82 0f       	add	r24, r18
    2ad8:	93 1f       	adc	r25, r19
    2ada:	20 91 6d 02 	lds	r18, 0x026D
    2ade:	30 91 6e 02 	lds	r19, 0x026E
    2ae2:	28 17       	cp	r18, r24
    2ae4:	39 07       	cpc	r19, r25
    2ae6:	10 f4       	brcc	.+4      	; 0x2aec <_ZN3tftL4nextEv+0x3e>
			newline();
    2ae8:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <_ZN3tft7newlineEv>
    2aec:	08 95       	ret

00002aee <_ZN3tftL7putCharEc>:

FILE *tftout();

// Defined as inline to execute faster

static inline void tft::putChar(const char c)
    2aee:	cf 93       	push	r28
    2af0:	df 93       	push	r29
{
	switch (c) {
    2af2:	89 30       	cpi	r24, 0x09	; 9
    2af4:	29 f0       	breq	.+10     	; 0x2b00 <_ZN3tftL7putCharEc+0x12>
    2af6:	8a 30       	cpi	r24, 0x0A	; 10
    2af8:	b9 f5       	brne	.+110    	; 0x2b68 <_ZN3tftL7putCharEc+0x7a>
	case '\n':
		newline();
    2afa:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <_ZN3tft7newlineEv>
    2afe:	3a c0       	rjmp	.+116    	; 0x2b74 <_ZN3tftL7putCharEc+0x86>
#endif
}

inline void tft::tab()
{
	if (x % (FONT_WIDTH * zoom))
    2b00:	c0 91 69 02 	lds	r28, 0x0269
    2b04:	d0 91 6a 02 	lds	r29, 0x026A
    2b08:	e0 91 eb 01 	lds	r30, 0x01EB
    2b0c:	f0 91 ec 01 	lds	r31, 0x01EC
    2b10:	60 91 66 02 	lds	r22, 0x0266
    2b14:	80 81       	ld	r24, Z
    2b16:	68 9f       	mul	r22, r24
    2b18:	b0 01       	movw	r22, r0
    2b1a:	11 24       	eor	r1, r1
    2b1c:	ce 01       	movw	r24, r28
    2b1e:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <__udivmodhi4>
    2b22:	00 97       	sbiw	r24, 0x00	; 0
    2b24:	31 f0       	breq	.+12     	; 0x2b32 <_ZN3tftL7putCharEc+0x44>
		x -= x % (FONT_WIDTH * zoom);
    2b26:	c8 1b       	sub	r28, r24
    2b28:	d9 0b       	sbc	r29, r25
    2b2a:	d0 93 6a 02 	sts	0x026A, r29
    2b2e:	c0 93 69 02 	sts	0x0269, r28
	do
		next();
    2b32:	0e 94 57 15 	call	0x2aae	; 0x2aae <_ZN3tftL4nextEv>

inline void tft::tab()
{
	if (x % (FONT_WIDTH * zoom))
		x -= x % (FONT_WIDTH * zoom);
	do
    2b36:	e0 91 eb 01 	lds	r30, 0x01EB
    2b3a:	f0 91 ec 01 	lds	r31, 0x01EC
    2b3e:	60 91 66 02 	lds	r22, 0x0266
    2b42:	80 81       	ld	r24, Z
    2b44:	68 9f       	mul	r22, r24
    2b46:	b0 01       	movw	r22, r0
    2b48:	11 24       	eor	r1, r1
    2b4a:	80 91 69 02 	lds	r24, 0x0269
    2b4e:	90 91 6a 02 	lds	r25, 0x026A
    2b52:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <__udivmodhi4>
    2b56:	cb 01       	movw	r24, r22
    2b58:	60 91 68 02 	lds	r22, 0x0268
    2b5c:	70 e0       	ldi	r23, 0x00	; 0
    2b5e:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <__udivmodhi4>
    2b62:	89 2b       	or	r24, r25
    2b64:	31 f7       	brne	.-52     	; 0x2b32 <_ZN3tftL7putCharEc+0x44>
    2b66:	06 c0       	rjmp	.+12     	; 0x2b74 <_ZN3tftL7putCharEc+0x86>
		break;
	case '\t':
		tab();
		break;
	default:
		if ((unsigned)c < ' ')
    2b68:	80 32       	cpi	r24, 0x20	; 32
    2b6a:	20 f0       	brcs	.+8      	; 0x2b74 <_ZN3tftL7putCharEc+0x86>
			break;
		drawChar(c);
    2b6c:	0e 94 c4 13 	call	0x2788	; 0x2788 <_ZN3tft8drawCharEc>
		next();
    2b70:	0e 94 57 15 	call	0x2aae	; 0x2aae <_ZN3tftL4nextEv>
	}
}
    2b74:	df 91       	pop	r29
    2b76:	cf 91       	pop	r28
    2b78:	08 95       	ret

00002b7a <_ZL10tftputcharcP6__file>:
	}
}

static int tftputchar(const char c, FILE *stream)
{
	tft::putChar(c);
    2b7a:	0e 94 77 15 	call	0x2aee	; 0x2aee <_ZN3tftL7putCharEc>
	return 0;
}
    2b7e:	80 e0       	ldi	r24, 0x00	; 0
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	08 95       	ret

00002b84 <_ZN3tft9putStringEPKcb>:
	//height = SIZE_H;
	foreground = DEF_FGC;
	background = DEF_BGC;
}

void tft::putString(const char *str, bool progMem)
    2b84:	1f 93       	push	r17
    2b86:	cf 93       	push	r28
    2b88:	df 93       	push	r29
    2b8a:	16 2f       	mov	r17, r22
    2b8c:	ec 01       	movw	r28, r24
    2b8e:	02 c0       	rjmp	.+4      	; 0x2b94 <_ZN3tft9putStringEPKcb+0x10>
	}
#endif

	char c;
	while ((c = progMem ? pgm_read_byte(str++) : *str++) != '\0') {
		putChar(c);
    2b90:	0e 94 77 15 	call	0x2aee	; 0x2aee <_ZN3tftL7putCharEc>
		clip = xt < bottomEdge();
	}
#endif

	char c;
	while ((c = progMem ? pgm_read_byte(str++) : *str++) != '\0') {
    2b94:	11 23       	and	r17, r17
    2b96:	19 f0       	breq	.+6      	; 0x2b9e <_ZN3tft9putStringEPKcb+0x1a>
    2b98:	fe 01       	movw	r30, r28
    2b9a:	84 91       	lpm	r24, Z+
    2b9c:	01 c0       	rjmp	.+2      	; 0x2ba0 <_ZN3tft9putStringEPKcb+0x1c>
    2b9e:	88 81       	ld	r24, Y
    2ba0:	21 96       	adiw	r28, 0x01	; 1
    2ba2:	88 23       	and	r24, r24
    2ba4:	a9 f7       	brne	.-22     	; 0x2b90 <_ZN3tft9putStringEPKcb+0xc>
			if (xt >= bottomEdge())
				break;
		}
#endif
	}
}
    2ba6:	df 91       	pop	r29
    2ba8:	cf 91       	pop	r28
    2baa:	1f 91       	pop	r17
    2bac:	08 95       	ret

00002bae <_Z6tftoutv>:
}

FILE *tftout()
{
	static FILE *out = NULL;
	if (out == NULL)
    2bae:	80 91 75 02 	lds	r24, 0x0275
    2bb2:	90 91 76 02 	lds	r25, 0x0276
    2bb6:	89 2b       	or	r24, r25
    2bb8:	51 f4       	brne	.+20     	; 0x2bce <_Z6tftoutv+0x20>
		out = fdevopen(tftputchar, NULL);
    2bba:	8d eb       	ldi	r24, 0xBD	; 189
    2bbc:	95 e1       	ldi	r25, 0x15	; 21
    2bbe:	60 e0       	ldi	r22, 0x00	; 0
    2bc0:	70 e0       	ldi	r23, 0x00	; 0
    2bc2:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <fdevopen>
    2bc6:	90 93 76 02 	sts	0x0276, r25
    2bca:	80 93 75 02 	sts	0x0275, r24
	return out;
}
    2bce:	80 91 75 02 	lds	r24, 0x0275
    2bd2:	90 91 76 02 	lds	r25, 0x0276
    2bd6:	08 95       	ret

00002bd8 <__udivmodhi4>:
    2bd8:	aa 1b       	sub	r26, r26
    2bda:	bb 1b       	sub	r27, r27
    2bdc:	51 e1       	ldi	r21, 0x11	; 17
    2bde:	07 c0       	rjmp	.+14     	; 0x2bee <__udivmodhi4_ep>

00002be0 <__udivmodhi4_loop>:
    2be0:	aa 1f       	adc	r26, r26
    2be2:	bb 1f       	adc	r27, r27
    2be4:	a6 17       	cp	r26, r22
    2be6:	b7 07       	cpc	r27, r23
    2be8:	10 f0       	brcs	.+4      	; 0x2bee <__udivmodhi4_ep>
    2bea:	a6 1b       	sub	r26, r22
    2bec:	b7 0b       	sbc	r27, r23

00002bee <__udivmodhi4_ep>:
    2bee:	88 1f       	adc	r24, r24
    2bf0:	99 1f       	adc	r25, r25
    2bf2:	5a 95       	dec	r21
    2bf4:	a9 f7       	brne	.-22     	; 0x2be0 <__udivmodhi4_loop>
    2bf6:	80 95       	com	r24
    2bf8:	90 95       	com	r25
    2bfa:	bc 01       	movw	r22, r24
    2bfc:	cd 01       	movw	r24, r26
    2bfe:	08 95       	ret

00002c00 <__divmodhi4>:
    2c00:	97 fb       	bst	r25, 7
    2c02:	09 2e       	mov	r0, r25
    2c04:	07 26       	eor	r0, r23
    2c06:	0a d0       	rcall	.+20     	; 0x2c1c <__divmodhi4_neg1>
    2c08:	77 fd       	sbrc	r23, 7
    2c0a:	04 d0       	rcall	.+8      	; 0x2c14 <__divmodhi4_neg2>
    2c0c:	e5 df       	rcall	.-54     	; 0x2bd8 <__udivmodhi4>
    2c0e:	06 d0       	rcall	.+12     	; 0x2c1c <__divmodhi4_neg1>
    2c10:	00 20       	and	r0, r0
    2c12:	1a f4       	brpl	.+6      	; 0x2c1a <__divmodhi4_exit>

00002c14 <__divmodhi4_neg2>:
    2c14:	70 95       	com	r23
    2c16:	61 95       	neg	r22
    2c18:	7f 4f       	sbci	r23, 0xFF	; 255

00002c1a <__divmodhi4_exit>:
    2c1a:	08 95       	ret

00002c1c <__divmodhi4_neg1>:
    2c1c:	f6 f7       	brtc	.-4      	; 0x2c1a <__divmodhi4_exit>
    2c1e:	90 95       	com	r25
    2c20:	81 95       	neg	r24
    2c22:	9f 4f       	sbci	r25, 0xFF	; 255
    2c24:	08 95       	ret

00002c26 <memcpy>:
    2c26:	fb 01       	movw	r30, r22
    2c28:	dc 01       	movw	r26, r24
    2c2a:	02 c0       	rjmp	.+4      	; 0x2c30 <memcpy+0xa>
    2c2c:	01 90       	ld	r0, Z+
    2c2e:	0d 92       	st	X+, r0
    2c30:	41 50       	subi	r20, 0x01	; 1
    2c32:	50 40       	sbci	r21, 0x00	; 0
    2c34:	d8 f7       	brcc	.-10     	; 0x2c2c <memcpy+0x6>
    2c36:	08 95       	ret

00002c38 <strcat>:
    2c38:	fb 01       	movw	r30, r22
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	0d 90       	ld	r0, X+
    2c3e:	00 20       	and	r0, r0
    2c40:	e9 f7       	brne	.-6      	; 0x2c3c <strcat+0x4>
    2c42:	11 97       	sbiw	r26, 0x01	; 1
    2c44:	01 90       	ld	r0, Z+
    2c46:	0d 92       	st	X+, r0
    2c48:	00 20       	and	r0, r0
    2c4a:	e1 f7       	brne	.-8      	; 0x2c44 <strcat+0xc>
    2c4c:	08 95       	ret

00002c4e <strcmp>:
    2c4e:	fb 01       	movw	r30, r22
    2c50:	dc 01       	movw	r26, r24
    2c52:	8d 91       	ld	r24, X+
    2c54:	01 90       	ld	r0, Z+
    2c56:	80 19       	sub	r24, r0
    2c58:	01 10       	cpse	r0, r1
    2c5a:	d9 f3       	breq	.-10     	; 0x2c52 <strcmp+0x4>
    2c5c:	99 0b       	sbc	r25, r25
    2c5e:	08 95       	ret

00002c60 <strcpy>:
    2c60:	fb 01       	movw	r30, r22
    2c62:	dc 01       	movw	r26, r24
    2c64:	01 90       	ld	r0, Z+
    2c66:	0d 92       	st	X+, r0
    2c68:	00 20       	and	r0, r0
    2c6a:	e1 f7       	brne	.-8      	; 0x2c64 <strcpy+0x4>
    2c6c:	08 95       	ret

00002c6e <strncpy>:
    2c6e:	fb 01       	movw	r30, r22
    2c70:	dc 01       	movw	r26, r24
    2c72:	41 50       	subi	r20, 0x01	; 1
    2c74:	50 40       	sbci	r21, 0x00	; 0
    2c76:	48 f0       	brcs	.+18     	; 0x2c8a <strncpy+0x1c>
    2c78:	01 90       	ld	r0, Z+
    2c7a:	0d 92       	st	X+, r0
    2c7c:	00 20       	and	r0, r0
    2c7e:	c9 f7       	brne	.-14     	; 0x2c72 <strncpy+0x4>
    2c80:	01 c0       	rjmp	.+2      	; 0x2c84 <strncpy+0x16>
    2c82:	1d 92       	st	X+, r1
    2c84:	41 50       	subi	r20, 0x01	; 1
    2c86:	50 40       	sbci	r21, 0x00	; 0
    2c88:	e0 f7       	brcc	.-8      	; 0x2c82 <strncpy+0x14>
    2c8a:	08 95       	ret

00002c8c <fdevopen>:
    2c8c:	0f 93       	push	r16
    2c8e:	1f 93       	push	r17
    2c90:	cf 93       	push	r28
    2c92:	df 93       	push	r29
    2c94:	8c 01       	movw	r16, r24
    2c96:	eb 01       	movw	r28, r22
    2c98:	00 97       	sbiw	r24, 0x00	; 0
    2c9a:	31 f4       	brne	.+12     	; 0x2ca8 <fdevopen+0x1c>
    2c9c:	61 15       	cp	r22, r1
    2c9e:	71 05       	cpc	r23, r1
    2ca0:	19 f4       	brne	.+6      	; 0x2ca8 <fdevopen+0x1c>
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	38 c0       	rjmp	.+112    	; 0x2d18 <fdevopen+0x8c>
    2ca8:	81 e0       	ldi	r24, 0x01	; 1
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	6e e0       	ldi	r22, 0x0E	; 14
    2cae:	70 e0       	ldi	r23, 0x00	; 0
    2cb0:	0e 94 c4 18 	call	0x3188	; 0x3188 <calloc>
    2cb4:	fc 01       	movw	r30, r24
    2cb6:	9c 01       	movw	r18, r24
    2cb8:	00 97       	sbiw	r24, 0x00	; 0
    2cba:	71 f1       	breq	.+92     	; 0x2d18 <fdevopen+0x8c>
    2cbc:	80 e8       	ldi	r24, 0x80	; 128
    2cbe:	83 83       	std	Z+3, r24	; 0x03
    2cc0:	20 97       	sbiw	r28, 0x00	; 0
    2cc2:	71 f0       	breq	.+28     	; 0x2ce0 <fdevopen+0x54>
    2cc4:	d3 87       	std	Z+11, r29	; 0x0b
    2cc6:	c2 87       	std	Z+10, r28	; 0x0a
    2cc8:	81 e8       	ldi	r24, 0x81	; 129
    2cca:	83 83       	std	Z+3, r24	; 0x03
    2ccc:	80 91 78 02 	lds	r24, 0x0278
    2cd0:	90 91 79 02 	lds	r25, 0x0279
    2cd4:	89 2b       	or	r24, r25
    2cd6:	21 f4       	brne	.+8      	; 0x2ce0 <fdevopen+0x54>
    2cd8:	f0 93 79 02 	sts	0x0279, r31
    2cdc:	e0 93 78 02 	sts	0x0278, r30
    2ce0:	01 15       	cp	r16, r1
    2ce2:	11 05       	cpc	r17, r1
    2ce4:	c9 f0       	breq	.+50     	; 0x2d18 <fdevopen+0x8c>
    2ce6:	11 87       	std	Z+9, r17	; 0x09
    2ce8:	00 87       	std	Z+8, r16	; 0x08
    2cea:	83 81       	ldd	r24, Z+3	; 0x03
    2cec:	82 60       	ori	r24, 0x02	; 2
    2cee:	83 83       	std	Z+3, r24	; 0x03
    2cf0:	80 91 7a 02 	lds	r24, 0x027A
    2cf4:	90 91 7b 02 	lds	r25, 0x027B
    2cf8:	89 2b       	or	r24, r25
    2cfa:	71 f4       	brne	.+28     	; 0x2d18 <fdevopen+0x8c>
    2cfc:	f0 93 7b 02 	sts	0x027B, r31
    2d00:	e0 93 7a 02 	sts	0x027A, r30
    2d04:	80 91 7c 02 	lds	r24, 0x027C
    2d08:	90 91 7d 02 	lds	r25, 0x027D
    2d0c:	89 2b       	or	r24, r25
    2d0e:	21 f4       	brne	.+8      	; 0x2d18 <fdevopen+0x8c>
    2d10:	f0 93 7d 02 	sts	0x027D, r31
    2d14:	e0 93 7c 02 	sts	0x027C, r30
    2d18:	c9 01       	movw	r24, r18
    2d1a:	df 91       	pop	r29
    2d1c:	cf 91       	pop	r28
    2d1e:	1f 91       	pop	r17
    2d20:	0f 91       	pop	r16
    2d22:	08 95       	ret

00002d24 <snprintf>:
    2d24:	ae e0       	ldi	r26, 0x0E	; 14
    2d26:	b0 e0       	ldi	r27, 0x00	; 0
    2d28:	e8 e9       	ldi	r30, 0x98	; 152
    2d2a:	f6 e1       	ldi	r31, 0x16	; 22
    2d2c:	0c 94 9a 1a 	jmp	0x3534	; 0x3534 <__prologue_saves__+0x1c>
    2d30:	0d 89       	ldd	r16, Y+21	; 0x15
    2d32:	1e 89       	ldd	r17, Y+22	; 0x16
    2d34:	8f 89       	ldd	r24, Y+23	; 0x17
    2d36:	98 8d       	ldd	r25, Y+24	; 0x18
    2d38:	97 ff       	sbrs	r25, 7
    2d3a:	02 c0       	rjmp	.+4      	; 0x2d40 <snprintf+0x1c>
    2d3c:	80 e0       	ldi	r24, 0x00	; 0
    2d3e:	90 e8       	ldi	r25, 0x80	; 128
    2d40:	01 97       	sbiw	r24, 0x01	; 1
    2d42:	9e 83       	std	Y+6, r25	; 0x06
    2d44:	8d 83       	std	Y+5, r24	; 0x05
    2d46:	1a 83       	std	Y+2, r17	; 0x02
    2d48:	09 83       	std	Y+1, r16	; 0x01
    2d4a:	86 e0       	ldi	r24, 0x06	; 6
    2d4c:	8c 83       	std	Y+4, r24	; 0x04
    2d4e:	9e 01       	movw	r18, r28
    2d50:	25 5e       	subi	r18, 0xE5	; 229
    2d52:	3f 4f       	sbci	r19, 0xFF	; 255
    2d54:	ce 01       	movw	r24, r28
    2d56:	01 96       	adiw	r24, 0x01	; 1
    2d58:	69 8d       	ldd	r22, Y+25	; 0x19
    2d5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d5c:	a9 01       	movw	r20, r18
    2d5e:	0e 94 e7 16 	call	0x2dce	; 0x2dce <vfprintf>
    2d62:	4d 81       	ldd	r20, Y+5	; 0x05
    2d64:	5e 81       	ldd	r21, Y+6	; 0x06
    2d66:	57 fd       	sbrc	r21, 7
    2d68:	0a c0       	rjmp	.+20     	; 0x2d7e <snprintf+0x5a>
    2d6a:	2f 81       	ldd	r18, Y+7	; 0x07
    2d6c:	38 85       	ldd	r19, Y+8	; 0x08
    2d6e:	42 17       	cp	r20, r18
    2d70:	53 07       	cpc	r21, r19
    2d72:	0c f4       	brge	.+2      	; 0x2d76 <snprintf+0x52>
    2d74:	9a 01       	movw	r18, r20
    2d76:	02 0f       	add	r16, r18
    2d78:	13 1f       	adc	r17, r19
    2d7a:	f8 01       	movw	r30, r16
    2d7c:	10 82       	st	Z, r1
    2d7e:	2e 96       	adiw	r28, 0x0e	; 14
    2d80:	e4 e0       	ldi	r30, 0x04	; 4
    2d82:	0c 94 b6 1a 	jmp	0x356c	; 0x356c <__epilogue_restores__+0x1c>

00002d86 <sprintf>:
    2d86:	ae e0       	ldi	r26, 0x0E	; 14
    2d88:	b0 e0       	ldi	r27, 0x00	; 0
    2d8a:	e9 ec       	ldi	r30, 0xC9	; 201
    2d8c:	f6 e1       	ldi	r31, 0x16	; 22
    2d8e:	0c 94 9a 1a 	jmp	0x3534	; 0x3534 <__prologue_saves__+0x1c>
    2d92:	0d 89       	ldd	r16, Y+21	; 0x15
    2d94:	1e 89       	ldd	r17, Y+22	; 0x16
    2d96:	86 e0       	ldi	r24, 0x06	; 6
    2d98:	8c 83       	std	Y+4, r24	; 0x04
    2d9a:	1a 83       	std	Y+2, r17	; 0x02
    2d9c:	09 83       	std	Y+1, r16	; 0x01
    2d9e:	8f ef       	ldi	r24, 0xFF	; 255
    2da0:	9f e7       	ldi	r25, 0x7F	; 127
    2da2:	9e 83       	std	Y+6, r25	; 0x06
    2da4:	8d 83       	std	Y+5, r24	; 0x05
    2da6:	9e 01       	movw	r18, r28
    2da8:	27 5e       	subi	r18, 0xE7	; 231
    2daa:	3f 4f       	sbci	r19, 0xFF	; 255
    2dac:	ce 01       	movw	r24, r28
    2dae:	01 96       	adiw	r24, 0x01	; 1
    2db0:	6f 89       	ldd	r22, Y+23	; 0x17
    2db2:	78 8d       	ldd	r23, Y+24	; 0x18
    2db4:	a9 01       	movw	r20, r18
    2db6:	0e 94 e7 16 	call	0x2dce	; 0x2dce <vfprintf>
    2dba:	2f 81       	ldd	r18, Y+7	; 0x07
    2dbc:	38 85       	ldd	r19, Y+8	; 0x08
    2dbe:	02 0f       	add	r16, r18
    2dc0:	13 1f       	adc	r17, r19
    2dc2:	f8 01       	movw	r30, r16
    2dc4:	10 82       	st	Z, r1
    2dc6:	2e 96       	adiw	r28, 0x0e	; 14
    2dc8:	e4 e0       	ldi	r30, 0x04	; 4
    2dca:	0c 94 b6 1a 	jmp	0x356c	; 0x356c <__epilogue_restores__+0x1c>

00002dce <vfprintf>:
    2dce:	ab e0       	ldi	r26, 0x0B	; 11
    2dd0:	b0 e0       	ldi	r27, 0x00	; 0
    2dd2:	ed ee       	ldi	r30, 0xED	; 237
    2dd4:	f6 e1       	ldi	r31, 0x16	; 22
    2dd6:	0c 94 8c 1a 	jmp	0x3518	; 0x3518 <__prologue_saves__>
    2dda:	3c 01       	movw	r6, r24
    2ddc:	2b 01       	movw	r4, r22
    2dde:	5a 01       	movw	r10, r20
    2de0:	fc 01       	movw	r30, r24
    2de2:	17 82       	std	Z+7, r1	; 0x07
    2de4:	16 82       	std	Z+6, r1	; 0x06
    2de6:	83 81       	ldd	r24, Z+3	; 0x03
    2de8:	81 fd       	sbrc	r24, 1
    2dea:	03 c0       	rjmp	.+6      	; 0x2df2 <vfprintf+0x24>
    2dec:	6f ef       	ldi	r22, 0xFF	; 255
    2dee:	7f ef       	ldi	r23, 0xFF	; 255
    2df0:	c6 c1       	rjmp	.+908    	; 0x317e <vfprintf+0x3b0>
    2df2:	9a e0       	ldi	r25, 0x0A	; 10
    2df4:	89 2e       	mov	r8, r25
    2df6:	1e 01       	movw	r2, r28
    2df8:	08 94       	sec
    2dfa:	21 1c       	adc	r2, r1
    2dfc:	31 1c       	adc	r3, r1
    2dfe:	f3 01       	movw	r30, r6
    2e00:	23 81       	ldd	r18, Z+3	; 0x03
    2e02:	f2 01       	movw	r30, r4
    2e04:	23 fd       	sbrc	r18, 3
    2e06:	85 91       	lpm	r24, Z+
    2e08:	23 ff       	sbrs	r18, 3
    2e0a:	81 91       	ld	r24, Z+
    2e0c:	2f 01       	movw	r4, r30
    2e0e:	88 23       	and	r24, r24
    2e10:	09 f4       	brne	.+2      	; 0x2e14 <vfprintf+0x46>
    2e12:	b2 c1       	rjmp	.+868    	; 0x3178 <vfprintf+0x3aa>
    2e14:	85 32       	cpi	r24, 0x25	; 37
    2e16:	39 f4       	brne	.+14     	; 0x2e26 <vfprintf+0x58>
    2e18:	23 fd       	sbrc	r18, 3
    2e1a:	85 91       	lpm	r24, Z+
    2e1c:	23 ff       	sbrs	r18, 3
    2e1e:	81 91       	ld	r24, Z+
    2e20:	2f 01       	movw	r4, r30
    2e22:	85 32       	cpi	r24, 0x25	; 37
    2e24:	29 f4       	brne	.+10     	; 0x2e30 <vfprintf+0x62>
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	b3 01       	movw	r22, r6
    2e2a:	0e 94 02 1a 	call	0x3404	; 0x3404 <fputc>
    2e2e:	e7 cf       	rjmp	.-50     	; 0x2dfe <vfprintf+0x30>
    2e30:	98 2f       	mov	r25, r24
    2e32:	ff 24       	eor	r15, r15
    2e34:	ee 24       	eor	r14, r14
    2e36:	99 24       	eor	r9, r9
    2e38:	ff e1       	ldi	r31, 0x1F	; 31
    2e3a:	ff 15       	cp	r31, r15
    2e3c:	d0 f0       	brcs	.+52     	; 0x2e72 <vfprintf+0xa4>
    2e3e:	9b 32       	cpi	r25, 0x2B	; 43
    2e40:	69 f0       	breq	.+26     	; 0x2e5c <vfprintf+0x8e>
    2e42:	9c 32       	cpi	r25, 0x2C	; 44
    2e44:	28 f4       	brcc	.+10     	; 0x2e50 <vfprintf+0x82>
    2e46:	90 32       	cpi	r25, 0x20	; 32
    2e48:	59 f0       	breq	.+22     	; 0x2e60 <vfprintf+0x92>
    2e4a:	93 32       	cpi	r25, 0x23	; 35
    2e4c:	91 f4       	brne	.+36     	; 0x2e72 <vfprintf+0xa4>
    2e4e:	0e c0       	rjmp	.+28     	; 0x2e6c <vfprintf+0x9e>
    2e50:	9d 32       	cpi	r25, 0x2D	; 45
    2e52:	49 f0       	breq	.+18     	; 0x2e66 <vfprintf+0x98>
    2e54:	90 33       	cpi	r25, 0x30	; 48
    2e56:	69 f4       	brne	.+26     	; 0x2e72 <vfprintf+0xa4>
    2e58:	41 e0       	ldi	r20, 0x01	; 1
    2e5a:	24 c0       	rjmp	.+72     	; 0x2ea4 <vfprintf+0xd6>
    2e5c:	52 e0       	ldi	r21, 0x02	; 2
    2e5e:	f5 2a       	or	r15, r21
    2e60:	84 e0       	ldi	r24, 0x04	; 4
    2e62:	f8 2a       	or	r15, r24
    2e64:	28 c0       	rjmp	.+80     	; 0x2eb6 <vfprintf+0xe8>
    2e66:	98 e0       	ldi	r25, 0x08	; 8
    2e68:	f9 2a       	or	r15, r25
    2e6a:	25 c0       	rjmp	.+74     	; 0x2eb6 <vfprintf+0xe8>
    2e6c:	e0 e1       	ldi	r30, 0x10	; 16
    2e6e:	fe 2a       	or	r15, r30
    2e70:	22 c0       	rjmp	.+68     	; 0x2eb6 <vfprintf+0xe8>
    2e72:	f7 fc       	sbrc	r15, 7
    2e74:	29 c0       	rjmp	.+82     	; 0x2ec8 <vfprintf+0xfa>
    2e76:	89 2f       	mov	r24, r25
    2e78:	80 53       	subi	r24, 0x30	; 48
    2e7a:	8a 30       	cpi	r24, 0x0A	; 10
    2e7c:	70 f4       	brcc	.+28     	; 0x2e9a <vfprintf+0xcc>
    2e7e:	f6 fe       	sbrs	r15, 6
    2e80:	05 c0       	rjmp	.+10     	; 0x2e8c <vfprintf+0xbe>
    2e82:	98 9c       	mul	r9, r8
    2e84:	90 2c       	mov	r9, r0
    2e86:	11 24       	eor	r1, r1
    2e88:	98 0e       	add	r9, r24
    2e8a:	15 c0       	rjmp	.+42     	; 0x2eb6 <vfprintf+0xe8>
    2e8c:	e8 9c       	mul	r14, r8
    2e8e:	e0 2c       	mov	r14, r0
    2e90:	11 24       	eor	r1, r1
    2e92:	e8 0e       	add	r14, r24
    2e94:	f0 e2       	ldi	r31, 0x20	; 32
    2e96:	ff 2a       	or	r15, r31
    2e98:	0e c0       	rjmp	.+28     	; 0x2eb6 <vfprintf+0xe8>
    2e9a:	9e 32       	cpi	r25, 0x2E	; 46
    2e9c:	29 f4       	brne	.+10     	; 0x2ea8 <vfprintf+0xda>
    2e9e:	f6 fc       	sbrc	r15, 6
    2ea0:	6b c1       	rjmp	.+726    	; 0x3178 <vfprintf+0x3aa>
    2ea2:	40 e4       	ldi	r20, 0x40	; 64
    2ea4:	f4 2a       	or	r15, r20
    2ea6:	07 c0       	rjmp	.+14     	; 0x2eb6 <vfprintf+0xe8>
    2ea8:	9c 36       	cpi	r25, 0x6C	; 108
    2eaa:	19 f4       	brne	.+6      	; 0x2eb2 <vfprintf+0xe4>
    2eac:	50 e8       	ldi	r21, 0x80	; 128
    2eae:	f5 2a       	or	r15, r21
    2eb0:	02 c0       	rjmp	.+4      	; 0x2eb6 <vfprintf+0xe8>
    2eb2:	98 36       	cpi	r25, 0x68	; 104
    2eb4:	49 f4       	brne	.+18     	; 0x2ec8 <vfprintf+0xfa>
    2eb6:	f2 01       	movw	r30, r4
    2eb8:	23 fd       	sbrc	r18, 3
    2eba:	95 91       	lpm	r25, Z+
    2ebc:	23 ff       	sbrs	r18, 3
    2ebe:	91 91       	ld	r25, Z+
    2ec0:	2f 01       	movw	r4, r30
    2ec2:	99 23       	and	r25, r25
    2ec4:	09 f0       	breq	.+2      	; 0x2ec8 <vfprintf+0xfa>
    2ec6:	b8 cf       	rjmp	.-144    	; 0x2e38 <vfprintf+0x6a>
    2ec8:	89 2f       	mov	r24, r25
    2eca:	85 54       	subi	r24, 0x45	; 69
    2ecc:	83 30       	cpi	r24, 0x03	; 3
    2ece:	18 f0       	brcs	.+6      	; 0x2ed6 <vfprintf+0x108>
    2ed0:	80 52       	subi	r24, 0x20	; 32
    2ed2:	83 30       	cpi	r24, 0x03	; 3
    2ed4:	38 f4       	brcc	.+14     	; 0x2ee4 <vfprintf+0x116>
    2ed6:	44 e0       	ldi	r20, 0x04	; 4
    2ed8:	50 e0       	ldi	r21, 0x00	; 0
    2eda:	a4 0e       	add	r10, r20
    2edc:	b5 1e       	adc	r11, r21
    2ede:	5f e3       	ldi	r21, 0x3F	; 63
    2ee0:	59 83       	std	Y+1, r21	; 0x01
    2ee2:	0f c0       	rjmp	.+30     	; 0x2f02 <vfprintf+0x134>
    2ee4:	93 36       	cpi	r25, 0x63	; 99
    2ee6:	31 f0       	breq	.+12     	; 0x2ef4 <vfprintf+0x126>
    2ee8:	93 37       	cpi	r25, 0x73	; 115
    2eea:	79 f0       	breq	.+30     	; 0x2f0a <vfprintf+0x13c>
    2eec:	93 35       	cpi	r25, 0x53	; 83
    2eee:	09 f0       	breq	.+2      	; 0x2ef2 <vfprintf+0x124>
    2ef0:	56 c0       	rjmp	.+172    	; 0x2f9e <vfprintf+0x1d0>
    2ef2:	20 c0       	rjmp	.+64     	; 0x2f34 <vfprintf+0x166>
    2ef4:	f5 01       	movw	r30, r10
    2ef6:	80 81       	ld	r24, Z
    2ef8:	89 83       	std	Y+1, r24	; 0x01
    2efa:	42 e0       	ldi	r20, 0x02	; 2
    2efc:	50 e0       	ldi	r21, 0x00	; 0
    2efe:	a4 0e       	add	r10, r20
    2f00:	b5 1e       	adc	r11, r21
    2f02:	61 01       	movw	r12, r2
    2f04:	01 e0       	ldi	r16, 0x01	; 1
    2f06:	10 e0       	ldi	r17, 0x00	; 0
    2f08:	12 c0       	rjmp	.+36     	; 0x2f2e <vfprintf+0x160>
    2f0a:	f5 01       	movw	r30, r10
    2f0c:	c0 80       	ld	r12, Z
    2f0e:	d1 80       	ldd	r13, Z+1	; 0x01
    2f10:	f6 fc       	sbrc	r15, 6
    2f12:	03 c0       	rjmp	.+6      	; 0x2f1a <vfprintf+0x14c>
    2f14:	6f ef       	ldi	r22, 0xFF	; 255
    2f16:	7f ef       	ldi	r23, 0xFF	; 255
    2f18:	02 c0       	rjmp	.+4      	; 0x2f1e <vfprintf+0x150>
    2f1a:	69 2d       	mov	r22, r9
    2f1c:	70 e0       	ldi	r23, 0x00	; 0
    2f1e:	42 e0       	ldi	r20, 0x02	; 2
    2f20:	50 e0       	ldi	r21, 0x00	; 0
    2f22:	a4 0e       	add	r10, r20
    2f24:	b5 1e       	adc	r11, r21
    2f26:	c6 01       	movw	r24, r12
    2f28:	0e 94 f7 19 	call	0x33ee	; 0x33ee <strnlen>
    2f2c:	8c 01       	movw	r16, r24
    2f2e:	5f e7       	ldi	r21, 0x7F	; 127
    2f30:	f5 22       	and	r15, r21
    2f32:	14 c0       	rjmp	.+40     	; 0x2f5c <vfprintf+0x18e>
    2f34:	f5 01       	movw	r30, r10
    2f36:	c0 80       	ld	r12, Z
    2f38:	d1 80       	ldd	r13, Z+1	; 0x01
    2f3a:	f6 fc       	sbrc	r15, 6
    2f3c:	03 c0       	rjmp	.+6      	; 0x2f44 <vfprintf+0x176>
    2f3e:	6f ef       	ldi	r22, 0xFF	; 255
    2f40:	7f ef       	ldi	r23, 0xFF	; 255
    2f42:	02 c0       	rjmp	.+4      	; 0x2f48 <vfprintf+0x17a>
    2f44:	69 2d       	mov	r22, r9
    2f46:	70 e0       	ldi	r23, 0x00	; 0
    2f48:	42 e0       	ldi	r20, 0x02	; 2
    2f4a:	50 e0       	ldi	r21, 0x00	; 0
    2f4c:	a4 0e       	add	r10, r20
    2f4e:	b5 1e       	adc	r11, r21
    2f50:	c6 01       	movw	r24, r12
    2f52:	0e 94 e5 19 	call	0x33ca	; 0x33ca <strnlen_P>
    2f56:	8c 01       	movw	r16, r24
    2f58:	50 e8       	ldi	r21, 0x80	; 128
    2f5a:	f5 2a       	or	r15, r21
    2f5c:	f3 fe       	sbrs	r15, 3
    2f5e:	07 c0       	rjmp	.+14     	; 0x2f6e <vfprintf+0x1a0>
    2f60:	1a c0       	rjmp	.+52     	; 0x2f96 <vfprintf+0x1c8>
    2f62:	80 e2       	ldi	r24, 0x20	; 32
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	b3 01       	movw	r22, r6
    2f68:	0e 94 02 1a 	call	0x3404	; 0x3404 <fputc>
    2f6c:	ea 94       	dec	r14
    2f6e:	8e 2d       	mov	r24, r14
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	08 17       	cp	r16, r24
    2f74:	19 07       	cpc	r17, r25
    2f76:	a8 f3       	brcs	.-22     	; 0x2f62 <vfprintf+0x194>
    2f78:	0e c0       	rjmp	.+28     	; 0x2f96 <vfprintf+0x1c8>
    2f7a:	f6 01       	movw	r30, r12
    2f7c:	f7 fc       	sbrc	r15, 7
    2f7e:	85 91       	lpm	r24, Z+
    2f80:	f7 fe       	sbrs	r15, 7
    2f82:	81 91       	ld	r24, Z+
    2f84:	6f 01       	movw	r12, r30
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	b3 01       	movw	r22, r6
    2f8a:	0e 94 02 1a 	call	0x3404	; 0x3404 <fputc>
    2f8e:	e1 10       	cpse	r14, r1
    2f90:	ea 94       	dec	r14
    2f92:	01 50       	subi	r16, 0x01	; 1
    2f94:	10 40       	sbci	r17, 0x00	; 0
    2f96:	01 15       	cp	r16, r1
    2f98:	11 05       	cpc	r17, r1
    2f9a:	79 f7       	brne	.-34     	; 0x2f7a <vfprintf+0x1ac>
    2f9c:	ea c0       	rjmp	.+468    	; 0x3172 <vfprintf+0x3a4>
    2f9e:	94 36       	cpi	r25, 0x64	; 100
    2fa0:	11 f0       	breq	.+4      	; 0x2fa6 <vfprintf+0x1d8>
    2fa2:	99 36       	cpi	r25, 0x69	; 105
    2fa4:	69 f5       	brne	.+90     	; 0x3000 <vfprintf+0x232>
    2fa6:	f7 fe       	sbrs	r15, 7
    2fa8:	08 c0       	rjmp	.+16     	; 0x2fba <vfprintf+0x1ec>
    2faa:	f5 01       	movw	r30, r10
    2fac:	20 81       	ld	r18, Z
    2fae:	31 81       	ldd	r19, Z+1	; 0x01
    2fb0:	42 81       	ldd	r20, Z+2	; 0x02
    2fb2:	53 81       	ldd	r21, Z+3	; 0x03
    2fb4:	84 e0       	ldi	r24, 0x04	; 4
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	0a c0       	rjmp	.+20     	; 0x2fce <vfprintf+0x200>
    2fba:	f5 01       	movw	r30, r10
    2fbc:	80 81       	ld	r24, Z
    2fbe:	91 81       	ldd	r25, Z+1	; 0x01
    2fc0:	9c 01       	movw	r18, r24
    2fc2:	44 27       	eor	r20, r20
    2fc4:	37 fd       	sbrc	r19, 7
    2fc6:	40 95       	com	r20
    2fc8:	54 2f       	mov	r21, r20
    2fca:	82 e0       	ldi	r24, 0x02	; 2
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	a8 0e       	add	r10, r24
    2fd0:	b9 1e       	adc	r11, r25
    2fd2:	9f e6       	ldi	r25, 0x6F	; 111
    2fd4:	f9 22       	and	r15, r25
    2fd6:	57 ff       	sbrs	r21, 7
    2fd8:	09 c0       	rjmp	.+18     	; 0x2fec <vfprintf+0x21e>
    2fda:	50 95       	com	r21
    2fdc:	40 95       	com	r20
    2fde:	30 95       	com	r19
    2fe0:	21 95       	neg	r18
    2fe2:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe4:	4f 4f       	sbci	r20, 0xFF	; 255
    2fe6:	5f 4f       	sbci	r21, 0xFF	; 255
    2fe8:	e0 e8       	ldi	r30, 0x80	; 128
    2fea:	fe 2a       	or	r15, r30
    2fec:	ca 01       	movw	r24, r20
    2fee:	b9 01       	movw	r22, r18
    2ff0:	a1 01       	movw	r20, r2
    2ff2:	2a e0       	ldi	r18, 0x0A	; 10
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	0e 94 2e 1a 	call	0x345c	; 0x345c <__ultoa_invert>
    2ffa:	d8 2e       	mov	r13, r24
    2ffc:	d2 18       	sub	r13, r2
    2ffe:	40 c0       	rjmp	.+128    	; 0x3080 <vfprintf+0x2b2>
    3000:	95 37       	cpi	r25, 0x75	; 117
    3002:	29 f4       	brne	.+10     	; 0x300e <vfprintf+0x240>
    3004:	1f 2d       	mov	r17, r15
    3006:	1f 7e       	andi	r17, 0xEF	; 239
    3008:	2a e0       	ldi	r18, 0x0A	; 10
    300a:	30 e0       	ldi	r19, 0x00	; 0
    300c:	1d c0       	rjmp	.+58     	; 0x3048 <vfprintf+0x27a>
    300e:	1f 2d       	mov	r17, r15
    3010:	19 7f       	andi	r17, 0xF9	; 249
    3012:	9f 36       	cpi	r25, 0x6F	; 111
    3014:	61 f0       	breq	.+24     	; 0x302e <vfprintf+0x260>
    3016:	90 37       	cpi	r25, 0x70	; 112
    3018:	20 f4       	brcc	.+8      	; 0x3022 <vfprintf+0x254>
    301a:	98 35       	cpi	r25, 0x58	; 88
    301c:	09 f0       	breq	.+2      	; 0x3020 <vfprintf+0x252>
    301e:	ac c0       	rjmp	.+344    	; 0x3178 <vfprintf+0x3aa>
    3020:	0f c0       	rjmp	.+30     	; 0x3040 <vfprintf+0x272>
    3022:	90 37       	cpi	r25, 0x70	; 112
    3024:	39 f0       	breq	.+14     	; 0x3034 <vfprintf+0x266>
    3026:	98 37       	cpi	r25, 0x78	; 120
    3028:	09 f0       	breq	.+2      	; 0x302c <vfprintf+0x25e>
    302a:	a6 c0       	rjmp	.+332    	; 0x3178 <vfprintf+0x3aa>
    302c:	04 c0       	rjmp	.+8      	; 0x3036 <vfprintf+0x268>
    302e:	28 e0       	ldi	r18, 0x08	; 8
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	0a c0       	rjmp	.+20     	; 0x3048 <vfprintf+0x27a>
    3034:	10 61       	ori	r17, 0x10	; 16
    3036:	14 fd       	sbrc	r17, 4
    3038:	14 60       	ori	r17, 0x04	; 4
    303a:	20 e1       	ldi	r18, 0x10	; 16
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	04 c0       	rjmp	.+8      	; 0x3048 <vfprintf+0x27a>
    3040:	14 fd       	sbrc	r17, 4
    3042:	16 60       	ori	r17, 0x06	; 6
    3044:	20 e1       	ldi	r18, 0x10	; 16
    3046:	32 e0       	ldi	r19, 0x02	; 2
    3048:	17 ff       	sbrs	r17, 7
    304a:	08 c0       	rjmp	.+16     	; 0x305c <vfprintf+0x28e>
    304c:	f5 01       	movw	r30, r10
    304e:	60 81       	ld	r22, Z
    3050:	71 81       	ldd	r23, Z+1	; 0x01
    3052:	82 81       	ldd	r24, Z+2	; 0x02
    3054:	93 81       	ldd	r25, Z+3	; 0x03
    3056:	44 e0       	ldi	r20, 0x04	; 4
    3058:	50 e0       	ldi	r21, 0x00	; 0
    305a:	08 c0       	rjmp	.+16     	; 0x306c <vfprintf+0x29e>
    305c:	f5 01       	movw	r30, r10
    305e:	80 81       	ld	r24, Z
    3060:	91 81       	ldd	r25, Z+1	; 0x01
    3062:	bc 01       	movw	r22, r24
    3064:	80 e0       	ldi	r24, 0x00	; 0
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	42 e0       	ldi	r20, 0x02	; 2
    306a:	50 e0       	ldi	r21, 0x00	; 0
    306c:	a4 0e       	add	r10, r20
    306e:	b5 1e       	adc	r11, r21
    3070:	a1 01       	movw	r20, r2
    3072:	0e 94 2e 1a 	call	0x345c	; 0x345c <__ultoa_invert>
    3076:	d8 2e       	mov	r13, r24
    3078:	d2 18       	sub	r13, r2
    307a:	8f e7       	ldi	r24, 0x7F	; 127
    307c:	f8 2e       	mov	r15, r24
    307e:	f1 22       	and	r15, r17
    3080:	f6 fe       	sbrs	r15, 6
    3082:	0b c0       	rjmp	.+22     	; 0x309a <vfprintf+0x2cc>
    3084:	5e ef       	ldi	r21, 0xFE	; 254
    3086:	f5 22       	and	r15, r21
    3088:	d9 14       	cp	r13, r9
    308a:	38 f4       	brcc	.+14     	; 0x309a <vfprintf+0x2cc>
    308c:	f4 fe       	sbrs	r15, 4
    308e:	07 c0       	rjmp	.+14     	; 0x309e <vfprintf+0x2d0>
    3090:	f2 fc       	sbrc	r15, 2
    3092:	05 c0       	rjmp	.+10     	; 0x309e <vfprintf+0x2d0>
    3094:	8f ee       	ldi	r24, 0xEF	; 239
    3096:	f8 22       	and	r15, r24
    3098:	02 c0       	rjmp	.+4      	; 0x309e <vfprintf+0x2d0>
    309a:	1d 2d       	mov	r17, r13
    309c:	01 c0       	rjmp	.+2      	; 0x30a0 <vfprintf+0x2d2>
    309e:	19 2d       	mov	r17, r9
    30a0:	f4 fe       	sbrs	r15, 4
    30a2:	0d c0       	rjmp	.+26     	; 0x30be <vfprintf+0x2f0>
    30a4:	fe 01       	movw	r30, r28
    30a6:	ed 0d       	add	r30, r13
    30a8:	f1 1d       	adc	r31, r1
    30aa:	80 81       	ld	r24, Z
    30ac:	80 33       	cpi	r24, 0x30	; 48
    30ae:	19 f4       	brne	.+6      	; 0x30b6 <vfprintf+0x2e8>
    30b0:	99 ee       	ldi	r25, 0xE9	; 233
    30b2:	f9 22       	and	r15, r25
    30b4:	08 c0       	rjmp	.+16     	; 0x30c6 <vfprintf+0x2f8>
    30b6:	1f 5f       	subi	r17, 0xFF	; 255
    30b8:	f2 fe       	sbrs	r15, 2
    30ba:	05 c0       	rjmp	.+10     	; 0x30c6 <vfprintf+0x2f8>
    30bc:	03 c0       	rjmp	.+6      	; 0x30c4 <vfprintf+0x2f6>
    30be:	8f 2d       	mov	r24, r15
    30c0:	86 78       	andi	r24, 0x86	; 134
    30c2:	09 f0       	breq	.+2      	; 0x30c6 <vfprintf+0x2f8>
    30c4:	1f 5f       	subi	r17, 0xFF	; 255
    30c6:	0f 2d       	mov	r16, r15
    30c8:	f3 fc       	sbrc	r15, 3
    30ca:	14 c0       	rjmp	.+40     	; 0x30f4 <vfprintf+0x326>
    30cc:	f0 fe       	sbrs	r15, 0
    30ce:	0f c0       	rjmp	.+30     	; 0x30ee <vfprintf+0x320>
    30d0:	1e 15       	cp	r17, r14
    30d2:	10 f0       	brcs	.+4      	; 0x30d8 <vfprintf+0x30a>
    30d4:	9d 2c       	mov	r9, r13
    30d6:	0b c0       	rjmp	.+22     	; 0x30ee <vfprintf+0x320>
    30d8:	9d 2c       	mov	r9, r13
    30da:	9e 0c       	add	r9, r14
    30dc:	91 1a       	sub	r9, r17
    30de:	1e 2d       	mov	r17, r14
    30e0:	06 c0       	rjmp	.+12     	; 0x30ee <vfprintf+0x320>
    30e2:	80 e2       	ldi	r24, 0x20	; 32
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	b3 01       	movw	r22, r6
    30e8:	0e 94 02 1a 	call	0x3404	; 0x3404 <fputc>
    30ec:	1f 5f       	subi	r17, 0xFF	; 255
    30ee:	1e 15       	cp	r17, r14
    30f0:	c0 f3       	brcs	.-16     	; 0x30e2 <vfprintf+0x314>
    30f2:	04 c0       	rjmp	.+8      	; 0x30fc <vfprintf+0x32e>
    30f4:	1e 15       	cp	r17, r14
    30f6:	10 f4       	brcc	.+4      	; 0x30fc <vfprintf+0x32e>
    30f8:	e1 1a       	sub	r14, r17
    30fa:	01 c0       	rjmp	.+2      	; 0x30fe <vfprintf+0x330>
    30fc:	ee 24       	eor	r14, r14
    30fe:	04 ff       	sbrs	r16, 4
    3100:	0f c0       	rjmp	.+30     	; 0x3120 <vfprintf+0x352>
    3102:	80 e3       	ldi	r24, 0x30	; 48
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	b3 01       	movw	r22, r6
    3108:	0e 94 02 1a 	call	0x3404	; 0x3404 <fputc>
    310c:	02 ff       	sbrs	r16, 2
    310e:	1d c0       	rjmp	.+58     	; 0x314a <vfprintf+0x37c>
    3110:	01 fd       	sbrc	r16, 1
    3112:	03 c0       	rjmp	.+6      	; 0x311a <vfprintf+0x34c>
    3114:	88 e7       	ldi	r24, 0x78	; 120
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	0e c0       	rjmp	.+28     	; 0x3136 <vfprintf+0x368>
    311a:	88 e5       	ldi	r24, 0x58	; 88
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	0b c0       	rjmp	.+22     	; 0x3136 <vfprintf+0x368>
    3120:	80 2f       	mov	r24, r16
    3122:	86 78       	andi	r24, 0x86	; 134
    3124:	91 f0       	breq	.+36     	; 0x314a <vfprintf+0x37c>
    3126:	01 ff       	sbrs	r16, 1
    3128:	02 c0       	rjmp	.+4      	; 0x312e <vfprintf+0x360>
    312a:	8b e2       	ldi	r24, 0x2B	; 43
    312c:	01 c0       	rjmp	.+2      	; 0x3130 <vfprintf+0x362>
    312e:	80 e2       	ldi	r24, 0x20	; 32
    3130:	f7 fc       	sbrc	r15, 7
    3132:	8d e2       	ldi	r24, 0x2D	; 45
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	b3 01       	movw	r22, r6
    3138:	0e 94 02 1a 	call	0x3404	; 0x3404 <fputc>
    313c:	06 c0       	rjmp	.+12     	; 0x314a <vfprintf+0x37c>
    313e:	80 e3       	ldi	r24, 0x30	; 48
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	b3 01       	movw	r22, r6
    3144:	0e 94 02 1a 	call	0x3404	; 0x3404 <fputc>
    3148:	9a 94       	dec	r9
    314a:	d9 14       	cp	r13, r9
    314c:	c0 f3       	brcs	.-16     	; 0x313e <vfprintf+0x370>
    314e:	da 94       	dec	r13
    3150:	f1 01       	movw	r30, r2
    3152:	ed 0d       	add	r30, r13
    3154:	f1 1d       	adc	r31, r1
    3156:	80 81       	ld	r24, Z
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	b3 01       	movw	r22, r6
    315c:	0e 94 02 1a 	call	0x3404	; 0x3404 <fputc>
    3160:	dd 20       	and	r13, r13
    3162:	a9 f7       	brne	.-22     	; 0x314e <vfprintf+0x380>
    3164:	06 c0       	rjmp	.+12     	; 0x3172 <vfprintf+0x3a4>
    3166:	80 e2       	ldi	r24, 0x20	; 32
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	b3 01       	movw	r22, r6
    316c:	0e 94 02 1a 	call	0x3404	; 0x3404 <fputc>
    3170:	ea 94       	dec	r14
    3172:	ee 20       	and	r14, r14
    3174:	c1 f7       	brne	.-16     	; 0x3166 <vfprintf+0x398>
    3176:	43 ce       	rjmp	.-890    	; 0x2dfe <vfprintf+0x30>
    3178:	f3 01       	movw	r30, r6
    317a:	66 81       	ldd	r22, Z+6	; 0x06
    317c:	77 81       	ldd	r23, Z+7	; 0x07
    317e:	cb 01       	movw	r24, r22
    3180:	2b 96       	adiw	r28, 0x0b	; 11
    3182:	e2 e1       	ldi	r30, 0x12	; 18
    3184:	0c 94 a8 1a 	jmp	0x3550	; 0x3550 <__epilogue_restores__>

00003188 <calloc>:
    3188:	0f 93       	push	r16
    318a:	1f 93       	push	r17
    318c:	cf 93       	push	r28
    318e:	df 93       	push	r29
    3190:	68 9f       	mul	r22, r24
    3192:	80 01       	movw	r16, r0
    3194:	69 9f       	mul	r22, r25
    3196:	10 0d       	add	r17, r0
    3198:	78 9f       	mul	r23, r24
    319a:	10 0d       	add	r17, r0
    319c:	11 24       	eor	r1, r1
    319e:	c8 01       	movw	r24, r16
    31a0:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <malloc>
    31a4:	ec 01       	movw	r28, r24
    31a6:	00 97       	sbiw	r24, 0x00	; 0
    31a8:	29 f0       	breq	.+10     	; 0x31b4 <calloc+0x2c>
    31aa:	60 e0       	ldi	r22, 0x00	; 0
    31ac:	70 e0       	ldi	r23, 0x00	; 0
    31ae:	a8 01       	movw	r20, r16
    31b0:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <memset>
    31b4:	ce 01       	movw	r24, r28
    31b6:	df 91       	pop	r29
    31b8:	cf 91       	pop	r28
    31ba:	1f 91       	pop	r17
    31bc:	0f 91       	pop	r16
    31be:	08 95       	ret

000031c0 <malloc>:
    31c0:	cf 93       	push	r28
    31c2:	df 93       	push	r29
    31c4:	bc 01       	movw	r22, r24
    31c6:	82 30       	cpi	r24, 0x02	; 2
    31c8:	91 05       	cpc	r25, r1
    31ca:	10 f4       	brcc	.+4      	; 0x31d0 <malloc+0x10>
    31cc:	62 e0       	ldi	r22, 0x02	; 2
    31ce:	70 e0       	ldi	r23, 0x00	; 0
    31d0:	a0 91 80 02 	lds	r26, 0x0280
    31d4:	b0 91 81 02 	lds	r27, 0x0281
    31d8:	ed 01       	movw	r28, r26
    31da:	e0 e0       	ldi	r30, 0x00	; 0
    31dc:	f0 e0       	ldi	r31, 0x00	; 0
    31de:	40 e0       	ldi	r20, 0x00	; 0
    31e0:	50 e0       	ldi	r21, 0x00	; 0
    31e2:	21 c0       	rjmp	.+66     	; 0x3226 <malloc+0x66>
    31e4:	88 81       	ld	r24, Y
    31e6:	99 81       	ldd	r25, Y+1	; 0x01
    31e8:	86 17       	cp	r24, r22
    31ea:	97 07       	cpc	r25, r23
    31ec:	69 f4       	brne	.+26     	; 0x3208 <malloc+0x48>
    31ee:	8a 81       	ldd	r24, Y+2	; 0x02
    31f0:	9b 81       	ldd	r25, Y+3	; 0x03
    31f2:	30 97       	sbiw	r30, 0x00	; 0
    31f4:	19 f0       	breq	.+6      	; 0x31fc <malloc+0x3c>
    31f6:	93 83       	std	Z+3, r25	; 0x03
    31f8:	82 83       	std	Z+2, r24	; 0x02
    31fa:	04 c0       	rjmp	.+8      	; 0x3204 <malloc+0x44>
    31fc:	90 93 81 02 	sts	0x0281, r25
    3200:	80 93 80 02 	sts	0x0280, r24
    3204:	fe 01       	movw	r30, r28
    3206:	34 c0       	rjmp	.+104    	; 0x3270 <malloc+0xb0>
    3208:	68 17       	cp	r22, r24
    320a:	79 07       	cpc	r23, r25
    320c:	38 f4       	brcc	.+14     	; 0x321c <malloc+0x5c>
    320e:	41 15       	cp	r20, r1
    3210:	51 05       	cpc	r21, r1
    3212:	19 f0       	breq	.+6      	; 0x321a <malloc+0x5a>
    3214:	84 17       	cp	r24, r20
    3216:	95 07       	cpc	r25, r21
    3218:	08 f4       	brcc	.+2      	; 0x321c <malloc+0x5c>
    321a:	ac 01       	movw	r20, r24
    321c:	fe 01       	movw	r30, r28
    321e:	8a 81       	ldd	r24, Y+2	; 0x02
    3220:	9b 81       	ldd	r25, Y+3	; 0x03
    3222:	9c 01       	movw	r18, r24
    3224:	e9 01       	movw	r28, r18
    3226:	20 97       	sbiw	r28, 0x00	; 0
    3228:	e9 f6       	brne	.-70     	; 0x31e4 <malloc+0x24>
    322a:	41 15       	cp	r20, r1
    322c:	51 05       	cpc	r21, r1
    322e:	a9 f1       	breq	.+106    	; 0x329a <malloc+0xda>
    3230:	ca 01       	movw	r24, r20
    3232:	86 1b       	sub	r24, r22
    3234:	97 0b       	sbc	r25, r23
    3236:	04 97       	sbiw	r24, 0x04	; 4
    3238:	08 f4       	brcc	.+2      	; 0x323c <malloc+0x7c>
    323a:	ba 01       	movw	r22, r20
    323c:	e0 e0       	ldi	r30, 0x00	; 0
    323e:	f0 e0       	ldi	r31, 0x00	; 0
    3240:	2a c0       	rjmp	.+84     	; 0x3296 <malloc+0xd6>
    3242:	8d 91       	ld	r24, X+
    3244:	9c 91       	ld	r25, X
    3246:	11 97       	sbiw	r26, 0x01	; 1
    3248:	84 17       	cp	r24, r20
    324a:	95 07       	cpc	r25, r21
    324c:	f9 f4       	brne	.+62     	; 0x328c <malloc+0xcc>
    324e:	64 17       	cp	r22, r20
    3250:	75 07       	cpc	r23, r21
    3252:	81 f4       	brne	.+32     	; 0x3274 <malloc+0xb4>
    3254:	12 96       	adiw	r26, 0x02	; 2
    3256:	8d 91       	ld	r24, X+
    3258:	9c 91       	ld	r25, X
    325a:	13 97       	sbiw	r26, 0x03	; 3
    325c:	30 97       	sbiw	r30, 0x00	; 0
    325e:	19 f0       	breq	.+6      	; 0x3266 <malloc+0xa6>
    3260:	93 83       	std	Z+3, r25	; 0x03
    3262:	82 83       	std	Z+2, r24	; 0x02
    3264:	04 c0       	rjmp	.+8      	; 0x326e <malloc+0xae>
    3266:	90 93 81 02 	sts	0x0281, r25
    326a:	80 93 80 02 	sts	0x0280, r24
    326e:	fd 01       	movw	r30, r26
    3270:	32 96       	adiw	r30, 0x02	; 2
    3272:	4f c0       	rjmp	.+158    	; 0x3312 <malloc+0x152>
    3274:	ca 01       	movw	r24, r20
    3276:	86 1b       	sub	r24, r22
    3278:	97 0b       	sbc	r25, r23
    327a:	fd 01       	movw	r30, r26
    327c:	e8 0f       	add	r30, r24
    327e:	f9 1f       	adc	r31, r25
    3280:	61 93       	st	Z+, r22
    3282:	71 93       	st	Z+, r23
    3284:	02 97       	sbiw	r24, 0x02	; 2
    3286:	8d 93       	st	X+, r24
    3288:	9c 93       	st	X, r25
    328a:	43 c0       	rjmp	.+134    	; 0x3312 <malloc+0x152>
    328c:	fd 01       	movw	r30, r26
    328e:	82 81       	ldd	r24, Z+2	; 0x02
    3290:	93 81       	ldd	r25, Z+3	; 0x03
    3292:	9c 01       	movw	r18, r24
    3294:	d9 01       	movw	r26, r18
    3296:	10 97       	sbiw	r26, 0x00	; 0
    3298:	a1 f6       	brne	.-88     	; 0x3242 <malloc+0x82>
    329a:	80 91 7e 02 	lds	r24, 0x027E
    329e:	90 91 7f 02 	lds	r25, 0x027F
    32a2:	89 2b       	or	r24, r25
    32a4:	41 f4       	brne	.+16     	; 0x32b6 <malloc+0xf6>
    32a6:	80 91 ef 01 	lds	r24, 0x01EF
    32aa:	90 91 f0 01 	lds	r25, 0x01F0
    32ae:	90 93 7f 02 	sts	0x027F, r25
    32b2:	80 93 7e 02 	sts	0x027E, r24
    32b6:	40 91 f1 01 	lds	r20, 0x01F1
    32ba:	50 91 f2 01 	lds	r21, 0x01F2
    32be:	41 15       	cp	r20, r1
    32c0:	51 05       	cpc	r21, r1
    32c2:	41 f4       	brne	.+16     	; 0x32d4 <malloc+0x114>
    32c4:	4d b7       	in	r20, 0x3d	; 61
    32c6:	5e b7       	in	r21, 0x3e	; 62
    32c8:	80 91 ed 01 	lds	r24, 0x01ED
    32cc:	90 91 ee 01 	lds	r25, 0x01EE
    32d0:	48 1b       	sub	r20, r24
    32d2:	59 0b       	sbc	r21, r25
    32d4:	20 91 7e 02 	lds	r18, 0x027E
    32d8:	30 91 7f 02 	lds	r19, 0x027F
    32dc:	24 17       	cp	r18, r20
    32de:	35 07       	cpc	r19, r21
    32e0:	b0 f4       	brcc	.+44     	; 0x330e <malloc+0x14e>
    32e2:	ca 01       	movw	r24, r20
    32e4:	82 1b       	sub	r24, r18
    32e6:	93 0b       	sbc	r25, r19
    32e8:	86 17       	cp	r24, r22
    32ea:	97 07       	cpc	r25, r23
    32ec:	80 f0       	brcs	.+32     	; 0x330e <malloc+0x14e>
    32ee:	ab 01       	movw	r20, r22
    32f0:	4e 5f       	subi	r20, 0xFE	; 254
    32f2:	5f 4f       	sbci	r21, 0xFF	; 255
    32f4:	84 17       	cp	r24, r20
    32f6:	95 07       	cpc	r25, r21
    32f8:	50 f0       	brcs	.+20     	; 0x330e <malloc+0x14e>
    32fa:	42 0f       	add	r20, r18
    32fc:	53 1f       	adc	r21, r19
    32fe:	50 93 7f 02 	sts	0x027F, r21
    3302:	40 93 7e 02 	sts	0x027E, r20
    3306:	f9 01       	movw	r30, r18
    3308:	61 93       	st	Z+, r22
    330a:	71 93       	st	Z+, r23
    330c:	02 c0       	rjmp	.+4      	; 0x3312 <malloc+0x152>
    330e:	e0 e0       	ldi	r30, 0x00	; 0
    3310:	f0 e0       	ldi	r31, 0x00	; 0
    3312:	cf 01       	movw	r24, r30
    3314:	df 91       	pop	r29
    3316:	cf 91       	pop	r28
    3318:	08 95       	ret

0000331a <free>:
    331a:	cf 93       	push	r28
    331c:	df 93       	push	r29
    331e:	00 97       	sbiw	r24, 0x00	; 0
    3320:	09 f4       	brne	.+2      	; 0x3324 <free+0xa>
    3322:	50 c0       	rjmp	.+160    	; 0x33c4 <free+0xaa>
    3324:	ec 01       	movw	r28, r24
    3326:	22 97       	sbiw	r28, 0x02	; 2
    3328:	1b 82       	std	Y+3, r1	; 0x03
    332a:	1a 82       	std	Y+2, r1	; 0x02
    332c:	a0 91 80 02 	lds	r26, 0x0280
    3330:	b0 91 81 02 	lds	r27, 0x0281
    3334:	10 97       	sbiw	r26, 0x00	; 0
    3336:	09 f1       	breq	.+66     	; 0x337a <free+0x60>
    3338:	40 e0       	ldi	r20, 0x00	; 0
    333a:	50 e0       	ldi	r21, 0x00	; 0
    333c:	ac 17       	cp	r26, r28
    333e:	bd 07       	cpc	r27, r29
    3340:	08 f1       	brcs	.+66     	; 0x3384 <free+0x6a>
    3342:	bb 83       	std	Y+3, r27	; 0x03
    3344:	aa 83       	std	Y+2, r26	; 0x02
    3346:	fe 01       	movw	r30, r28
    3348:	21 91       	ld	r18, Z+
    334a:	31 91       	ld	r19, Z+
    334c:	e2 0f       	add	r30, r18
    334e:	f3 1f       	adc	r31, r19
    3350:	ae 17       	cp	r26, r30
    3352:	bf 07       	cpc	r27, r31
    3354:	79 f4       	brne	.+30     	; 0x3374 <free+0x5a>
    3356:	8d 91       	ld	r24, X+
    3358:	9c 91       	ld	r25, X
    335a:	11 97       	sbiw	r26, 0x01	; 1
    335c:	28 0f       	add	r18, r24
    335e:	39 1f       	adc	r19, r25
    3360:	2e 5f       	subi	r18, 0xFE	; 254
    3362:	3f 4f       	sbci	r19, 0xFF	; 255
    3364:	39 83       	std	Y+1, r19	; 0x01
    3366:	28 83       	st	Y, r18
    3368:	12 96       	adiw	r26, 0x02	; 2
    336a:	8d 91       	ld	r24, X+
    336c:	9c 91       	ld	r25, X
    336e:	13 97       	sbiw	r26, 0x03	; 3
    3370:	9b 83       	std	Y+3, r25	; 0x03
    3372:	8a 83       	std	Y+2, r24	; 0x02
    3374:	41 15       	cp	r20, r1
    3376:	51 05       	cpc	r21, r1
    3378:	71 f4       	brne	.+28     	; 0x3396 <free+0x7c>
    337a:	d0 93 81 02 	sts	0x0281, r29
    337e:	c0 93 80 02 	sts	0x0280, r28
    3382:	20 c0       	rjmp	.+64     	; 0x33c4 <free+0xaa>
    3384:	12 96       	adiw	r26, 0x02	; 2
    3386:	8d 91       	ld	r24, X+
    3388:	9c 91       	ld	r25, X
    338a:	13 97       	sbiw	r26, 0x03	; 3
    338c:	ad 01       	movw	r20, r26
    338e:	00 97       	sbiw	r24, 0x00	; 0
    3390:	11 f0       	breq	.+4      	; 0x3396 <free+0x7c>
    3392:	dc 01       	movw	r26, r24
    3394:	d3 cf       	rjmp	.-90     	; 0x333c <free+0x22>
    3396:	fa 01       	movw	r30, r20
    3398:	d3 83       	std	Z+3, r29	; 0x03
    339a:	c2 83       	std	Z+2, r28	; 0x02
    339c:	21 91       	ld	r18, Z+
    339e:	31 91       	ld	r19, Z+
    33a0:	e2 0f       	add	r30, r18
    33a2:	f3 1f       	adc	r31, r19
    33a4:	ce 17       	cp	r28, r30
    33a6:	df 07       	cpc	r29, r31
    33a8:	69 f4       	brne	.+26     	; 0x33c4 <free+0xaa>
    33aa:	88 81       	ld	r24, Y
    33ac:	99 81       	ldd	r25, Y+1	; 0x01
    33ae:	28 0f       	add	r18, r24
    33b0:	39 1f       	adc	r19, r25
    33b2:	2e 5f       	subi	r18, 0xFE	; 254
    33b4:	3f 4f       	sbci	r19, 0xFF	; 255
    33b6:	fa 01       	movw	r30, r20
    33b8:	31 83       	std	Z+1, r19	; 0x01
    33ba:	20 83       	st	Z, r18
    33bc:	8a 81       	ldd	r24, Y+2	; 0x02
    33be:	9b 81       	ldd	r25, Y+3	; 0x03
    33c0:	93 83       	std	Z+3, r25	; 0x03
    33c2:	82 83       	std	Z+2, r24	; 0x02
    33c4:	df 91       	pop	r29
    33c6:	cf 91       	pop	r28
    33c8:	08 95       	ret

000033ca <strnlen_P>:
    33ca:	fc 01       	movw	r30, r24
    33cc:	05 90       	lpm	r0, Z+
    33ce:	61 50       	subi	r22, 0x01	; 1
    33d0:	70 40       	sbci	r23, 0x00	; 0
    33d2:	01 10       	cpse	r0, r1
    33d4:	d8 f7       	brcc	.-10     	; 0x33cc <strnlen_P+0x2>
    33d6:	80 95       	com	r24
    33d8:	90 95       	com	r25
    33da:	8e 0f       	add	r24, r30
    33dc:	9f 1f       	adc	r25, r31
    33de:	08 95       	ret

000033e0 <memset>:
    33e0:	dc 01       	movw	r26, r24
    33e2:	01 c0       	rjmp	.+2      	; 0x33e6 <memset+0x6>
    33e4:	6d 93       	st	X+, r22
    33e6:	41 50       	subi	r20, 0x01	; 1
    33e8:	50 40       	sbci	r21, 0x00	; 0
    33ea:	e0 f7       	brcc	.-8      	; 0x33e4 <memset+0x4>
    33ec:	08 95       	ret

000033ee <strnlen>:
    33ee:	fc 01       	movw	r30, r24
    33f0:	61 50       	subi	r22, 0x01	; 1
    33f2:	70 40       	sbci	r23, 0x00	; 0
    33f4:	01 90       	ld	r0, Z+
    33f6:	01 10       	cpse	r0, r1
    33f8:	d8 f7       	brcc	.-10     	; 0x33f0 <strnlen+0x2>
    33fa:	80 95       	com	r24
    33fc:	90 95       	com	r25
    33fe:	8e 0f       	add	r24, r30
    3400:	9f 1f       	adc	r25, r31
    3402:	08 95       	ret

00003404 <fputc>:
    3404:	0f 93       	push	r16
    3406:	1f 93       	push	r17
    3408:	cf 93       	push	r28
    340a:	df 93       	push	r29
    340c:	8c 01       	movw	r16, r24
    340e:	eb 01       	movw	r28, r22
    3410:	8b 81       	ldd	r24, Y+3	; 0x03
    3412:	81 ff       	sbrs	r24, 1
    3414:	1b c0       	rjmp	.+54     	; 0x344c <fputc+0x48>
    3416:	82 ff       	sbrs	r24, 2
    3418:	0d c0       	rjmp	.+26     	; 0x3434 <fputc+0x30>
    341a:	2e 81       	ldd	r18, Y+6	; 0x06
    341c:	3f 81       	ldd	r19, Y+7	; 0x07
    341e:	8c 81       	ldd	r24, Y+4	; 0x04
    3420:	9d 81       	ldd	r25, Y+5	; 0x05
    3422:	28 17       	cp	r18, r24
    3424:	39 07       	cpc	r19, r25
    3426:	64 f4       	brge	.+24     	; 0x3440 <fputc+0x3c>
    3428:	e8 81       	ld	r30, Y
    342a:	f9 81       	ldd	r31, Y+1	; 0x01
    342c:	01 93       	st	Z+, r16
    342e:	f9 83       	std	Y+1, r31	; 0x01
    3430:	e8 83       	st	Y, r30
    3432:	06 c0       	rjmp	.+12     	; 0x3440 <fputc+0x3c>
    3434:	e8 85       	ldd	r30, Y+8	; 0x08
    3436:	f9 85       	ldd	r31, Y+9	; 0x09
    3438:	80 2f       	mov	r24, r16
    343a:	09 95       	icall
    343c:	89 2b       	or	r24, r25
    343e:	31 f4       	brne	.+12     	; 0x344c <fputc+0x48>
    3440:	8e 81       	ldd	r24, Y+6	; 0x06
    3442:	9f 81       	ldd	r25, Y+7	; 0x07
    3444:	01 96       	adiw	r24, 0x01	; 1
    3446:	9f 83       	std	Y+7, r25	; 0x07
    3448:	8e 83       	std	Y+6, r24	; 0x06
    344a:	02 c0       	rjmp	.+4      	; 0x3450 <fputc+0x4c>
    344c:	0f ef       	ldi	r16, 0xFF	; 255
    344e:	1f ef       	ldi	r17, 0xFF	; 255
    3450:	c8 01       	movw	r24, r16
    3452:	df 91       	pop	r29
    3454:	cf 91       	pop	r28
    3456:	1f 91       	pop	r17
    3458:	0f 91       	pop	r16
    345a:	08 95       	ret

0000345c <__ultoa_invert>:
    345c:	fa 01       	movw	r30, r20
    345e:	aa 27       	eor	r26, r26
    3460:	28 30       	cpi	r18, 0x08	; 8
    3462:	51 f1       	breq	.+84     	; 0x34b8 <__ultoa_invert+0x5c>
    3464:	20 31       	cpi	r18, 0x10	; 16
    3466:	81 f1       	breq	.+96     	; 0x34c8 <__ultoa_invert+0x6c>
    3468:	e8 94       	clt
    346a:	6f 93       	push	r22
    346c:	6e 7f       	andi	r22, 0xFE	; 254
    346e:	6e 5f       	subi	r22, 0xFE	; 254
    3470:	7f 4f       	sbci	r23, 0xFF	; 255
    3472:	8f 4f       	sbci	r24, 0xFF	; 255
    3474:	9f 4f       	sbci	r25, 0xFF	; 255
    3476:	af 4f       	sbci	r26, 0xFF	; 255
    3478:	b1 e0       	ldi	r27, 0x01	; 1
    347a:	3e d0       	rcall	.+124    	; 0x34f8 <__ultoa_invert+0x9c>
    347c:	b4 e0       	ldi	r27, 0x04	; 4
    347e:	3c d0       	rcall	.+120    	; 0x34f8 <__ultoa_invert+0x9c>
    3480:	67 0f       	add	r22, r23
    3482:	78 1f       	adc	r23, r24
    3484:	89 1f       	adc	r24, r25
    3486:	9a 1f       	adc	r25, r26
    3488:	a1 1d       	adc	r26, r1
    348a:	68 0f       	add	r22, r24
    348c:	79 1f       	adc	r23, r25
    348e:	8a 1f       	adc	r24, r26
    3490:	91 1d       	adc	r25, r1
    3492:	a1 1d       	adc	r26, r1
    3494:	6a 0f       	add	r22, r26
    3496:	71 1d       	adc	r23, r1
    3498:	81 1d       	adc	r24, r1
    349a:	91 1d       	adc	r25, r1
    349c:	a1 1d       	adc	r26, r1
    349e:	20 d0       	rcall	.+64     	; 0x34e0 <__ultoa_invert+0x84>
    34a0:	09 f4       	brne	.+2      	; 0x34a4 <__ultoa_invert+0x48>
    34a2:	68 94       	set
    34a4:	3f 91       	pop	r19
    34a6:	2a e0       	ldi	r18, 0x0A	; 10
    34a8:	26 9f       	mul	r18, r22
    34aa:	11 24       	eor	r1, r1
    34ac:	30 19       	sub	r19, r0
    34ae:	30 5d       	subi	r19, 0xD0	; 208
    34b0:	31 93       	st	Z+, r19
    34b2:	de f6       	brtc	.-74     	; 0x346a <__ultoa_invert+0xe>
    34b4:	cf 01       	movw	r24, r30
    34b6:	08 95       	ret
    34b8:	46 2f       	mov	r20, r22
    34ba:	47 70       	andi	r20, 0x07	; 7
    34bc:	40 5d       	subi	r20, 0xD0	; 208
    34be:	41 93       	st	Z+, r20
    34c0:	b3 e0       	ldi	r27, 0x03	; 3
    34c2:	0f d0       	rcall	.+30     	; 0x34e2 <__ultoa_invert+0x86>
    34c4:	c9 f7       	brne	.-14     	; 0x34b8 <__ultoa_invert+0x5c>
    34c6:	f6 cf       	rjmp	.-20     	; 0x34b4 <__ultoa_invert+0x58>
    34c8:	46 2f       	mov	r20, r22
    34ca:	4f 70       	andi	r20, 0x0F	; 15
    34cc:	40 5d       	subi	r20, 0xD0	; 208
    34ce:	4a 33       	cpi	r20, 0x3A	; 58
    34d0:	18 f0       	brcs	.+6      	; 0x34d8 <__ultoa_invert+0x7c>
    34d2:	49 5d       	subi	r20, 0xD9	; 217
    34d4:	31 fd       	sbrc	r19, 1
    34d6:	40 52       	subi	r20, 0x20	; 32
    34d8:	41 93       	st	Z+, r20
    34da:	02 d0       	rcall	.+4      	; 0x34e0 <__ultoa_invert+0x84>
    34dc:	a9 f7       	brne	.-22     	; 0x34c8 <__ultoa_invert+0x6c>
    34de:	ea cf       	rjmp	.-44     	; 0x34b4 <__ultoa_invert+0x58>
    34e0:	b4 e0       	ldi	r27, 0x04	; 4
    34e2:	a6 95       	lsr	r26
    34e4:	97 95       	ror	r25
    34e6:	87 95       	ror	r24
    34e8:	77 95       	ror	r23
    34ea:	67 95       	ror	r22
    34ec:	ba 95       	dec	r27
    34ee:	c9 f7       	brne	.-14     	; 0x34e2 <__ultoa_invert+0x86>
    34f0:	00 97       	sbiw	r24, 0x00	; 0
    34f2:	61 05       	cpc	r22, r1
    34f4:	71 05       	cpc	r23, r1
    34f6:	08 95       	ret
    34f8:	9b 01       	movw	r18, r22
    34fa:	ac 01       	movw	r20, r24
    34fc:	0a 2e       	mov	r0, r26
    34fe:	06 94       	lsr	r0
    3500:	57 95       	ror	r21
    3502:	47 95       	ror	r20
    3504:	37 95       	ror	r19
    3506:	27 95       	ror	r18
    3508:	ba 95       	dec	r27
    350a:	c9 f7       	brne	.-14     	; 0x34fe <__ultoa_invert+0xa2>
    350c:	62 0f       	add	r22, r18
    350e:	73 1f       	adc	r23, r19
    3510:	84 1f       	adc	r24, r20
    3512:	95 1f       	adc	r25, r21
    3514:	a0 1d       	adc	r26, r0
    3516:	08 95       	ret

00003518 <__prologue_saves__>:
    3518:	2f 92       	push	r2
    351a:	3f 92       	push	r3
    351c:	4f 92       	push	r4
    351e:	5f 92       	push	r5
    3520:	6f 92       	push	r6
    3522:	7f 92       	push	r7
    3524:	8f 92       	push	r8
    3526:	9f 92       	push	r9
    3528:	af 92       	push	r10
    352a:	bf 92       	push	r11
    352c:	cf 92       	push	r12
    352e:	df 92       	push	r13
    3530:	ef 92       	push	r14
    3532:	ff 92       	push	r15
    3534:	0f 93       	push	r16
    3536:	1f 93       	push	r17
    3538:	cf 93       	push	r28
    353a:	df 93       	push	r29
    353c:	cd b7       	in	r28, 0x3d	; 61
    353e:	de b7       	in	r29, 0x3e	; 62
    3540:	ca 1b       	sub	r28, r26
    3542:	db 0b       	sbc	r29, r27
    3544:	0f b6       	in	r0, 0x3f	; 63
    3546:	f8 94       	cli
    3548:	de bf       	out	0x3e, r29	; 62
    354a:	0f be       	out	0x3f, r0	; 63
    354c:	cd bf       	out	0x3d, r28	; 61
    354e:	09 94       	ijmp

00003550 <__epilogue_restores__>:
    3550:	2a 88       	ldd	r2, Y+18	; 0x12
    3552:	39 88       	ldd	r3, Y+17	; 0x11
    3554:	48 88       	ldd	r4, Y+16	; 0x10
    3556:	5f 84       	ldd	r5, Y+15	; 0x0f
    3558:	6e 84       	ldd	r6, Y+14	; 0x0e
    355a:	7d 84       	ldd	r7, Y+13	; 0x0d
    355c:	8c 84       	ldd	r8, Y+12	; 0x0c
    355e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3560:	aa 84       	ldd	r10, Y+10	; 0x0a
    3562:	b9 84       	ldd	r11, Y+9	; 0x09
    3564:	c8 84       	ldd	r12, Y+8	; 0x08
    3566:	df 80       	ldd	r13, Y+7	; 0x07
    3568:	ee 80       	ldd	r14, Y+6	; 0x06
    356a:	fd 80       	ldd	r15, Y+5	; 0x05
    356c:	0c 81       	ldd	r16, Y+4	; 0x04
    356e:	1b 81       	ldd	r17, Y+3	; 0x03
    3570:	aa 81       	ldd	r26, Y+2	; 0x02
    3572:	b9 81       	ldd	r27, Y+1	; 0x01
    3574:	ce 0f       	add	r28, r30
    3576:	d1 1d       	adc	r29, r1
    3578:	0f b6       	in	r0, 0x3f	; 63
    357a:	f8 94       	cli
    357c:	de bf       	out	0x3e, r29	; 62
    357e:	0f be       	out	0x3f, r0	; 63
    3580:	cd bf       	out	0x3d, r28	; 61
    3582:	ed 01       	movw	r28, r26
    3584:	08 95       	ret

00003586 <_exit>:
    3586:	f8 94       	cli

00003588 <__stop_program>:
    3588:	ff cf       	rjmp	.-2      	; 0x3588 <__stop_program>
